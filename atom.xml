<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Deng&#39;s Blog</title>
  <subtitle>Work Smart, Enjoy Life!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://objcer.com/"/>
  <updated>2017-10-17T01:52:49.000Z</updated>
  <id>http://objcer.com/</id>
  
  <author>
    <name>小邓</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>0.1+0.2=0.30000000000000004❓</title>
    <link href="http://objcer.com/2017/10/16/floating-point-arithmetic/"/>
    <id>http://objcer.com/2017/10/16/floating-point-arithmetic/</id>
    <published>2017-10-16T08:31:42.000Z</published>
    <updated>2017-10-17T01:52:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/1-brjYnVlXwM3j_SWXImT0Rg.png" alt=""><br>JavaScript中所有的数字，无论是整数还是小数，其类型都是 Number，遵循 <a href="http://grouper.ieee.org/groups/754/" target="_blank" rel="external">IEEE 754</a> 程序内部用一个 64 位固定长度的二进制进行存储表示。JavaScript 中的浮点数进行运算时，经常会遇到计算精度问题，例如经典的 <code>0.1+0.2=0.30000000000000004</code>，本文将探究 JavaScript 的浮点数，并解释为何 <code>0.1+0.2=0.30000000000000004</code></p>
<a id="more"></a>
<h2 id="浮点数的二进制表示"><a href="#浮点数的二进制表示" class="headerlink" title="浮点数的二进制表示"></a>浮点数的二进制表示</h2><p>JavaScript 里的数字是采用 <a href="http://grouper.ieee.org/groups/754/" target="_blank" rel="external">IEEE 754</a> 标准的 64 位 double 双精度浮点数（与之相关的还有 32 位 float 单精度浮点数）。该规范定义了浮点数的格式。</p>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/5F33F675-2DF0-472F-9F2E-98066AE91720.png" alt=""></p>
<p>对于 32 位的浮点数，最高的 1 位是符号位 S，接着的 8 位是指数 E，剩下的 23 位为尾数位 M<br>对于 64 位的浮点数，最高的 1 位是符号位 S，接着的 11 位是指数 E，剩下的 52 位为尾数位 M</p>
<ul>
<li>符号位 S：0 表示正数，1 表示负数</li>
<li>指数 E：表示次方</li>
<li>尾数位 M：表示有效数字（小数部分）</li>
</ul>
<p>实际数字的计算公式为：<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">V = (-<span class="number">1</span>)<span class="symbol">^S</span> * M * <span class="number">2</span><span class="symbol">^E</span></div></pre></td></tr></table></figure></p>
<p>接下来只对 64 位浮点数的二进制表示进行分析：</p>
<p>该计算公式遵循科学计数法的规范，对于十进制表示而言，尾数的范围是 <code>0&lt;M&lt;10</code>；对于二进制表示而言，尾数的范围是 <code>0&lt;M&lt;2</code>。浮点数二进制表示，所以此处尾数的范围是：<code>0&lt;M&lt;2</code>，也就是说 M 的整数位始终是 1，所以可以舍去，只保留后面的小数部分，这样就能表示 53 位了。</p>
<p>指数位 E 是一个无符号整数，64 位浮点数中，指数位长度是 11 位，取值范围是 <code>[0~2047]</code>，由于科学计数法中指数可正可负，所以，中间数 1023，<code>[0,1022]</code> 表示为负，<code>[1024,2047]</code> 表示为正</p>
<p>最终的公式变成：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">V = (<span class="number">-1</span>)^S * (M + <span class="number">1</span>) * <span class="number">2</span>^(E - <span class="number">1023</span>)</div></pre></td></tr></table></figure></p>
<h3 id="十进制转换为二进制"><a href="#十进制转换为二进制" class="headerlink" title="十进制转换为二进制"></a>十进制转换为二进制</h3><p><strong>十进制整数转换为二进制整数：</strong>采用”除2取余，逆序排列”法。具体做法是：用 2 去除十进制整数，可以得到一个商和余数；再用 2 去除商，又会得到一个商和余数，如此进行，直到商为零时为止，然后把先得到的余数作为二进制数的低位有效位，后得到的余数作为二进制数的高位有效位，依次排列起来。</p>
<p><strong>十进制小数转换成二进制小数：</strong>采用”乘2取整，顺序排列”法。具体做法是：用 2 乘十进制小数，可以得到积，将积的整数部分取出，再用 2 乘余下的小数 部分，又得到一个积，再将积的整数部分取出，如此进行，直到积中的小数部分为零，或者达到所要求的精度为止。然后把取出的整数部分按顺序排列起来，先取的整数作为二进制小数的高位有效位，后取的整数作为低位有效位。</p>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/58DF62FC-51A3-4F01-A3C6-0E75DF916261.png" alt=""></p>
<p>（173.8125）10＝（❓）2</p>
<ul>
<li>（173）10＝（10101101）2</li>
<li>（0.8125）10＝（0.1101）2</li>
</ul>
<p>把整数部分和小数部分合并得：（173.8125）10＝（10101101.1101）2</p>
<h3 id="64-位浮点数的二进制表示"><a href="#64-位浮点数的二进制表示" class="headerlink" title="64 位浮点数的二进制表示"></a>64 位浮点数的二进制表示</h3><blockquote>
<p>十进制数和 64 位浮点数二进制相互转换可以访问该网站进行：<br><a href="http://www.binaryconvert.com/convert_double.html" target="_blank" rel="external">http://www.binaryconvert.com/convert_double.html</a></p>
</blockquote>
<p>下面以 0.1 为例，对其进行 64 位二进制表示</p>
<p>0.1 转换成二进制：0.0001100110011001100(1100循环)，即 <code>1.100110011001100x2^-4</code>，得到:</p>
<ul>
<li>指数位 E = -4 + 1023 = 1019 (<code>1019</code> 11 位二进制表示为：01111111011)</li>
<li>尾数位 M = 100110011001100… (舍去首位 1)</li>
</ul>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/000D23FF-1ECD-45D1-9BC3-09908A10787B.png" alt=""></p>
<p>所以十进制 0.1 转换成 64 位浮点数二进制表示为：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">0011111110111001100110011001100110011001100110011001100110011010</span></div></pre></td></tr></table></figure></p>
<p>而将 64 位浮点数二进制的 0.1 转换回十进制时，得到：<code>1.00000000000000005551115123126E-1</code>。</p>
<p>但是：此时输出 <code>x</code> 为啥能得到 0.1 呢？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">0.1</span></div><div class="line"><span class="built_in">console</span>.log(x) <span class="comment">// -&gt; 0.1</span></div></pre></td></tr></table></figure></p>
<p><strong>分析：</strong>尾数位固定长度 52 位，加上省略的整数位 1，就再加上一位，那么尾数最多能表示的数为：2^53=9007199254740992，对应的十进制科学计数尾数是 9.007199254740992，这也是 JavaScript 最多能表示的精度，长度是 16，所以用 <code>toPrecision(16)</code>  来做精度运算，于是：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">0.10000000000000000555</span>.toPrecision(<span class="number">16</span>) <span class="comment">// -&gt; 0.1</span></div></pre></td></tr></table></figure></p>
<p>如果使用更高精度，那么可能得到的就不是 0.1<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">0.1</span></div><div class="line"><span class="built_in">console</span>.log(x.toPrecision(<span class="number">21</span>)) <span class="comment">// -&gt; 0.100000000000000005551</span></div></pre></td></tr></table></figure></p>
<p>注意：<code>toPrecision</code> 方法最大指定精度为 21。对于 0.1 而言，64 位二进制表示，最多能表示的精度为 16 位；转换成十进制后 <code>0.100000000000000005551</code>，默认的 JavaScript 使用 16 位进行截取，我们最多能使用 21 位进行截取，注意二者的区别。</p>
<h3 id="toPrecision-和-toFixed"><a href="#toPrecision-和-toFixed" class="headerlink" title="toPrecision 和 toFixed"></a>toPrecision 和 toFixed</h3><ul>
<li><code>toPrecision</code> 方法以指定的精度返回该数值对象的字符串表示，精度是从左至右第一个不为0的数开始数起</li>
<li><code>toFixed</code> 方法使用定点表示法来格式化一个数，是小数点后指定位数取整，从小数点开始数起</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var x = <span class="number">0.12345</span></div><div class="line">x.toPrecision(<span class="number">3</span>) <span class="comment">// -&gt; "0.123"</span></div><div class="line"></div><div class="line">var y = <span class="number">1.234</span></div><div class="line">y.toFixed(<span class="number">3</span>) <span class="comment">// -&gt; "1.234"</span></div></pre></td></tr></table></figure>
<p>这两个方法在截取数字时，都有进行四舍五入处理，但是都存在 BUG，使用要谨慎❗️<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var x = <span class="number">0.3456</span></div><div class="line"><span class="function"><span class="title">x</span>.toPrecision(3) // -&gt;</span> <span class="string">"0.346"</span></div><div class="line"><span class="function"><span class="title">x</span>.toFixed(3) // -&gt;</span> <span class="string">"0.346"</span></div><div class="line"></div><div class="line"><span class="comment">// BUG</span></div><div class="line">var y = <span class="number">1.005</span></div><div class="line"><span class="function"><span class="title">y</span>.toPrecision(3) // -&gt;</span> <span class="string">"1.00"</span></div><div class="line"><span class="function"><span class="title">y</span>.toFixed(2) // -&gt;</span> <span class="string">"1.00"</span></div></pre></td></tr></table></figure></p>
<p>原因是：1.005 实际对应的数字是 1.00499999999999989，在四舍五入时全部被舍去了</p>
<h2 id="0-1-0-2-0-30000000000000004"><a href="#0-1-0-2-0-30000000000000004" class="headerlink" title="0.1+0.2=0.30000000000000004"></a>0.1+0.2=0.30000000000000004</h2><p>在计算 <code>0.1+0.2</code> 的时候，现将其转换为二进制，得到的结果也是二进制，然后再将其转换为十进制<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">0.00011001100110011001100110011001100110011001100110011010</span> +</div><div class="line"><span class="number">0.0011001100110011001100110011001100110011001100110011010</span> =</div><div class="line"><span class="number">0.0100110011001100110011001100110011001100110011001100111</span></div></pre></td></tr></table></figure></p>
<p>计算结果 <code>0.0100110011001100110011001100110011001100110011001100111</code> 转换成十进制，就是 <code>0.30000000000000004</code>，这就导致出现了误差。</p>
<p>遇到浮点数误差问题时可以直接使用 <a href="https://github.com/dt-fe/number-precision/blob/master/src/index.js" target="_blank" rel="external">dt-fe/number-precision</a> 完美支持浮点数的加减乘除、四舍五入等运算。</p>
<h2 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h2><p>根据浮点数算术标准，指数位最大值为 2047，E = 2047 -1023 = 1024，所以 <strong>JavaScript 能表示的数值范围是：<code>[-(2^1024-1), +(2^1024-1)]</code>，即：正负1.7976931348623157乘以10的308次方</strong>，注意：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Math.pow<span class="function"><span class="params">(<span class="number">2</span>, <span class="number">1023</span>)</span></span></div><div class="line">-&gt; <span class="number">8.98846567431158e+307</span></div><div class="line"></div><div class="line">Math.pow<span class="function"><span class="params">(<span class="number">2</span>, <span class="number">1024</span>)</span></span></div><div class="line">-&gt; Infinity</div></pre></td></tr></table></figure></p>
<p><strong>注意：</strong></p>
<ul>
<li><code>Number.MIN_VALUE</code> 属性表示在 JavaScript 中所能表示的最小的正值<ul>
<li>值为 5e-324</li>
<li>MIN_VALUE 属性是 JavaScript 里最接近 0 的正值，而不是最小的负值</li>
<li>小于 MIN_VALUE 的值将会转换为 0</li>
</ul>
</li>
<li><code>Number.MAX_VALUE</code> 属性表示在 JavaScript 里所能表示的最大数值<ul>
<li>值为 1.7976931348623157e+308</li>
<li>大于 MAX_VALUE 的值代表 “Infinity”</li>
</ul>
</li>
</ul>
<p><strong>JavaScript 规定能安全的表示数字(进行精确算术运算)的范围在 ：<code>[-2^53, +2^53]</code>，即正负2的53次方</strong>；对于超过这个范围的整数，JavaScript 依旧可以进行运算，但却不保证运算结果的准确性，这也是 JavaScript 中安全整数的两个边界：<code>Number.MIN_SAFE_INTEGER</code> 和 <code>Number.MAX_SAFE_INTEGER</code>。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Number.MIN_SAFE_INTEGER</div><div class="line"><span class="meta">-&gt;</span><span class="bash"> -9007199254740991</span></div><div class="line"></div><div class="line">Number.MAX_SAFE_INTEGER</div><div class="line"><span class="meta">-&gt;</span><span class="bash"> 9007199254740991</span></div></pre></td></tr></table></figure></p>
<p>超过安全整数范围的，计算不保证正确，例如：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Math.pow(<span class="number">2</span>, <span class="number">53</span>)</div><div class="line">-&gt; <span class="number">9007199254740992</span></div><div class="line">Math.pow(<span class="number">2</span>, <span class="number">53</span>) + <span class="number">1</span></div><div class="line">-&gt; <span class="number">9007199254740992</span></div><div class="line">Math.pow(<span class="number">2</span>, <span class="number">53</span>) + <span class="number">2</span></div><div class="line">-&gt; <span class="number">9007199254740994</span></div></pre></td></tr></table></figure></p>
<p>对于不在 <code>[-2^53, +2^53]</code> 范围中的数字，例如 (2^53, 2^63) 之间的数会出现什么情况呢？</p>
<ul>
<li>(2^53, 2^54) 之间的数会两个选一个，只能精确表示偶数</li>
<li>(2^54, 2^55) 之间的数会四个选一个，只能精确表示4的倍数</li>
<li>… 依次跳过更多2的倍数</li>
</ul>
<p>下面这张图能很好的表示 JavaScript 中浮点数和实数（Real Number）之间的对应关系，我们常用的 <code>[-2^53, 2^53]</code> 只是最中间非常小的一部分，越往两边越稀疏越不精确。</p>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/real-numbers-floating-point-numbers.jpeg" alt=""></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://github.com/camsong/blog/issues/9" target="_blank" rel="external">JavaScript 浮点数陷阱及解法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/1-brjYnVlXwM3j_SWXImT0Rg.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;JavaScript中所有的数字，无论是整数还是小数，其类型都是 Number，遵循 &lt;a href=&quot;http://grouper.ieee.org/groups/754/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IEEE 754&lt;/a&gt; 程序内部用一个 64 位固定长度的二进制进行存储表示。JavaScript 中的浮点数进行运算时，经常会遇到计算精度问题，例如经典的 &lt;code&gt;0.1+0.2=0.30000000000000004&lt;/code&gt;，本文将探究 JavaScript 的浮点数，并解释为何 &lt;code&gt;0.1+0.2=0.30000000000000004&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://objcer.com/categories/JS/"/>
    
    
      <category term="float-point" scheme="http://objcer.com/tags/float-point/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中何时加分号❓</title>
    <link href="http://objcer.com/2017/10/13/hacking-semicolons/"/>
    <id>http://objcer.com/2017/10/13/hacking-semicolons/</id>
    <published>2017-10-13T02:06:47.000Z</published>
    <updated>2017-10-16T09:55:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>在阅读 medium 上的文章 <a href="https://codeburst.io/javascript-async-await-with-foreach-b6ba62bbf404" target="_blank" rel="external">JavaScript: async/await with forEach()</a> 时，作者用了如下一个例子来阐述：async/await 和 forEach 之间的问题。但是仔细琢磨这段代码，发现不对劲啊 😤 明显和我之前的认知不同啊。本文将分析一下其中的蹊跷。</p>
<blockquote>
<p>关于 async/await 和 forEach，我在 <a href="https://objcer.com/2017/10/12/async-await-with-forEach/">当 async/await 遇上 forEach</a> 文中进行了详细分析，读者若对此不熟悉，请先前往了解 👉</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> waitFor = <span class="function">(<span class="params">ms</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">r</span> =&gt;</span> setTimeout(r, ms))</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(<span class="keyword">async</span> (num) =&gt; &#123;</div><div class="line">  <span class="keyword">await</span> waitFor(<span class="number">50</span>)</div><div class="line">  <span class="built_in">console</span>.log(num)</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Done'</span>)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>当 async/await 遇上 forEach，无非就是将回调的异步函数，全部并行执行了，而非我们期望的串行执行。那么对于这段代码，正常的输出结果是：输出：<code>Done</code>，间隔 50 毫秒，输出：1，2，3；但是实际却只输出了 <code>Done</code>，所以我们可以断定这段代码有问题。</p>
<h3 id="考虑箭头函数的问题"><a href="#考虑箭头函数的问题" class="headerlink" title="考虑箭头函数的问题"></a>考虑箭头函数的问题</h3><p>一开始我把目光放到箭头函数上，箭头函数 <code>waitFor</code> 返回一个 Promise 对象， 把箭头函数返回改造成如下，发现，执行结果正确了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> waitFor = <span class="function">(<span class="params">ms</span>) =&gt;</span> &#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">r</span> =&gt;</span> setTimeout(r, ms))&#125;</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(<span class="keyword">async</span> (num) =&gt; &#123;</div><div class="line">  <span class="keyword">await</span> waitFor(<span class="number">50</span>)</div><div class="line">  <span class="built_in">console</span>.log(num)</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Done'</span>)</div></pre></td></tr></table></figure></p>
<p>然后，在 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="external">MDN - Arrow functions</a> 发现：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// Parenthesize the <span class="keyword">body</span> <span class="keyword">of</span> <span class="keyword">function</span> <span class="title">to</span> <span class="keyword">return</span> <span class="type">an</span> object literal expression:</div><div class="line">params =&gt; (&#123;foo: bar&#125;)</div></pre></td></tr></table></figure></p>
<p>指箭头函数返回对象字面量时，需要用括号包起来。对于如下函数：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> square = <span class="function"><span class="keyword">function</span><span class="params">(n)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        square: n * n</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以改写成箭头函数如下：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> square = <span class="built_in">n</span> =&gt; &#123; squa<span class="symbol">re:</span> <span class="built_in">n</span> * <span class="built_in">n</span> &#125;</div></pre></td></tr></table></figure></p>
<p>此时调用 <code>square</code> 函数，会发现，无论传入什么参数都没有任何输出，为啥呢？</p>
<p>JavaScript 在解析 <code>square</code> 函数时，遇到 <code>{ square: n * n }</code>，并不是认为其是一个对象字面量，而把它解析成 <code>Labelled Block Statement</code>，label 为 <code>square</code>，statement 为 <code>n * n</code>；由于没有返回值，执行 <code>square</code> 函数会一直返回 undefined，如果返回 <code>n * n</code> 那么代码也可正常执行<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> square = <span class="built_in">n</span> =&gt; &#123; squa<span class="symbol">re:</span> return <span class="built_in">n</span> * <span class="built_in">n</span> &#125;</div></pre></td></tr></table></figure></p>
<p>显然这样的代码太奇怪了，最简单的方式是用括号将对象字面量包起来，这样，JavaScript 在解析的时候遇到括号，就不会将 <code>{ square: n * n }</code> 认为是 <code>Labelled Block Statement</code> 了，而是对象字面量，如下：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> square = <span class="built_in">n</span> =&gt; (&#123; squa<span class="symbol">re:</span> <span class="built_in">n</span> * <span class="built_in">n</span> &#125;)</div></pre></td></tr></table></figure></p>
<p>但是，但是，我们分析的这段代码中 <code>waitFor</code> 箭头函数返回的是 Promise 对象，并非对象字面量，所以并不是箭头函数的锅啊。</p>
<h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><p>我们看到如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;<span class="string">'b'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</div><div class="line">[<span class="string">'b'</span>].forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(v)&#125;)  <span class="comment">// 输出： 1, 2, 3</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a = &#123;<span class="string">'b'</span>: <span class="number">1</span>&#125;</div><div class="line">[<span class="string">'b'</span>].forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(v)&#125;) <span class="comment">// 出错：Uncaught TypeError: &#123;(intermediate value)&#125;.b.forEach is not a function</span></div></pre></td></tr></table></figure></p>
<p>显然 JavaScript 在代码解析的时候，第一行和第二行没有分开啊，我们可以加上分号，这样代码就正常执行了。<br>我们分析的这段代码，在 <code>waitFor</code> 箭头函数后加上分号，代码也就正确执行了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> waitFor = <span class="function">(<span class="params">ms</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">r</span> =&gt;</span> setTimeout(r, ms));</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(<span class="keyword">async</span> (num) =&gt; &#123;</div><div class="line">  <span class="keyword">await</span> waitFor(<span class="number">50</span>)</div><div class="line">  <span class="built_in">console</span>.log(num)</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Done'</span>)</div></pre></td></tr></table></figure></p>
<p>这是为啥呢？似乎在我们的印象中，JavaScript 是可以忽略分号的，莫非有特殊情况。在知乎问题： <a href="https://www.zhihu.com/question/20298345/answer/49551142" target="_blank" rel="external">JavaScript 语句后应该加分号么？</a> 中，我们发现：</p>
<blockquote>
<p>👉 <strong>真正会导致上下行解析出问题的 token 有 5 个：括号，方括号，正则开头的斜杠，加号，减号。</strong>我还从没见过实际代码中用正则、加号、减号作为行首的情况，所以总结下来就是一句话：<strong>一行开头是括号或者方括号的时候加上分号就可以了，其他时候全部不需要。</strong></p>
</blockquote>
<p>也即是在 <code>+ - [ ( /</code> 这五个字符开头时，需要在上一行或者当前行首加上分号，避免 JavaScript 上下行解析出错。</p>
<h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><p>medium 的作者不小心踩了一个坑，少写了一个分号，导致 JavaScript 上下文解析出错，写了一个不恰当的例子，通过一步步分析，还是找到了问题的本质，也算是涨姿势了😋</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.mariusschulz.com/2015/06/09/returning-object-literals-from-arrow-functions-in-javascript" target="_blank" rel="external">Returning Object Literals from Arrow Functions in JavaScript</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在阅读 medium 上的文章 &lt;a href=&quot;https://codeburst.io/javascript-async-await-with-foreach-b6ba62bbf404&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript: async/await with forEach()&lt;/a&gt; 时，作者用了如下一个例子来阐述：async/await 和 forEach 之间的问题。但是仔细琢磨这段代码，发现不对劲啊 😤 明显和我之前的认知不同啊。本文将分析一下其中的蹊跷。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于 async/await 和 forEach，我在 &lt;a href=&quot;https://objcer.com/2017/10/12/async-await-with-forEach/&quot;&gt;当 async/await 遇上 forEach&lt;/a&gt; 文中进行了详细分析，读者若对此不熟悉，请先前往了解 👉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; waitFor = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;ms&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;r&lt;/span&gt; =&amp;gt;&lt;/span&gt; setTimeout(r, ms))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].forEach(&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; (num) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; waitFor(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(num)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Done&#39;&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JS" scheme="http://objcer.com/categories/JS/"/>
    
    
  </entry>
  
  <entry>
    <title>当 async/await 遇上 forEach</title>
    <link href="http://objcer.com/2017/10/12/async-await-with-forEach/"/>
    <id>http://objcer.com/2017/10/12/async-await-with-forEach/</id>
    <published>2017-10-12T08:28:38.000Z</published>
    <updated>2017-10-12T08:29:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>在文章 <a href="https://objcer.com/2017/10/11/Async-Await/">ES7 中的 async await</a> 中介绍了 async/await。本文将分析介绍当 async/await 遇上 <code>forEach</code> 出现的一些问题和解决方案。</p>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/1-pWGJIKats-zuumA3RQNEWQ.jpeg" alt=""></p>
<a id="more"></a>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getNumbers = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> multi = <span class="function"><span class="params">num</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">if</span> (num) &#123;</div><div class="line">        resolve(num * num)</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'num not specified'</span>))</div><div class="line">      &#125;</div><div class="line">    &#125;, <span class="number">1000</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> nums = <span class="keyword">await</span> getNumbers()</div><div class="line">  nums.forEach(<span class="keyword">async</span> x =&gt; &#123;</div><div class="line">    <span class="keyword">var</span> res = <span class="keyword">await</span> multi(x)</div><div class="line">    <span class="built_in">console</span>.log(res)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">test()</div></pre></td></tr></table></figure>
<p>在这个例子中，通过 <code>forEach</code> 遍历的将每一个数字都执行 <code>multi</code> 操作。代码执行的结果是：1 秒后，一次性输出1，4，9。这个结果和我们的预期有些区别，我们是希望每间隔 1 秒，然后依次输出 1，4，9；所以当前代码应该是并行执行了，而我们期望的应该是串行执行。</p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><h3 id="JavaScript-中的循环数组遍历"><a href="#JavaScript-中的循环数组遍历" class="headerlink" title="JavaScript 中的循环数组遍历"></a>JavaScript 中的循环数组遍历</h3><p>在 JavaScript 中提供了如下四种循环遍历数组元素的方式：</p>
<ul>
<li><p><code>for</code><br>这是循环遍历数组元素最简单的方式</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; arr.<span class="built_in">length</span>; <span class="built_in">i</span>++) &#123;</div><div class="line">  console.log(arr[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>for-in</code><br><code>for-in</code> 语句以任意顺序遍历一个对象的可枚举属性，对于数组即是数组下标，对于对象即是对象的 key 值。注意 <code>for-in</code> 遍历返回的对象属性都是字符串类型，即使是数组下标，也是字符串 “0”, “1”, “2” 等等。<em>[不推荐使用 <code>for-in</code> 语句]</em></p>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (var <span class="keyword">index</span> <span class="keyword">in</span> myArray) &#123;</div><div class="line">  console.<span class="built_in">log</span>(myArray[<span class="keyword">index</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>forEach</code><br><code>forEach</code> 方法用于调用数组的每个元素，并将元素传递给回调函数；注意在回调函数中无法使用 <code>break</code> 跳出当前循环，也无法使用 <code>return</code> 返回值</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">myArray.forEach(<span class="function"><span class="keyword">function</span></span> (<span class="keyword">value</span>) &#123;</div><div class="line">  console.<span class="built_in">log</span>(<span class="keyword">value</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><code>for-of</code><br><code>for-of</code> 语句为各种 collection 集合对象专门定制的，遍历集合对象的属性值，注意和 <code>for-in</code> 的区别</p>
<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (var <span class="keyword">value</span> <span class="keyword">of</span> myArray) &#123;</div><div class="line">  console.log(<span class="keyword">value</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h3><p>在本例中 <code>forEach</code> 的回调函数是一个异步函数，异步函数中包含一个 <code>await</code> 等待 Promise 返回结果，我们期望数组元素串行执行这个异步操作，但是实际却是并行执行了。</p>
<p><code>forEach</code> 的 polyfill 参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="external">MDN-Array.prototype.forEach()</a>，简单点理解：</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Array.prototype.forEach = function (callback) &#123;</div><div class="line">  <span class="comment">// this represents our array</span></div><div class="line">  <span class="keyword">for</span> (let <span class="keyword">index</span> = <span class="number">0</span>; <span class="keyword">index</span> &lt; <span class="keyword">this</span>.length; <span class="keyword">index</span>++) &#123;</div><div class="line">    <span class="comment">// We call the callback for each entry</span></div><div class="line">    callback(<span class="keyword">this</span>[<span class="keyword">index</span>], <span class="keyword">index</span>, <span class="keyword">this</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相当于 <code>for</code> 循环执行了这个异步函数，所以是并行执行，导致了一次性全部输出结果：1，4，9<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> nums = <span class="keyword">await</span> getNumbers()</div><div class="line"><span class="comment">//   nums.forEach(async x =&gt; &#123;</span></div><div class="line"><span class="comment">//     var res = await multi(x)</span></div><div class="line"><span class="comment">//     console.log(res)</span></div><div class="line"><span class="comment">//   &#125;)</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; nums.length; index++) &#123;</div><div class="line">    (<span class="keyword">async</span> x =&gt; &#123;</div><div class="line">      <span class="keyword">var</span> res = <span class="keyword">await</span> multi(x)</div><div class="line">      <span class="built_in">console</span>.log(res)</div><div class="line">    &#125;)(nums[index])</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>我们可以改造一下 <code>forEach</code>，确保每一个异步的回调执行完成后，才执行下一个<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncForEach</span>(<span class="params">array, callback</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; array.length; index++) &#123;</div><div class="line">    <span class="keyword">await</span> callback(array[index], index, array)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> nums = <span class="keyword">await</span> getNumbers()</div><div class="line">  asyncForEach(nums, <span class="keyword">async</span> x =&gt; &#123;</div><div class="line">    <span class="keyword">var</span> res = <span class="keyword">await</span> multi(x)</div><div class="line">    <span class="built_in">console</span>.log(res)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>使用 <code>for-of</code> 替代 <code>for-each</code>。</p>
<p><code>for-of</code> 可以遍历各种集合对象的属性值，要求被遍历的对象需要实现迭代器 (iterator) 方法，例如 <code>myObject[Symbol.iterator]()</code> 用于告知 JS 引擎如何遍历该对象。一个拥有 <code>[Symbol.iterator]()</code> 方法的对象被认为是可遍历的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> zeroesForeverIterator = &#123;</div><div class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">next</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="number">0</span>&#125;;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如上就是一个最简单的迭代器对象；<code>for-of</code> 遍历对象时，先调用遍历对象的迭代器方法 <code>[Symbol.iterator]()</code>，该方法返回一个迭代器对象(迭代器对象中包含一个 <code>next</code> 方法)；然后调用该迭代器对象上的 <code>next</code> 方法。</p>
<p>每次调用 <code>next</code> 方法都返回一个对象，其中 <code>done</code> 和 <code>value</code> 属性用来表示遍历是否结束和当前遍历的属性值，当 <code>done</code> 的值为 <code>true</code> 时，遍历就停止了。</p>
<figure class="highlight cal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">VAR</span> <span class="keyword">of</span> ITERABLE) &#123;</div><div class="line">  STATEMENTS</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>等价于：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var</span> <span class="variable">$iterator</span> = ITERABLE[Symbol.iterator]();</div><div class="line"><span class="attribute">var</span> <span class="variable">$result</span> = <span class="variable">$iterator</span>.next();</div><div class="line"><span class="attribute">while</span> (!<span class="variable">$result</span>.done) &#123;</div><div class="line">  <span class="attribute">VAR</span> = <span class="variable">$result</span>.value;</div><div class="line">  <span class="attribute">STATEMENTS</span></div><div class="line">  <span class="variable">$result</span> = <span class="variable">$iterator</span>.next();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由此可以知道 <code>for-of</code> 和 <code>forEach</code> 遍历元素时处理的方式是不同的。使用 <code>for-of</code> 替代 <code>for-each</code> 后代码为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> nums = <span class="keyword">await</span> getNumbers()</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> nums) &#123;</div><div class="line">    <span class="keyword">var</span> res = <span class="keyword">await</span> multi(x)</div><div class="line">    <span class="built_in">console</span>.log(res)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://codeburst.io/understand-async-await-better-7a03aeba60fe" target="_blank" rel="external">Understand async/await better</a><br><a href="https://hacks.mozilla.org/2015/04/es6-in-depth-iterators-and-the-for-of-loop/" target="_blank" rel="external">ES6 In Depth: Iterators and the for-of loop</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在文章 &lt;a href=&quot;https://objcer.com/2017/10/11/Async-Await/&quot;&gt;ES7 中的 async await&lt;/a&gt; 中介绍了 async/await。本文将分析介绍当 async/await 遇上 &lt;code&gt;forEach&lt;/code&gt; 出现的一些问题和解决方案。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/1-pWGJIKats-zuumA3RQNEWQ.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://objcer.com/categories/JS/"/>
    
    
      <category term="async" scheme="http://objcer.com/tags/async/"/>
    
      <category term="await" scheme="http://objcer.com/tags/await/"/>
    
  </entry>
  
  <entry>
    <title>ES7 中的 async await</title>
    <link href="http://objcer.com/2017/10/11/Async-Await/"/>
    <id>http://objcer.com/2017/10/11/Async-Await/</id>
    <published>2017-10-11T06:36:46.000Z</published>
    <updated>2017-10-11T09:37:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中处理异步操作的回调 (callback) 通常会导致多嵌套的代码块，俗称回调地狱 (callback hell)，这样的代码复杂，可读性，可维护性非常不友好；直达 ES6，Promise 出现，使得我们能够扁平化回调函数，告别回调地狱，写出优雅的代码；但是在实践中发现，Promise 并不完美，如果 Promise 的回调中出现嵌套，依旧会出现回调地狱；而如今，async await 出现了，它提供了一种新的编写异步代码方式，使得异步代码看起来像是同步代码，这正式它的魔力所在。</p>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/1-ko3KtcVSlzpe3RnTRgJaHw.jpeg" alt=""></p>
<a id="more"></a>
<h2 id="异步函数"><a href="#异步函数" class="headerlink" title="异步函数"></a>异步函数</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// async <span class="function"><span class="keyword">function</span></span> statement：async <span class="function"><span class="keyword">function</span></span> 声明语句</div><div class="line">async <span class="function"><span class="keyword">function</span></span> <span class="keyword">name</span>([param[, param[, ... param]]]) &#123;</div><div class="line">   statements</div><div class="line">&#125;</div><div class="line"></div><div class="line">// async <span class="function"><span class="keyword">function</span></span> expression：async <span class="function"><span class="keyword">function</span></span> 表达式</div><div class="line">async <span class="function"><span class="keyword">function</span></span> [<span class="keyword">name</span>]([param1[, param2[, ..., paramN]]]) &#123;</div><div class="line">   statements</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上，可以通过 async function 声明语句或者表达式来定义一个异步函数，返回一个 <code>AsyncFunction</code> 对象，二者的区别在于在于函数名称，async function 表达式可以省略函数名称来创建一个匿名的函数。</p>
<p><strong>调用异步函数时会返回一个 promise 对象</strong></p>
<ul>
<li>当这个异步函数返回一个值时，promise 的 resolve 方法将会处理这个返回值</li>
<li>当异步函数抛出异常或者非法值时，promise 的 reject 方法将处理这个异常值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'ok'</span></div><div class="line">  <span class="comment">// throw new Error('error')</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">test().then(<span class="built_in">console</span>.log, <span class="built_in">console</span>.error)</div></pre></td></tr></table></figure>
<h2 id="AsyncFunction"><a href="#AsyncFunction" class="headerlink" title="AsyncFunction"></a><code>AsyncFunction</code></h2><blockquote>
<p>注意，<code>AsyncFunction</code> 并不是一个全局对象，我们可以这样获得 <code>AsyncFunction</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;).constructor</div></pre></td></tr></table></figure></p>
</blockquote>
<p><code>AsyncFunction</code> 构造函数用于创建一个新的 async function 对象，在 JavaScript 中，每一个异步函数都是一个 <code>AsyncFunction</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;.constructor)</div><div class="line"><span class="comment">// -&gt; ƒ AsyncFunction() &#123; [native code] &#125;</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;.__proto__)</div><div class="line"><span class="comment">// -&gt; AsyncFunction &#123;Symbol(Symbol.toStringTag): "AsyncFunction", constructor: ƒ&#125;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> AsyncFunction = <span class="built_in">Object</span>.getPrototypeOf(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;).constructor</div><div class="line"><span class="keyword">var</span> asyncFun = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="built_in">console</span>.log(asyncFun <span class="keyword">instanceof</span> AsyncFunction) <span class="comment">// -&gt; true</span></div></pre></td></tr></table></figure></p>
<p>通过 <code>AsyncFunction</code> 构造函数创建异步函数的语法如下：<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new AsyncFunction(<span class="comment">[arg1<span class="comment">[, arg2<span class="comment">[, ...argN]</span>]</span>,]</span> functionBody)</div></pre></td></tr></table></figure></p>
<p>把 <code>AsyncFunction</code> 当成函数调用（省略 <code>new</code> 操作符）也可创建异步函数，如下：</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var AsyncFunction = Object.getPrototypeOf(async function () &#123;&#125;).constructor<span class="comment">;</span></div><div class="line">// var <span class="function"><span class="keyword">func</span> = <span class="title">new</span> <span class="title">AsyncFunction</span><span class="params">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'return a+b'</span>)</span></span></div><div class="line">var <span class="function"><span class="keyword">func</span> = <span class="title">AsyncFunction</span><span class="params">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'return a+b'</span>)</span></span></div><div class="line"><span class="function"><span class="keyword">func</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span>.<span class="title">then</span><span class="params">(console.log)</span> // -&gt; 3</span></div></pre></td></tr></table></figure>
<p>👉 通过 <code>AsyncFunction</code> 构造函数创建的异步函数 在当前上下文不创建闭包；而是在全局作用域创建的。而且只需效率比用 async function 声明语句或者表达式来定义一个异步函数要低，所以一般情况使用 async function 声明语句或者表达式来定义一个异步函数。</p>
<h2 id="await"><a href="#await" class="headerlink" title="await"></a><code>await</code></h2><p><code>await</code> 操作符用于等待一个 Promise 返回结果或者某个直接的值，且 <code>await</code> 必须在异步函数 (async function) 上下文中使用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnPromise</span> (<span class="params">a</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    resolve(a)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnValue</span> (<span class="params">a</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">// var a = await returnPromise(2)</span></div><div class="line">  <span class="keyword">var</span> a = <span class="keyword">await</span> returnValue(<span class="number">3</span>)</div><div class="line">  <span class="keyword">return</span> a</div><div class="line">&#125;</div><div class="line"></div><div class="line">test().then(<span class="built_in">console</span>.log, <span class="built_in">console</span>.error)</div></pre></td></tr></table></figure></p>
<p>异步函数中执行 <code>await</code> 表达式，这将会使异步函数暂停执行并等待 promise 解析传值后，继续执行异步函数并返回解析值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span> (<span class="params">second</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(resolve, second * <span class="number">1000</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>())</div><div class="line">  <span class="keyword">await</span> sleep(<span class="number">3</span>)</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>())</div><div class="line">&#125;</div><div class="line"></div><div class="line">test()</div></pre></td></tr></table></figure></p>
<p>代码执行结果：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Wed Oct <span class="number">11</span> <span class="number">2017</span> <span class="number">16</span>:<span class="number">00</span>:<span class="number">32</span> GMT+<span class="number">0800</span> (CST)</div><div class="line">Promise &#123;<span class="string">[[PromiseStatus]]</span>: <span class="string">"pending"</span>, <span class="string">[[PromiseValue]]</span>: undefined&#125;</div><div class="line">Wed Oct <span class="number">11</span> <span class="number">2017</span> <span class="number">16</span>:<span class="number">00</span>:<span class="number">35</span> GMT+<span class="number">0800</span> (CST)</div></pre></td></tr></table></figure></p>
<p><code>await</code> 串行，并行执行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">multi</span> (<span class="params">a</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(resolve.bind(<span class="literal">null</span>, a * a), <span class="number">1000</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 串行执行</span></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> x = <span class="keyword">await</span> multi(<span class="number">2</span>)</div><div class="line">   <span class="keyword">var</span> y = <span class="keyword">await</span> multi(<span class="number">3</span>)</div><div class="line">   <span class="keyword">return</span> [x, y]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 并行执行</span></div><div class="line"><span class="comment">// async function test () &#123;</span></div><div class="line"><span class="comment">//    var res = await Promise.all([multi(2), multi(3)])</span></div><div class="line"><span class="comment">//    return res</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"></div><div class="line">test().then(<span class="built_in">console</span>.log)</div></pre></td></tr></table></figure></p>
<h2 id="async-await-的优势"><a href="#async-await-的优势" class="headerlink" title="async await 的优势"></a>async await 的优势</h2><p>Promise 有了 async await 的辅助，使其发挥更大的威力，通过 async await 终于可以彻底摆脱回调地狱，以同步方式编写异步代码，代码简洁，十分友好，下面举几个例子 👇</p>
<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p><code>try-catch</code> 处理同步，异步错误。如下代码片段一中，<code>try-catch</code> 并不能捕捉 <code>then</code> 方法中 <code>JSON.parse</code> 异常出错；但是在代码片段二中，使用了 async await，使得 <code>try-catch</code> 能捕捉 <code>JSON.parse</code> 可能的异常出错。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 代码块一</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    getJSON().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(res) <span class="comment">// 此处可能出错</span></div><div class="line">    &#125;)</div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 代码块二</span></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(<span class="keyword">await</span> getJSON())</div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="中间值"><a href="#中间值" class="headerlink" title="中间值"></a>中间值</h3><p>有时会遇到这样的情形：promise1 返回值 value1；promise2 依赖 value1，返回value2；promise3 依赖 value1 和 value2。最简单的做法是通过嵌套解决 promise 间的依赖：<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> test () &#123;</div><div class="line">  <span class="keyword">return</span> promise<span class="number">1</span>()</div><div class="line">      .<span class="keyword">then</span>(<span class="keyword">value</span><span class="number">1</span> =&gt; &#123;</div><div class="line">        <span class="keyword">return</span> promise<span class="number">2</span>(valu<span class="number">1</span>)</div><div class="line">          .<span class="keyword">then</span>(<span class="keyword">value</span><span class="number">2</span> =&gt; &#123;</div><div class="line">              <span class="keyword">return</span> promise<span class="number">3</span>(<span class="keyword">value</span><span class="number">1</span>, <span class="keyword">value</span><span class="number">2</span>)</div><div class="line">          &#125;)</div><div class="line">      &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>显然，这种简单粗暴的处理方式使我们又掉进回调地狱了；我们可以通过中间变量来抹平这个回调嵌套：<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> test () &#123;</div><div class="line">  var <span class="keyword">value</span><span class="number">1</span></div><div class="line">  var <span class="keyword">value</span><span class="number">2</span></div><div class="line">  <span class="keyword">return</span> promise<span class="number">1</span>()</div><div class="line">    .<span class="keyword">then</span>(vle =&gt; &#123;</div><div class="line">        <span class="keyword">value</span><span class="number">1</span> = vle</div><div class="line">        <span class="keyword">return</span> promise<span class="number">2</span>(<span class="keyword">value</span><span class="number">1</span>)</div><div class="line">    &#125;)</div><div class="line">    .<span class="keyword">then</span>(vle =&gt; &#123;</div><div class="line">        <span class="keyword">value</span><span class="number">2</span> = vle</div><div class="line">        <span class="keyword">return</span> promise<span class="number">3</span>(<span class="keyword">value</span><span class="number">1</span>, <span class="keyword">value</span><span class="number">2</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而通过 async await，可以最优，最简洁的解决这个问题：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> value1 = <span class="keyword">await</span> promise1()</div><div class="line">  <span class="keyword">var</span> value2 = <span class="keyword">await</span> promise2(value1)</div><div class="line">  <span class="keyword">return</span> promise3(value1, value2)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>❗️注意，在上面代码的返回语句 promise3 并没有 <code>await</code>，因为异步函数的会将其返回值隐式封装在 <code>Promise.resolve</code> 中。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction" target="_blank" rel="external">MDN-AsyncFunction</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="external">MDN-async function</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await" target="_blank" rel="external">MDN-await</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 JavaScript 中处理异步操作的回调 (callback) 通常会导致多嵌套的代码块，俗称回调地狱 (callback hell)，这样的代码复杂，可读性，可维护性非常不友好；直达 ES6，Promise 出现，使得我们能够扁平化回调函数，告别回调地狱，写出优雅的代码；但是在实践中发现，Promise 并不完美，如果 Promise 的回调中出现嵌套，依旧会出现回调地狱；而如今，async await 出现了，它提供了一种新的编写异步代码方式，使得异步代码看起来像是同步代码，这正式它的魔力所在。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/1-ko3KtcVSlzpe3RnTRgJaHw.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://objcer.com/categories/JS/"/>
    
    
      <category term="async" scheme="http://objcer.com/tags/async/"/>
    
      <category term="await" scheme="http://objcer.com/tags/await/"/>
    
  </entry>
  
  <entry>
    <title>iPhone X 环绕刘海滚动列表</title>
    <link href="http://objcer.com/2017/10/10/iPhone-X-notch-surround-list/"/>
    <id>http://objcer.com/2017/10/10/iPhone-X-notch-surround-list/</id>
    <published>2017-10-10T07:33:27.000Z</published>
    <updated>2017-10-10T09:14:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>iPhone X 面市后，其异形屏给交互设计提供了更多想象的空间。在 Twitter 上，这位推友就针对刘海设计了列表环绕刘海滚动的效果。<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/4E124A83-5DD5-44C1-AA71-9394E34E8C57.png" alt=""></p>
<p>最近在 codepen 上看到已经有人实现了这个 demo：<a href="https://codepen.io/davvidbaker/pen/KXgPyG" target="_blank" rel="external">https://codepen.io/davvidbaker/pen/KXgPyG</a>，本文将图文结合分析一下实现这个效果的逻辑。</p>
<a id="more"></a>
<h2 id="DOM-结构"><a href="#DOM-结构" class="headerlink" title="DOM 结构"></a>DOM 结构</h2><p><img src="http://7vikhl.com1.z0.glb.clouddn.com/D75661B5-C160-4906-826D-E7908AA9B237.png" alt=""><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"outer"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"notch"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">  &lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></p>
<p>DOM 结构比较简单，主要包括列表 <code>ul</code>，其滚动容器为 <code>class=&quot;inner&quot;</code> 的 DIV；刘海是 <code>class=&quot;notch&quot;</code> 的 DIV。</p>
<h2 id="滚动逻辑"><a href="#滚动逻辑" class="headerlink" title="滚动逻辑"></a>滚动逻辑</h2><p>为了实现列表环绕刘海滚动，需要在滚动事件中，计算处理每一行列表 X 轴方向的位置移动。<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/840F60D8-1D25-4B1C-BF50-C9F79DCC2AC9.png" alt=""></p>
<p>如上图列表向下滚动，上方的列表需要向右位移 <code>notch</code> 宽度；对应的，下方的列表需要向左位移 <code>notch</code> 宽度。我们需要对移动进行相应的计算处理，使位移线性变化，从而在滚动时，环绕效果自然。</p>
<h3 id="distFromTop-和-distFromBottom"><a href="#distFromTop-和-distFromBottom" class="headerlink" title="distFromTop 和 distFromBottom"></a><code>distFromTop</code> 和 <code>distFromBottom</code></h3><p>列表在上下滚动过程中分为两部分：</p>
<ul>
<li>向下滚动：上方列表向右移动进入刘海区域，下方列表向左移动离开刘海区域</li>
<li>向上滚动：上方列表向左移动离开刘海区域，下方列表向右移动进入刘海区域</li>
</ul>
<p>这两部分刚好是相对应的，此处我们只分析<strong>上方列表移动进入/离开刘海区域</strong>，即可以了解滚动过程中的逻辑处理。首先介绍两个变量：<code>distFromTop</code> 和 <code>distFromBottom</code></p>
<blockquote>
<p><code>Element.getBoundingClientRect()</code> 方法返回元素的大小及其相对于视口的位置，返回值是一个 <code>DOMRect</code> 对象。<code>DOMRect</code> 对象包含了一组用于描述边框的只读属性 —— left、top、right 和 bottom，单位为像素。除了 width 和 height 外的属性都是相对于视口的左上角位置而言的，如下图：<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/F772D60E-E17B-434F-A970-053BB77E53BB.png" alt=""></p>
</blockquote>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> notchRect = notch.getBoundingClientRect()</div><div class="line"><span class="keyword">let</span> itemRect = item.getBoundingClientRect()</div><div class="line"><span class="keyword">let</span> distFromTop = itemRect.<span class="built_in">bottom</span> - notchRect.<span class="built_in">top</span></div><div class="line"><span class="keyword">let</span> distFromBottom = itemRect.<span class="built_in">top</span> - notchRect.<span class="built_in">bottom</span></div></pre></td></tr></table></figure>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/CB366BB3-C658-4514-96F7-103F5B712AD6.png" alt=""></p>
<p>这两个变量表征当前这一行列表距离上下刘海边界的位置，在滚动过程中根据 <code>distFromTop</code> 和 <code>distFromBottom</code> 变量触发不同的位移逻辑。</p>
<h3 id="位移逻辑"><a href="#位移逻辑" class="headerlink" title="位移逻辑"></a>位移逻辑</h3><p>分析<strong>上方列表移动进入/离开刘海区域</strong>时，列表位移的逻辑。<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/7B8867D1-1A5E-4DE6-A6CB-5B64209808F2.png" alt=""><br><img src="http://7vikhl.com1.z0.glb.clouddn.com/E875669C-BEBE-4B6E-A883-EACF4CF29D63.png" alt=""></p>
<p>1️⃣ <strong>阈值：<code>Threshold</code></strong><br>在刘海边界上下 <code>Threshold</code> 区域定义为位移区域，列表进入这一区域即需要进行计算位移量，检测是否进入这一区域的逻辑判断为：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Math.<span class="keyword">abs</span>(distFromTop) &lt;= Threshold</div></pre></td></tr></table></figure></p>
<p>2️⃣ <strong>计算位移量</strong><br>考虑两个边界情况：</p>
<ul>
<li>当 <code>distFromTop</code> 等于 <code>- Threshold</code>，即列表开始进入刘海区域<br>此时位移量为 0</li>
<li>当 <code>distFromTop</code> 等于 <code>+ Threshold</code>，即列表完全进入刘海区域<br>此时位移量为刘海宽度 <code>NotchWidth</code></li>
</ul>
<p>这个变换过程可以通过线性插值来完成，根据 <code>distFromTop</code> 变量计算在 Y 轴方向的比例关系，从而得到 X 轴方向的位移量。</p>
<blockquote>
<p>关于线性插值参考：<a href="https://zh.wikipedia.org/zh-cn/%E7%BA%BF%E6%80%A7%E6%8F%92%E5%80%BC" target="_blank" rel="external">维基百科：线性插值</a></p>
</blockquote>
<p>在此处，我们可以简化理解，如下图<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/94A6750A-B927-4B11-8446-8F92DCFA7747.png" alt=""></p>
<p>计算公式如下：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let lerp = (<span class="name">v0</span>, v1, <span class="literal">t</span>) =&gt; v0 + (<span class="name">v1</span> - v0) * <span class="literal">t</span></div></pre></td></tr></table></figure></p>
<p>在我们分析的这个情形：上方列表向右移动进入刘海区域，对应的调用为：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x = lerp(<span class="number">0</span>, NotchWidth, (<span class="name">distFromTop</span> + Threshold) / (<span class="name">Threshold</span> * 2))</div></pre></td></tr></table></figure></p>
<p>其他情况，位移量计算分别为：</p>
<ul>
<li>在刘海区域内滚动<br>判断条件：<code>distFromTop &gt; 0 &amp;&amp; distFromBottom &lt; - Threshold</code><br>位移量始终为：刘海宽度 <code>NotchWidth</code></li>
<li>下方列表移动进入/离开刘海区域<br>判断条件：<code>Math.abs(distFromBottom) &lt;= Threshold</code><br>位移量始终为：<code>x = lerp(NotchWidth, 0, (distFromBottom + Threshold) / (Threshold * 2))</code></li>
<li>其他<br>位移量始终为：0</li>
</ul>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>最终实现效果：<a href="https://codepen.io/yingshandeng/pen/JrJRBR?editors=1010" target="_blank" rel="external">https://codepen.io/yingshandeng/pen/JrJRBR?editors=1010</a></p>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/iPhone%20X%20list.gif" alt=""></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-tag">html</span>,</div><div class="line">  <span class="selector-tag">body</span> &#123;</div><div class="line">      <span class="attribute">display</span>: flex;</div><div class="line">      <span class="attribute">justify-content</span>: center;</div><div class="line">      <span class="attribute">align-items</span>: center;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">      <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">background</span>: <span class="number">#E3F3FD</span>;</div><div class="line">      <span class="attribute">font-family</span>: <span class="string">"Helvetica Neue"</span>, Helvetica, Arial, sans-serif;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.outer</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">width</span>: <span class="number">640px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">310px</span>;</div><div class="line">    <span class="attribute">min-width</span>: <span class="number">640px</span>;</div><div class="line">    <span class="attribute">min-height</span>: <span class="number">310px</span>;</div><div class="line">    <span class="attribute">background-color</span>: white;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">45px</span>;</div><div class="line">    <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">0</span> <span class="built_in">rgba</span>(0, 0, 0, 0.10),</div><div class="line">      inset <span class="number">0</span> -<span class="number">5px</span> <span class="number">20px</span> <span class="number">0</span> <span class="built_in">rgba</span>(0, 0, 0, 0.08);</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">0</span> <span class="built_in">rgba</span>(0, 0, 0, 0.10),</div><div class="line">      inset <span class="number">0</span> -<span class="number">5px</span> <span class="number">20px</span> <span class="number">0</span> <span class="built_in">rgba</span>(0, 0, 0, 0.08);</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.inner</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">width</span>: <span class="number">610px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">280px</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">15px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">30px</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#EBEBEB</span>;</div><div class="line">    <span class="attribute">overflow-x</span>: hidden;</div><div class="line">    <span class="attribute">overflow-y</span>: scroll;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.notch</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">15px</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">79px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">22px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">152px</span>;</div><div class="line">    <span class="attribute">border-top-right-radius</span>: <span class="number">17px</span>;</div><div class="line">    <span class="attribute">border-bottom-right-radius</span>: <span class="number">17px</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">ul</span> &#123;</div><div class="line">    <span class="attribute">list-style</span>: none;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">li</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">5px</span>;</div><div class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#dadada</span>;</div><div class="line">    <span class="attribute">transform-origin</span>: center left;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  *<span class="selector-pseudo">::-webkit-scrollbar</span> &#123;</div><div class="line">    <span class="attribute">visibility</span>: hidden;</div><div class="line">  &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>河北<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>山西<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>内蒙古<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>辽宁<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>吉林<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>黑龙江<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>江苏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>浙江省<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>安徽<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>福建<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>江西<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>山东<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>河南<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>湖北<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>湖南<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>广东<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>广西<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>海南<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>重庆<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>四川<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>贵州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>云南<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>西藏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>陕西<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>甘肃省<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>青海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>宁夏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>新疆<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>台湾<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>香港特别行政区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>澳门<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"notch"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">let</span> inner = <span class="built_in">document</span>.querySelector(<span class="string">'.inner'</span>)</div><div class="line">  <span class="keyword">let</span> items = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>)</div><div class="line">  <span class="keyword">let</span> notch = <span class="built_in">document</span>.querySelector(<span class="string">'.notch'</span>)</div><div class="line">  <span class="keyword">let</span> notchRect = notch.getBoundingClientRect()</div><div class="line"></div><div class="line">  inner.addEventListener(<span class="string">'scroll'</span>, () =&gt; &#123;</div><div class="line">    <span class="built_in">window</span>.requestAnimationFrame(scrollDection)</div><div class="line">  &#125;)</div><div class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, () =&gt; &#123;</div><div class="line">    notchRect = notch.getBoundingClientRect()</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="keyword">const</span> Threshold = <span class="number">10</span></div><div class="line">  <span class="keyword">const</span> NotchWidth = <span class="number">30</span></div><div class="line">  <span class="keyword">let</span> scrollDection = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> item</div><div class="line">    <span class="keyword">for</span> (item <span class="keyword">of</span> items) &#123;</div><div class="line">      <span class="keyword">let</span> itemRect = item.getBoundingClientRect()</div><div class="line">      <span class="keyword">let</span> distFromTop = itemRect.bottom - notchRect.top</div><div class="line">      <span class="keyword">let</span> distFromBottom = itemRect.top - notchRect.bottom</div><div class="line">      <span class="keyword">let</span> x</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(distFromTop) &lt;= Threshold) &#123;</div><div class="line">        x = lerp(<span class="number">0</span>, NotchWidth, (distFromTop + Threshold) / (Threshold * <span class="number">2</span>))</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (distFromTop &gt; <span class="number">0</span> &amp;&amp; distFromBottom &lt; - Threshold) &#123;</div><div class="line">        x = NotchWidth</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(distFromBottom) &lt;= Threshold) &#123;</div><div class="line">        x = lerp(NotchWidth, <span class="number">0</span>, (distFromBottom + Threshold) / (Threshold * <span class="number">2</span>))</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        x = <span class="number">0</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      item.style.transform = <span class="string">`translateX(<span class="subst">$&#123;x&#125;</span>px)`</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">let</span> lerp = <span class="function">(<span class="params">v0, v1, t</span>) =&gt;</span> v0 + (v1 - v0) * t</div><div class="line"></div><div class="line">  scrollDection()</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iPhone X 面市后，其异形屏给交互设计提供了更多想象的空间。在 Twitter 上，这位推友就针对刘海设计了列表环绕刘海滚动的效果。&lt;br&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/4E124A83-5DD5-44C1-AA71-9394E34E8C57.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近在 codepen 上看到已经有人实现了这个 demo：&lt;a href=&quot;https://codepen.io/davvidbaker/pen/KXgPyG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://codepen.io/davvidbaker/pen/KXgPyG&lt;/a&gt;，本文将图文结合分析一下实现这个效果的逻辑。&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://objcer.com/categories/JS/"/>
    
    
      <category term="DEMO" scheme="http://objcer.com/tags/DEMO/"/>
    
  </entry>
  
  <entry>
    <title>实现一个字数限制的输入框</title>
    <link href="http://objcer.com/2017/10/10/implement-a-word-limit-input-box/"/>
    <id>http://objcer.com/2017/10/10/implement-a-word-limit-input-box/</id>
    <published>2017-10-10T07:24:25.000Z</published>
    <updated>2017-10-10T07:29:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/twitter-input-box.png" alt=""><br>在 Twitter 发推输入框中，有一个字数限制的逻辑，超出字数限制部分的文字会设置背景颜色提示，以便用户进行调整。这是一个很好的交互设计，在 <a href="https://ant.design/docs/spec/feature-cn" target="_blank" rel="external">Ant Design</a> 中也有提到这一点。<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/ant-design-input.png" alt=""></p>
<p>本文将介绍如何实现这一字数限制输入框，效果访问：<a href="https://codepen.io/yingshandeng/pen/boRNLx" target="_blank" rel="external">Codepen</a><br><a id="more"></a></p>
<h2 id="超出限制文字设置背景提示"><a href="#超出限制文字设置背景提示" class="headerlink" title="超出限制文字设置背景提示"></a>超出限制文字设置背景提示</h2><p>实现这个输入框关键在于如何实现对超出字数限制部分的文字设置背景颜色，对于输入框一般有两种选择：</p>
<ul>
<li><code>textarea</code> 多行文本输入</li>
<li><code>div</code> 设置 <code>contenteditable=&quot;true&quot;</code></li>
</ul>
<p><code>contenteditable=&quot;true&quot;</code> 的 DIV 节点可以操作其中的 DOM 节点，那么我们可以监听输入区域，用户输入时，获取其中的 <code>innerText</code>，然后进行字数限制判断，设置其 <code>innerHTML</code>，划分两部分，超出部分设置背景颜色，代码大致如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">contenteditable</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">  文字，文字...</div><div class="line">  <span class="tag">&lt;<span class="name">em</span>&gt;</span>超出的文字...<span class="tag">&lt;/<span class="name">em</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> editorArea = <span class="built_in">document</span>.querySelector(<span class="string">'.editor-area'</span>)</div><div class="line"></div><div class="line">  editorArea.addEventListener(<span class="string">'input'</span>, (evt) =&gt; &#123;</div><div class="line">    <span class="keyword">var</span> normalText;</div><div class="line">    <span class="keyword">var</span> exceedText;</div><div class="line"></div><div class="line">    editorArea.innerHTML = normalText + <span class="string">'&lt;em&gt;'</span> + exceedText + <span class="string">'&lt;/em&gt;'</span></div><div class="line">  &#125;)</div><div class="line">&lt;<span class="regexp">/script</span></div></pre></td></tr></table></figure></p>
<p>在每次输入后，都重新设置 <code>innerHTML</code>，会导致每次输入后，光标位置都跑到输入框起始位置了，看来这种方式不可行 😤</p>
<p>👉 解决方案：用两层 DIV 重叠</p>
<ul>
<li>上层 DIV 节点用于文字输入，背景颜色透明</li>
<li>下层 DIV 节点用于高亮超出部分文字，文字颜色设置为透明，超出部分节点设置背景颜色</li>
</ul>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/rich-input.png" alt=""></p>
<h2 id="输入框-placeholder"><a href="#输入框-placeholder" class="headerlink" title="输入框 placeholder"></a>输入框 placeholder</h2><p><code>contenteditable=&quot;true&quot;</code> 的 DIV 设置 placeholder 可以通过 CSS 来解决：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.editor-area</span><span class="selector-attr">[contenteditable=true]</span><span class="selector-pseudo">:empty</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(placeholder);</div><div class="line">  <span class="attribute">color</span>: <span class="number">#ccd6dd</span>;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过选择器 <code>:empty</code> 判断输入框中内容是否为空，其实存在一些问题。点击回车的时候，会插入 <code>&lt;div&gt;&lt;br&gt;&lt;/div&gt;</code> 或者 <code>&lt;br&gt;</code>，这部分会影响 <code>:empty</code> 的判断，譬如 DIV 中没有文字，但是存在一个换行时，这样 <code>:empty</code> 的判断就不会生效，placeholder 也就没有显示，所以我们可以通过另一种方式进行判断，通过 JS 手动添加、移除 class 类处理 placeholder 的显示和隐藏：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// CSS</span></div><div class="line"><span class="selector-class">.editor-area</span><span class="selector-class">.is-showPlaceholder</span><span class="selector-attr">[contenteditable=true]</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">  <span class="attribute">content</span>: attr(placeholder);</div><div class="line">  <span class="attribute">color</span>: <span class="number">#ccd6dd</span>;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// JS</span></div><div class="line"><span class="selector-tag">editorArea</span><span class="selector-class">.addEventListener</span>(<span class="string">'input'</span>, (evt) =&gt; &#123;</div><div class="line">  <span class="selector-tag">if</span> (editorArea.innerHTML === <span class="string">'&lt;div&gt;&lt;br&gt;&lt;/div&gt;'</span> ||</div><div class="line">    editorArea.innerHTML === <span class="string">'&lt;br&gt;'</span> ||</div><div class="line">    editorArea.innerHTML === <span class="string">''</span>) &#123;</div><div class="line">    <span class="selector-tag">editorArea</span><span class="selector-class">.classList</span><span class="selector-class">.add</span>(<span class="string">'is-showPlaceholder'</span>)</div><div class="line">  &#125; <span class="selector-tag">else</span> &#123;</div><div class="line">    <span class="selector-tag">editorArea</span><span class="selector-class">.classList</span><span class="selector-class">.remove</span>(<span class="string">'is-showPlaceholder'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>还有一种解决方式，第一层输入 DIV 节点使用 <code>textarea</code> 替换，<code>textarea</code> 中有 <code>placeholder</code> 属性</p>
<h2 id="中文输入字数统计"><a href="#中文输入字数统计" class="headerlink" title="中文输入字数统计"></a>中文输入字数统计</h2><p>在中文输入是，中文还未输入到输入框，字数就在统计了；合理的是，中文输入 composing 组合过程中不应进行字数统计，在中文输入到输入框后，才进行字数统计。<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/CCCDB51D-C8BD-4014-884B-C69A097F35C5.png" alt=""></p>
<p>解决这个问题需要用到 <code>compositionstart</code> 和 <code>compositionend</code> 这两个事件；前者表示输入组合开始，后者表示输入组合结束，在 <code>compositionend</code> 事件中就是我们字数统计的合理时机。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isComposing = <span class="literal">false</span></div><div class="line"></div><div class="line">editorArea.addEventListener(<span class="string">'compositionstart'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  isComposing = <span class="literal">true</span></div><div class="line">&#125;)</div><div class="line">editorArea.addEventListener(<span class="string">'compositionend'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  isComposing = <span class="literal">false</span></div><div class="line">  <span class="comment">// 字数统计</span></div><div class="line">  <span class="keyword">let</span> text = editorArea.innerText</div><div class="line">  setCounter(limitCnt - text.length)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>🎏 如需考虑 emoji 字符长度计算的话，参考：<a href="https://objcer.com/2017/07/20/explore-emoji-length/">探究 emoji 字符长度</a></p>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>效果访问：<a href="https://codepen.io/yingshandeng/pen/boRNLx" target="_blank" rel="external">Codepen</a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">html</span>,</div><div class="line">    <span class="selector-tag">body</span> &#123;</div><div class="line">      <span class="attribute">display</span>: flex;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">      <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">background</span>: <span class="number">#E3F3FD</span>;</div><div class="line">      <span class="attribute">font-family</span>: <span class="string">"Helvetica Neue"</span>,Helvetica,Arial,sans-serif;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.rich-editor</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">508px</span>;</div><div class="line">      <span class="attribute">height</span>: auto;</div><div class="line">     <span class="comment">/* max-height: 134px;</span></div><div class="line">      overflow-y: scroll;*/</div><div class="line">      <span class="attribute">margin</span>: auto;</div><div class="line">      <span class="attribute">padding</span>: <span class="number">8px</span>;</div><div class="line">      <span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">      <span class="attribute">border-radius</span>: <span class="number">8px</span>;</div><div class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#A4D9F9</span>;</div><div class="line">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="number">#A4D9F9</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.wrapper</span> &#123;</div><div class="line">      <span class="attribute">position</span>: relative;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">      <span class="attribute">min-height</span>: <span class="number">116px</span>;</div><div class="line">      <span class="attribute">z-index</span>: <span class="number">1</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.editor-area</span>, <span class="selector-class">.editor-backer</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">      <span class="attribute">height</span>: auto;</div><div class="line">      <span class="attribute">min-height</span>: <span class="number">116px</span>;</div><div class="line"></div><div class="line">      <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">      <span class="attribute">line-height</span>: <span class="number">20px</span>;</div><div class="line">      <span class="attribute">word-wrap</span>: break-word;</div><div class="line">      <span class="attribute">background</span>: transparent;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.editor-area</span> &#123;</div><div class="line">      <span class="attribute">outline</span>: none;</div><div class="line">      <span class="attribute">border</span>: none;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.editor-area</span><span class="selector-class">.is-showPlaceholder</span><span class="selector-attr">[contenteditable=true]</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">      <span class="attribute">content</span>: <span class="built_in">attr</span>(placeholder);</div><div class="line">      <span class="attribute">color</span>: <span class="number">#ccd6dd</span>;</div><div class="line">      <span class="attribute">position</span>: absolute;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.editor-backer</span> &#123;</div><div class="line">      <span class="attribute">position</span>: absolute;</div><div class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">color</span>: transparent;</div><div class="line">      <span class="attribute">z-index</span>: -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.editor-backer</span> <span class="selector-tag">em</span> &#123;</div><div class="line">      <span class="attribute">background-color</span>: <span class="number">#ffb8c2</span>;</div><div class="line">      <span class="attribute">font-style</span>: normal;</div><div class="line">      <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">      <span class="attribute">line-height</span>: <span class="number">20px</span>;</div><div class="line">      <span class="attribute">white-space</span>: pre-wrap;</div><div class="line">      <span class="attribute">word-wrap</span>: break-word;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.counter</span> &#123;</div><div class="line">      <span class="attribute">float</span>: right;</div><div class="line">      <span class="attribute">color</span>: <span class="number">#657786</span>;</div><div class="line">      <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">      <span class="attribute">line-height</span>: <span class="number">20px</span>;</div><div class="line">      <span class="attribute">text-align</span>: right;</div><div class="line">      <span class="attribute">user-select</span>: none;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.counter</span><span class="selector-class">.max-reached</span> &#123;</div><div class="line">      <span class="attribute">color</span>: <span class="number">#e0245e</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rich-editor"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"editor-area"</span> <span class="attr">contenteditable</span>=<span class="string">"true"</span> <span class="attr">placeholder</span>=<span class="string">"Enter text here..."</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"editor-backer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"counter"</span>&gt;</span>140<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">      <span class="keyword">var</span> editorArea = <span class="built_in">document</span>.querySelector(<span class="string">'.editor-area'</span>)</div><div class="line">      <span class="keyword">var</span> editorBacker = <span class="built_in">document</span>.querySelector(<span class="string">'.editor-backer'</span>)</div><div class="line">      <span class="keyword">var</span> counter = <span class="built_in">document</span>.querySelector(<span class="string">'.counter'</span>)</div><div class="line">      <span class="keyword">var</span> limitCnt = <span class="number">140</span></div><div class="line">      <span class="keyword">var</span> isComposing = <span class="literal">false</span></div><div class="line"></div><div class="line">      editorArea.addEventListener(<span class="string">'compositionstart'</span>, () =&gt; &#123;</div><div class="line">        isComposing = <span class="literal">true</span></div><div class="line">      &#125;)</div><div class="line">      editorArea.addEventListener(<span class="string">'compositionend'</span>, () =&gt; &#123;</div><div class="line">        isComposing = <span class="literal">false</span></div><div class="line">        <span class="comment">//</span></div><div class="line">        <span class="keyword">let</span> text = editorArea.innerText</div><div class="line">        setCounter(limitCnt - text.length)</div><div class="line">      &#125;)</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">setCounter</span> (<span class="params">cnt</span>) </span>&#123;</div><div class="line">        counter.innerHTML = cnt</div><div class="line">        <span class="keyword">if</span> (cnt &lt; <span class="number">0</span>) &#123;</div><div class="line">          counter.classList.add(<span class="string">'max-reached'</span>)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          counter.classList.remove(<span class="string">'max-reached'</span>)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">var</span> inputCompose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (editorArea.innerHTML === <span class="string">'&lt;div&gt;&lt;br&gt;&lt;/div&gt;'</span> ||</div><div class="line">          editorArea.innerHTML === <span class="string">'&lt;br&gt;'</span> ||</div><div class="line">          editorArea.innerHTML === <span class="string">''</span>) &#123;</div><div class="line">          editorArea.classList.add(<span class="string">'is-showPlaceholder'</span>)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          editorArea.classList.remove(<span class="string">'is-showPlaceholder'</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> text = editorArea.innerText</div><div class="line">        <span class="keyword">let</span> remainingCnt = limitCnt - text.trim().length</div><div class="line">        <span class="keyword">if</span> (remainingCnt &lt; <span class="number">0</span>) &#123;</div><div class="line">          <span class="keyword">let</span> allowedText = text.substring(<span class="number">0</span>, limitCnt)</div><div class="line">          <span class="keyword">let</span> refusedText = text.substring(limitCnt)</div><div class="line"></div><div class="line">          editorBacker.innerHTML = allowedText + <span class="string">'&lt;em&gt;'</span> + refusedText + <span class="string">'&lt;/em&gt;'</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          editorBacker.innerHTML = <span class="string">''</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!isComposing) &#123;</div><div class="line">          setCounter(remainingCnt)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      inputCompose();</div><div class="line">      editorArea.oninput = inputCompose</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/twitter-input-box.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;在 Twitter 发推输入框中，有一个字数限制的逻辑，超出字数限制部分的文字会设置背景颜色提示，以便用户进行调整。这是一个很好的交互设计，在 &lt;a href=&quot;https://ant.design/docs/spec/feature-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ant Design&lt;/a&gt; 中也有提到这一点。&lt;br&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/ant-design-input.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文将介绍如何实现这一字数限制输入框，效果访问：&lt;a href=&quot;https://codepen.io/yingshandeng/pen/boRNLx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Codepen&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="JS" scheme="http://objcer.com/categories/JS/"/>
    
    
      <category term="DEMO" scheme="http://objcer.com/tags/DEMO/"/>
    
  </entry>
  
  <entry>
    <title>动态文本自适应绘制到指定大小的 Canvas</title>
    <link href="http://objcer.com/2017/10/10/auto-size-dynamic-text-to-fill-fixed-size-canvas/"/>
    <id>http://objcer.com/2017/10/10/auto-size-dynamic-text-to-fill-fixed-size-canvas/</id>
    <published>2017-10-10T07:15:11.000Z</published>
    <updated>2017-10-10T07:29:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/1-UGtq-cSfbuekV8aHalVIAw.png" alt=""><br>本文将探究动态文本如何自适应绘制到指定大小的 Canvas 🎏</p>
<a id="more"></a>
<h2 id="CanvasRenderingContext2D-fillText"><a href="#CanvasRenderingContext2D-fillText" class="headerlink" title="CanvasRenderingContext2D.fillText()"></a><code>CanvasRenderingContext2D.fillText()</code></h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> ctx.fillText(<span class="built_in">text</span>, x, y [, maxWidth]);</div></pre></td></tr></table></figure>
<p>在 (x, y) 位置填充文本。如果第四个参数提供了最大宽度，文本会进行缩放以适应最大宽度。如果绘制的文本实际宽度超过 <code>maxWidth</code>，那么会在水平方向上进行缩放，文字可能被压缩变形。<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/fillText.png" alt=""></p>
<h2 id="限制宽度"><a href="#限制宽度" class="headerlink" title="限制宽度"></a>限制宽度</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.measureText(text)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>传入要绘制的文本内容，返回绘制到当前 Canvas 时文本的宽度。我们可以设置一个较大的字体，然后递减字体大小，直到绘制的文本宽度满足 Canvas 宽度限制，由此得到文本绘制到 Canvas 中合适的字体大小<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function dynamicFitTextOnCanvas (text, fontface, desiredWidth) &#123;</div><div class="line">  <span class="selector-tag">var</span> <span class="selector-tag">canvas</span> = document.createElement(<span class="string">'canvas'</span>)</div><div class="line">  <span class="selector-tag">var</span> context = <span class="selector-tag">canvas</span>.getContext(<span class="string">'2d'</span>)</div><div class="line">  <span class="comment">// start with a large font size</span></div><div class="line">  <span class="selector-tag">var</span> fontsize = <span class="number">500</span></div><div class="line">  do &#123;</div><div class="line">    context<span class="selector-class">.font</span> = `$&#123;fontsize&#125;px $&#123;fontface&#125;`</div><div class="line">    fontsize --</div><div class="line">  &#125; while (context.measureText(text)<span class="selector-class">.width</span> &gt; desiredWidth)</div><div class="line">  return fontsize</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>显然字体大小 fontsize 逐次递减一，效率不够好，我们可以通过二分递减来优化这个过程<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function dynamicFitTextOnCanvas (text, fontface, desiredWidth) &#123;</div><div class="line">  <span class="built_in">var</span> canvas = document.createElement('canvas')</div><div class="line">  <span class="built_in">var</span> <span class="built_in">context</span> = canvas.getContext('2d')</div><div class="line">  // start with a large <span class="built_in">font</span> size</div><div class="line">  <span class="built_in">var</span> fontsize = <span class="number">500</span></div><div class="line">  <span class="built_in">return</span> measureTextBinary(<span class="built_in">context</span>, text, <span class="number">0</span>, fontsize, fontface, desiredWidth)</div><div class="line">&#125;</div><div class="line">function measureTextBinary (<span class="built_in">context</span>, text, <span class="built_in">min</span>, <span class="built_in">max</span>, fontface, desiredWidth) &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">max</span> - <span class="built_in">min</span> &lt; <span class="number">1</span>) &#123;</div><div class="line">    <span class="built_in">return</span> Math.<span class="built_in">floor</span>(<span class="built_in">min</span>)</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">var</span> cur = <span class="built_in">min</span> + (<span class="built_in">max</span> - <span class="built_in">min</span>) / <span class="number">2</span></div><div class="line">  <span class="built_in">context</span>.<span class="built_in">font</span> = `$&#123;cur&#125;px $&#123;fontface&#125;`</div><div class="line">  <span class="built_in">var</span> measureWidth = <span class="built_in">context</span>.measureText(text).<span class="built_in">width</span></div><div class="line">  <span class="keyword">if</span> (measureWidth &gt; desiredWidth) &#123;</div><div class="line">      <span class="built_in">return</span> measureTextBinary(<span class="built_in">context</span>, text, <span class="built_in">min</span>, cur, fontface, desiredWidth)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">return</span> measureTextBinary(<span class="built_in">context</span>, text, cur, <span class="built_in">max</span>, fontface, desiredWidth)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="限制宽度和高度"><a href="#限制宽度和高度" class="headerlink" title="限制宽度和高度"></a>限制宽度和高度</h2><p>注意到 <code>measureText</code> 方法只能测量绘制文本的宽度，无法得到高度信息；我们可以往 document 中添加一个辅助的 <code>div</code> 节点，设置其 <code>innerText</code> 为要绘制的文本，再设置其字体大小，通过 <code>getBoundingClientRect</code> 方法或者 <code>offsetWidth/offsetHeight</code> 属性就可以得到绘制指定字体大小的文本宽高；同理，通过递减字体大小，使得绘制的文本宽高满足 Canvas 的宽高限制；由于有了前面的经验，我们也用二分递减提高执行效率</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dynamicFitTextOnCanvas</span> (<span class="params">text, fontface, desiredWidth, desiredHeight</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> tmpDiv = <span class="built_in">document</span>.querySelector(<span class="string">'.tmp-div'</span>)</div><div class="line">  <span class="keyword">if</span> (!tmpDiv) &#123;</div><div class="line">    tmpDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</div><div class="line">    tmpDiv.classList.add(<span class="string">'tmp-div'</span>)</div><div class="line">    tmpDiv.style[<span class="string">'position'</span>] = <span class="string">'absolute'</span></div><div class="line">    tmpDiv.style[<span class="string">'left'</span>] = <span class="string">'-100000px'</span></div><div class="line">    tmpDiv.style[<span class="string">'top'</span>] = <span class="string">'-100000px'</span></div><div class="line">    tmpDiv.style[<span class="string">'visibility'</span>] = <span class="string">'hidden'</span></div><div class="line">    <span class="built_in">document</span>.body.appendChild(tmpDiv)</div><div class="line">    tmpDiv.innerText = text</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// start with a large font size</span></div><div class="line">  <span class="keyword">var</span> fontsize = <span class="number">500</span></div><div class="line">  <span class="keyword">return</span> measureDivBinary(tmpDiv, <span class="number">0</span>, fontsize, fontface, desiredWidth, desiredHeight)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">measureDivBinary</span> (<span class="params">tmpDiv, min, max, fontface, desiredWidth, desiredHeight</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (max - min &lt; <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(min)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> cur = min + (max - min) / <span class="number">2</span></div><div class="line">  tmpDiv.style[<span class="string">'font'</span>] = <span class="string">`<span class="subst">$&#123;cur&#125;</span>px <span class="subst">$&#123;fontface&#125;</span>`</span></div><div class="line">  tmpDiv.style[<span class="string">'line-height'</span>] = <span class="string">`<span class="subst">$&#123;cur&#125;</span>px`</span></div><div class="line">  <span class="keyword">var</span> measureRect = tmpDiv.getBoundingClientRect()</div><div class="line">  <span class="keyword">if</span> (measureRect.width &gt; desiredWidth || measureRect.height &gt; desiredHeight) &#123;</div><div class="line">    <span class="keyword">return</span> measureDivBinary(tmpDiv, min, cur, fontface, desiredWidth, desiredHeight)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> measureDivBinary(tmpDiv, cur, max, fontface, desiredWidth, desiredHeight)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="关于-line-height"><a href="#关于-line-height" class="headerlink" title="关于 line-height"></a>关于 <code>line-height</code></h3><p><img src="http://7vikhl.com1.z0.glb.clouddn.com/2587037021-55bacfa692fb8.png" alt=""><br>通过上图来理解行高，行距</p>
<ul>
<li><strong>行高</strong> (line-height) 是指文本行基线间的垂直距离，上图中两条红线之间的距离就是行高</li>
<li>上一行的底线和下一行的顶线之间的距离就是<strong>行距</strong>，而同一行顶线和底线之间的距离是 font-size 的大小</li>
<li>行距的一半是半行距: 半行距 = (line-height - font-size) / 2，当 line-height &lt; font-size，半行距为负值，这时候两行之间就会重叠</li>
</ul>
<p>我们发现，font-size 大小即为文字绘制后的实际高度，所以在上面代码中，我们对辅助 <code>div</code> 节点也设置了 <code>line-height = font-size</code>，使得到的文字高度更加精确（去掉了两个半行距）</p>
<h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><p>1️⃣ 最小字体大小限制<br>在 Chrome 浏览器中，设定 CSS <code>font-size</code> 小于 12px ，依然会以 12px 进行展示，也就是说 Chrome 浏览器允许设置的最小 <code>font-size</code> 为 12px（Safari 不存在这个问题）。所以如果限制绘制的 Canvas 的宽高小于辅助 <code>div</code> 节点设置 <code>font-size</code> 为 12px 的宽高，那么无法通过计算得到合适绘制的 <code>font-size</code></p>
<p><strong>为了解决这个问题：</strong>只能通过设置一个较大的 <code>font-size</code>，在 Canvas 上进行绘制，然后对这个 Canvas 缩小到限制的宽高</p>
<p>2️⃣ 高清屏绘制文字模糊<br>关于这个问题，解决方案参考：<a href="https://objcer.com/2017/10/10/High-DPI-Canvas-Render/">高清屏中 Canvas 的绘制</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/1-UGtq-cSfbuekV8aHalVIAw.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;本文将探究动态文本如何自适应绘制到指定大小的 Canvas 🎏&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://objcer.com/categories/JS/"/>
    
    
      <category term="Canvas" scheme="http://objcer.com/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>高清屏中 Canvas 的绘制</title>
    <link href="http://objcer.com/2017/10/10/High-DPI-Canvas-Render/"/>
    <id>http://objcer.com/2017/10/10/High-DPI-Canvas-Render/</id>
    <published>2017-10-10T07:07:41.000Z</published>
    <updated>2017-10-10T07:11:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/img_html5-canvas-guide2.jpg" alt=""><br>本文将对 Canvas 在高清屏中绘制出现模糊问题进行分析，并给出解决方案 🎏</p>
<a id="more"></a>
<h2 id="问题剖析"><a href="#问题剖析" class="headerlink" title="问题剖析"></a>问题剖析</h2><blockquote>
<p>文章：<a href="https://objcer.com/2017/06/19/one-pixel-border/">高清屏一像素边框问题</a> 中对物理像素(physical pixel) 、CSS 像素和 devicePixelRatio 等概念进行了介绍</p>
</blockquote>
<p>在高清屏中，Canvas 绘制时会出现模糊的问题，在文章 <a href="https://www.html5rocks.com/en/tutorials/canvas/hidpi/" target="_blank" rel="external">High DPI Canvas</a> 中对此进行了分析介绍。其中涉及两个概念：<strong>webkitBackingStorePixelRatio</strong> 和 <strong>devicePixelRatio</strong></p>
<p>浏览器绘制 Canvas 渲染到屏幕中分两个过程：</p>
<ul>
<li>绘制过程：<strong>webkitBackingStorePixelRatio</strong><br><code>webkitBackingStorePixelRatio</code> 表示浏览器在绘制 Canvas 到缓存区时的绘制比例，若图片宽高为 <code>200px</code>，<code>webkitBackingStorePixelRatio</code> 为 2，那么 Canvas 绘制这个图片到缓存区时，宽高就为 <code>400px</code></li>
<li>渲染过程：<strong>devicePixelRatio</strong><br>Canvas 显示到屏幕中还需要渲染过程，渲染过程根据 <code>devicePixelRatio</code> 参数将缓存区中的 Canvas 进行缩放渲染到屏幕中</li>
</ul>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/canvas-backingstore-device.png" alt=""></p>
<p>分析图片在高清屏中 Canvas 绘制会模糊的原因：<br>1、<code>devicePixelRatio = device pixel / CSS pixel</code><br>如果 <code>devicePixelRatio = 2</code> 那么对于 <code>200px * 200px</code> 的图片要绘制到屏幕中，那么对应的屏幕像素(物理像素) 就是 <code>400px * 400px</code></p>
<p>2、在大部分高清屏中，例如 Macbook Pro 中<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">webkitBackingStorePixelRatio</span> = <span class="number">1</span></div><div class="line"><span class="attr">devicePixelRatio</span> = <span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>将一个 <code>200px * 200px</code> 的图片 Cavnas 绘制到该屏幕中的流程：</p>
<ul>
<li><code>webkitBackingStorePixelRatio = 1</code><br>绘制到缓存区的大小也为：<code>200px * 200px</code></li>
<li><code>devicePixelRatio = 2</code><br><code>200px * 200px</code> 的图片对应到屏幕像素为 <code>400px * 400px</code>，<code>devicePixelRatio = 2</code> 浏览器就把缓存区的 <code>200px * 200px</code> 宽高分别放大两倍渲染到屏幕中，所以就导致模糊</li>
</ul>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul>
<li><p>将 Canvas 宽高进行放大，放大比例为：<code>devicePixelRatio / webkitBackingStorePixelRatio</code></p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> devicePixelRatio = window.devicePixelRatio || <span class="number">1</span></div><div class="line"><span class="built_in">var</span> backingStoreRatio = <span class="built_in">context</span>.webkitBackingStorePixelRatio ||</div><div class="line">                        <span class="built_in">context</span>.mozBackingStorePixelRatio ||</div><div class="line">                        <span class="built_in">context</span>.msBackingStorePixelRatio ||</div><div class="line">                        <span class="built_in">context</span>.oBackingStorePixelRatio ||</div><div class="line">                        <span class="built_in">context</span>.backingStorePixelRatio || <span class="number">1</span></div><div class="line"></div><div class="line"><span class="built_in">var</span> ratio = devicePixelRatio / backingStoreRatio</div></pre></td></tr></table></figure>
</li>
<li><p>通过 CSS 设置将 Canvas 缩小为原大小</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> oldWidth = canvas.<span class="built_in">width</span>;</div><div class="line"><span class="built_in">var</span> oldHeight = canvas.<span class="built_in">height</span>;</div><div class="line"></div><div class="line">canvas.<span class="built_in">width</span> = oldWidth * ratio;</div><div class="line">canvas.<span class="built_in">height</span> = oldHeight * ratio;</div><div class="line"></div><div class="line">canvas.<span class="built_in">style</span>.<span class="built_in">width</span> = oldWidth + 'px';</div><div class="line">canvas.<span class="built_in">style</span>.<span class="built_in">height</span> = oldHeight + 'px';</div></pre></td></tr></table></figure>
</li>
</ul>
<p>举例分析一下 Canvas 绘制图片，文字的适配方案：<br>1、对于图片绘制 <code>drawImage</code> 方法：<br>由于 Canvas 放大后，相应的绘制图片时也要放大，有两种方式：</p>
<ul>
<li><p><code>drawImage</code> 目标宽高分别乘以 <code>ratio</code></p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">context</span>.drawImage(<span class="built_in">image</span>, srcx, srcy, srcw, srch, desx, desy, desw * ratio, desh * ratio);</div></pre></td></tr></table></figure>
</li>
<li><p><code>context.scale</code> 缩放</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">context</span>.<span class="built_in">scale</span>(ratio, ratio)</div><div class="line">// 绘制图片</div><div class="line"><span class="built_in">context</span>.drawImage(...)</div><div class="line"><span class="built_in">context</span>.<span class="built_in">scale</span>(<span class="number">1</span>/ratio, <span class="number">1</span>/ratio)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>此种方式在绘制图片之前，调用 <code>scale</code> 设置 Canvas 缩放变换；绘制完成后，需要重置 Canvas 的缩放变换。推荐使用这种方式 👍</p>
<p>2、对于文字绘制 <code>fillText</code> 方法<br>由于 Canvas 放大了，绘制文字时，字体也要放大，绘制完成后，字体再缩小回原大小<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">context</span>.<span class="built_in">font</span> = <span class="built_in">context</span>.<span class="built_in">font</span>.replace(</div><div class="line">  /(\d+)(px|em|<span class="built_in">rem</span>|pt)/g,</div><div class="line">  function(w, m, u) &#123;</div><div class="line">    <span class="built_in">return</span> (m * ratio) + u;</div><div class="line">  &#125;</div><div class="line">);</div><div class="line">// 绘制文字</div><div class="line"><span class="built_in">context</span>.fillText(...)</div><div class="line"><span class="built_in">context</span>.<span class="built_in">font</span> = <span class="built_in">context</span>.<span class="built_in">font</span>.replace(</div><div class="line">  /(\d+)(px|em|<span class="built_in">rem</span>|pt)/g,</div><div class="line">  function(w, m, u) &#123;</div><div class="line">    <span class="built_in">return</span> (m / ratio) + u;</div><div class="line">  &#125;</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>关于 Canvas 在高清屏绘制的兼容，github 有一个 polyfill <a href="https://github.com/jondavidjohn/hidpi-canvas-polyfill" target="_blank" rel="external">jondavidjohn/hidpi-canvas-polyfill</a> 但是这仓库并没有考虑 <code>drawImage</code>，如果直接使用这个 polyfill，在绘制图片时，宽高都会变小；我 fork 了这个仓库，并增加了 <code>drawImage</code> 处理：<a href="https://github.com/YingshanDeng/hidpi-canvas-polyfill" target="_blank" rel="external">YingshanDeng/hidpi-canvas-polyfill</a>。更多 Canvas 绘制方法的兼容参考这个仓库的源码。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>1️⃣ <code>webkitBackingStorePixelRatio</code> 在 Chrome 中已经废弃，详细参考：<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=277205" target="_blank" rel="external">https://bugs.chromium.org/p/chromium/issues/detail?id=277205</a></p>
<p>2️⃣ 现在高清屏中 Canvas 绘制图片 <code>drawImage</code>，不需要经过如上处理也不会出现模糊的情况了（只在 Mackbook Pro, iPhone 6S 上分别测试过），这点在网上并没有找到更多的信息</p>
<p>但是 Canvas 的其他绘制方法例如绘制文字 <code>fillText</code> 不经过处理高清屏中绘制仍然会模糊，所以还是需要这个polyfill：<a href="https://github.com/YingshanDeng/hidpi-canvas-polyfill" target="_blank" rel="external">YingshanDeng/hidpi-canvas-polyfill</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/img_html5-canvas-guide2.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;本文将对 Canvas 在高清屏中绘制出现模糊问题进行分析，并给出解决方案 🎏&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://objcer.com/categories/JS/"/>
    
    
      <category term="Canvas" scheme="http://objcer.com/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>剖析 iOS 11 网页适配问题</title>
    <link href="http://objcer.com/2017/09/21/Understanding-the-WebView-Viewport-in-iOS-11-iPhone-X/"/>
    <id>http://objcer.com/2017/09/21/Understanding-the-WebView-Viewport-in-iOS-11-iPhone-X/</id>
    <published>2017-09-21T07:55:40.000Z</published>
    <updated>2017-09-21T08:01:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>北京时间 9 月 12 日凌晨，苹果在乔布斯剧院发布了 iPhone X。iPhone X 正面的全面屏上方有一条刘海，对于如何适配 iPhone X，苹果的 <a href="https://developer.apple.com/ios/human-interface-guidelines/overview/iphone-x/" target="_blank" rel="external">Human Interface Guidelines</a> 文档已经给出详细的说明。</p>
<p>苹果对于 iPhone X 的设计布局意见如下：<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/iphone-x-safe-area.png" alt=""><br>核心内容应该处于 <strong>Safe area</strong> 确保不会被设备圆角(corners)，传感器外壳(sensor housing，齐刘海) 以及底部的 Home Indicator 遮挡。</p>
<p>本文将剖析两则在  iPhone X 异形屏和 iOS 11 网页适配中遇到的问题及解决方案。<br><a id="more"></a></p>
<h2 id="iPhone-X-Safari-横屏显示左右白边问题"><a href="#iPhone-X-Safari-横屏显示左右白边问题" class="headerlink" title="iPhone X Safari 横屏显示左右白边问题"></a>iPhone X Safari 横屏显示左右白边问题</h2><p>iPhone X Safari 在横屏状态下，网页左右两侧可能会出现白边，如下：<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/424F6040-3325-4AD5-8683-6D55AE4D9BEA.png" alt=""></p>
<p>因为 iPhone X 会将网页内容显示在 Safe area 导致的，解决这一问题，我们需要将背景颜色填充整个屏幕区域，而网页内容处于 Safe area。<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/47C98605-A351-4903-BDC7-C1E6878D0485.png" alt=""></p>
<h3 id="解决方案一：background-color"><a href="#解决方案一：background-color" class="headerlink" title="解决方案一：background-color"></a>解决方案一：<code>background-color</code></h3><p>如果网页设置了一个背景颜色，那么最简单解决方案是，在 <code>body</code> 节点设置 <code>background-color</code>，使背景颜色填充整个屏幕，从而解决横屏显示左右白边的问题</p>
<h3 id="解决方案二：viewport-fit-safe-area-inset"><a href="#解决方案二：viewport-fit-safe-area-inset" class="headerlink" title="解决方案二：viewport-fit + safe-area-inset-*"></a>解决方案二：<code>viewport-fit</code> + <code>safe-area-inset-*</code></h3><p>在 iOS 11 中苹果为 Web 新增两个内容 <code>viewport-fit</code> + <code>safe-area-inset-*</code></p>
<blockquote>
<p>❗️注意：<code>viewport-fit</code> 和 <code>safe-area-inset-*</code> 只对于 WKWebView 有效，在 UIWebView 中无效</p>
</blockquote>
<p>1️⃣、<code>viewport-fit</code> 用于设置网页在可视窗口的布局方式</p>
<blockquote>
<p>文档：<a href="https://drafts.csswg.org/css-round-display/#viewport-fit-descriptor" target="_blank" rel="external">CSS Round Display Spec</a></p>
</blockquote>
<p>这个属性可设置为：</p>
<ul>
<li><code>contain</code>: The viewport should fully contain the web content. 可视窗口完全包含网页内容</li>
<li><code>cover</code>: The web content should fully cover the viewport.  网页内容完全覆盖可视窗口</li>
<li><code>auto</code>: The default value, <code>contain</code></li>
</ul>
<p>对于 iPhone X 之前的 iPhone 设备屏幕为规则的矩形，网页内容都可以完整展示；但是对于 iPhone X 是异形屏幕，通过 <code>viewport-fit</code> 可以设置网页内容在可视窗口中的显示规则，通过下图可以辅助理解<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/viewport-fit.png" alt=""></p>
<p>我们知道默认情况下 <code>viewport-fit=auto</code> 即为 <code>viewport-fit=contain</code>，在 iPhone X 中，相当于网页内容展示在 Safe area，这样也就是横屏显示时出现白边的原因了，所以我们可以设置 <code>viewport-fit=cover</code> 即可解决问题<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta <span class="attribute">name</span>=<span class="string">"viewport"</span> <span class="attribute">content</span>=<span class="string">"width=device-width, initial-scale=1.0, viewport-fit=cover"</span>&gt;</div></pre></td></tr></table></figure></p>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/Screen-Shot-2017-09-14-at-14.19.31.png" alt=""></p>
<p>注意到应用 <code>viewport-fit=cover</code> 之后，网页右上角，menu 按键和 in 按键被圆角，传感器外壳（齐刘海）裁剪掉了 😲</p>
<p>2️⃣、<code>safe-area-inset-*</code><br><strong>在设置 <code>viewport-fit=cover</code> 之后</strong>，Web 中会新增四个常量：</p>
<ul>
<li>safe-area-inset-top</li>
<li>safe-area-inset-right</li>
<li>safe-area-inset-left</li>
<li>safe-area-inset-bottom</li>
</ul>
<p>分别表示 Safe area 和可视窗口 viewport 顶部，右边，左边，底部的间距，可以用于设置 <code>margin</code>, <code>padding</code>, 或者绝对定位时 <code>left</code>, <code>top</code></p>
<blockquote>
<p>❗️注意：在横屏和竖屏状态下，<code>safe-area-inset-*</code> 的值不同</p>
</blockquote>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/0C3B9577-094E-411C-9ED3-AA481FA3A50A.png" alt=""></p>
<p>为了解决应用 <code>viewport-fit=cover</code> 之后，有些显示内容被裁剪的问题，我们可以通过添加边距使得网页主要内容处于 Safe area 中不被裁剪，解决方式如下：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">padding</span>: constant(safe-<span class="meta">area</span>-inset-top) constant(safe-<span class="meta">area</span>-inset-right) constant(safe-<span class="meta">area</span>-inset-<span class="keyword">bottom) </span>constant(safe-<span class="meta">area</span>-inset-left)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/Screen-Shot-2017-09-14-at-14.07.11-1.png" alt=""></p>
<h2 id="iOS-11-WebView-中状态栏问题"><a href="#iOS-11-WebView-中状态栏问题" class="headerlink" title="iOS 11 WebView 中状态栏问题"></a>iOS 11 WebView 中状态栏问题</h2><p><strong>问题描述：</strong><br>在 iOS 11 由于 safe area，状态栏的表现有点不同。如果页面顶部有一个 header bar，设置 <code>position: fixed; top: 0px;</code> 那么页面滚动过程中，会出现如下问题：<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/iPhone%206s.gif" alt="iPhone 6S"><br><img src="http://7vikhl.com1.z0.glb.clouddn.com/iPhone%20X.gif" alt="iPhone X"></p>
<p>header bar 没有固定在最顶部，上下滚动过程中，我们可以看到网页内容从 status bar 下方穿过<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/status-bar-problem.png" alt=""></p>
<p><strong>重现问题：</strong><br>创建一个 iOS 项目，视图中添加一个 <code>WKWebView</code>，加载百度首页<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">  [<span class="keyword">super</span> viewDidLoad];</div><div class="line">  <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">  <span class="built_in">WKWebView</span> *webView = [[<span class="built_in">WKWebView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.bounds];</div><div class="line">  [webView loadRequest:[<span class="built_in">NSURLRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"https://www.baidu.com"</span>]]];</div><div class="line">  [<span class="keyword">self</span>.view addSubview:webView];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>剖析问题：</strong><br>1、这个问题同样也是由于 safe area 导致，虽然 header bar 位置信息为 <code>position: fixed; top: 0px;</code>，但这个位置也是相对于 safe area 而言的，所以看到 header bar 并没有位于屏幕最顶部。👉 在 viewport meta 标签，添加 <code>viewport-fit=cover</code> 即可解决此问题<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/2B17E02C-7C0C-4282-9369-F5E6D1C75836.png" alt=""></p>
<p>2、虽然 header bar 固定到屏幕最上方，但是很明显在 iPhone X 中却被圆角和齐刘海裁剪了内容，这怎么办呢？👉 为 header bar 添加 <code>padding-top</code> 即可解决此问题<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">header</span> &#123;</div><div class="line">  <span class="comment">/* ... */</span></div><div class="line"></div><div class="line">  <span class="comment">/* Status bar height on iOS 10 */</span></div><div class="line">  <span class="attribute">padding-top</span>: <span class="number">20px</span>;</div><div class="line"></div><div class="line">  <span class="comment">/* Status bar height on iOS 11+ */</span></div><div class="line">  <span class="attribute">padding-top</span>: <span class="built_in">constant</span>(safe-area-inset-top);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/FCF9D371-F2B5-44FE-9FFC-DC991E39FD2C.png" alt=""></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://developer.apple.com/ios/human-interface-guidelines/overview/iphone-x/" target="_blank" rel="external">Human Interface Guidelines-iPhone X</a><br><a href="http://stephenradford.me/removing-the-white-bars-in-safari-on-iphone-x/" target="_blank" rel="external">Removing the White Bars in Safari on iPhone X</a><br><a href="https://ayogo.com/blog/ios11-viewport/" target="_blank" rel="external">Understanding the WebView Viewport in iOS 11</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;北京时间 9 月 12 日凌晨，苹果在乔布斯剧院发布了 iPhone X。iPhone X 正面的全面屏上方有一条刘海，对于如何适配 iPhone X，苹果的 &lt;a href=&quot;https://developer.apple.com/ios/human-interface-guidelines/overview/iphone-x/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Human Interface Guidelines&lt;/a&gt; 文档已经给出详细的说明。&lt;/p&gt;
&lt;p&gt;苹果对于 iPhone X 的设计布局意见如下：&lt;br&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/iphone-x-safe-area.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;核心内容应该处于 &lt;strong&gt;Safe area&lt;/strong&gt; 确保不会被设备圆角(corners)，传感器外壳(sensor housing，齐刘海) 以及底部的 Home Indicator 遮挡。&lt;/p&gt;
&lt;p&gt;本文将剖析两则在  iPhone X 异形屏和 iOS 11 网页适配中遇到的问题及解决方案。&lt;br&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://objcer.com/categories/CSS/"/>
    
    
      <category term="viewport-fit" scheme="http://objcer.com/tags/viewport-fit/"/>
    
      <category term="iOS 11" scheme="http://objcer.com/tags/iOS-11/"/>
    
  </entry>
  
  <entry>
    <title>Implementing Promise</title>
    <link href="http://objcer.com/2017/09/06/Implementing-Promise/"/>
    <id>http://objcer.com/2017/09/06/Implementing-Promise/</id>
    <published>2017-09-06T14:10:50.000Z</published>
    <updated>2017-09-06T14:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/Promises:A+.png" alt=""></p>
<a id="more"></a>
<p>本文将剖析 Promise 的内部结构，实现符合 <a href="https://promisesaplus.com/" target="_blank" rel="external">Promises/A+</a> 规范的 Promise，并且通过 <a href="https://github.com/promises-aplus/promises-tests#promisesa-compliance-test-suite" target="_blank" rel="external">promises-aplus/promises-tests</a> 测试。</p>
<h2 id="JavaScript-Promise-标准解读"><a href="#JavaScript-Promise-标准解读" class="headerlink" title="JavaScript Promise 标准解读"></a>JavaScript Promise 标准解读</h2><p>Promise 表示一个异步操作的最终结果，与之进行交互的方式主要是 <code>then</code> 方法，该方法注册了两个回调函数，用于接收 Promise resolve 的终值或者 Promise reject 的原因。</p>
<blockquote>
<p>详细 <strong>Promise A+ 规范</strong> 参考：<a href="https://promisesaplus.com/" target="_blank" rel="external">英文</a>  <a href="https://malcolmyu.github.io/2015/06/12/Promises-A-Plus/" target="_blank" rel="external">中文</a></p>
</blockquote>
<h3 id="Promise-States"><a href="#Promise-States" class="headerlink" title="Promise States"></a>Promise States</h3><ul>
<li>一个 Promise 的当前状态必须为以下三种状态中的一种:<ul>
<li>PENDING</li>
<li>FULFILLED</li>
<li>REJECTED</li>
</ul>
</li>
<li>Promise 的初始状态为 PENDING，由此状态可转换为 FULFILLED 或者 REJECTED，一旦状态确定，就不能再次转换为其他状态，此状态称之为 settle</li>
</ul>
<h3 id="then-方法"><a href="#then-方法" class="headerlink" title="then 方法"></a><code>then</code> 方法</h3><ul>
<li><p>一个 Promise 必须提供 <code>then</code> 方法，该方法接收两个参数：</p>
<figure class="highlight mercury"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">promise</span>.<span class="built_in">then</span>(onFulfilled, onRejected)</div></pre></td></tr></table></figure>
</li>
<li><p><code>then</code> 方法必须返回一个 Promise 对象</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">promise2</span> = promise1.then(<span class="literal">on</span>Fulfilled, <span class="literal">on</span>Rejected)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="The-Promise-Resolution-Procedure"><a href="#The-Promise-Resolution-Procedure" class="headerlink" title="The Promise Resolution Procedure"></a>The Promise Resolution Procedure</h3><p>不同实现的 Promise 需要可以无缝相互调用(interoperable)，例如：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> MyPromise 表示自己实现的 Promise</div><div class="line"><span class="keyword">new</span> MyPromise(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</div><div class="line">    resolve(<span class="number">1</span>)</div><div class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> Promise.reject(<span class="number">2</span>) <span class="regexp">//</span> ES6 Promise</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="实现-Promise"><a href="#实现-Promise" class="headerlink" title="实现 Promise"></a>实现 Promise</h2><h3 id="Promise-构造函数"><a href="#Promise-构造函数" class="headerlink" title="Promise 构造函数"></a>Promise 构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</div><div class="line">  <span class="comment">// The constructor function</span></div><div class="line">  <span class="keyword">constructor</span> (executor) &#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>._isFunction(executor)) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Promise argument error:'</span> + executor.toString())</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>._status = PENDING</div><div class="line">    <span class="keyword">this</span>._v = <span class="literal">undefined</span></div><div class="line">    <span class="keyword">this</span>._onResolvedCb = []</div><div class="line">    <span class="keyword">this</span>._onRejectedCb = []</div><div class="line"></div><div class="line">    executor(<span class="keyword">this</span>.resolve.bind(<span class="keyword">this</span>), <span class="keyword">this</span>.reject.bind(<span class="keyword">this</span>))</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="comment">// 执行操作...</span></div><div class="line">  <span class="comment">// 操作成功：调用 resolve，传入 value</span></div><div class="line">  resolve(value)</div><div class="line">  <span class="comment">// 操作失败: 调用 reject，传入 reason</span></div><div class="line">  reject(reason)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>构造函数中，<code>_onResolvedCb</code> 和 <code>_onRejectedCb</code> 属性分别为 Promise resolved/rejected 的回调函数集，因为在 Promise 结束（settle）之前，可能有多个 <code>then</code> 挂在该 promise 上，即有多个回调事件；</li>
<li>构造函数接收一个 executor 函数，函数中的操作执行结束后，若成功，调用 resolve 并传入 value；若失败，调用 reject 并传入 reason</li>
</ul>
<p>接下来实现 <code>resolve</code> 和 <code>reject</code> 这两个函数，这两个函数类似，首先判断当前 Promise 状态后，变更其状态；并记录 resolved 的终值和 rejected 的原因；最后执行回调函数<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">resolve (value) &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>._status !== PENDING) &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>._status = FULFILLED</div><div class="line">  <span class="keyword">this</span>._v = value</div><div class="line"></div><div class="line">  let fn</div><div class="line">  <span class="keyword">while</span> ((fn = <span class="keyword">this</span>._onResolvedCb.shift())) &#123;</div><div class="line">    fn.call(<span class="keyword">this</span>, value)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">reject (reason) &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="then-方法-1"><a href="#then-方法-1" class="headerlink" title="then 方法"></a><code>then</code> 方法</h3><p>Promise 对象的 <code>then</code> 方法用来注册 Promise resolved 或者 rejected 后的回调函数，<code>then</code> 方法返回一个新的 Promise 对象<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">then (onResolved, onRejected) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Promise((resolve, reject) =&gt; &#123;</div><div class="line">    <span class="keyword">switch</span> (<span class="keyword">this</span>._status) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">PENDING:</span></div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="keyword">break</span></div><div class="line">      <span class="keyword">case</span> <span class="string">FULFILLED:</span></div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="keyword">break</span></div><div class="line">      <span class="keyword">case</span> <span class="string">REJECTED:</span></div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="keyword">break</span></div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><code>then</code> 方法返回的新 Promise 对象中，需要根据前一个 Promise 对象的不同状态来处理：<ul>
<li>若是 FULFILLED，则直接执行 <code>onResolved</code> 回调函数。如果 <code>onResolved</code> 的返回值又是一个 Promise 对象，那么继续通过 <code>then</code> 方法构造 Promise 链；否则，调用 <code>resolve</code> 函数结束新的 Promise 对象</li>
<li>若是 REJECTED，处理逻辑同 FULFILLED</li>
<li>若是 PENDING，则将 <code>onResolved</code> 和 <code>onRejected</code> 回调函数放到回调函数集中</li>
</ul>
</li>
</ul>
<p>最终得到如下简易版本的 <code>then</code> 方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">then (onResolved, onRejected) &#123;</div><div class="line">  <span class="comment">// Promise 值穿透</span></div><div class="line">  onResolved = <span class="keyword">this</span>._isFunction(onResolved) ? onResolved : <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123; <span class="keyword">return</span> v &#125;</div><div class="line">  onRejected = <span class="keyword">this</span>._isFunction(onRejected) ? onRejected : <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123; <span class="keyword">throw</span> r &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">switch</span> (<span class="keyword">this</span>._status) &#123;</div><div class="line">      <span class="keyword">case</span> PENDING:</div><div class="line">        <span class="keyword">this</span>._onResolvedCb.push(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</div><div class="line">          <span class="comment">// 执行 onResolved 或者 onRejected 可能出现异常，需要 try-catch</span></div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">var</span> x = onResolved(value)</div><div class="line">            <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</div><div class="line">              x.then(resolve, reject)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">              resolve(x)</div><div class="line">            &#125;</div><div class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">            reject(e)</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">        <span class="keyword">this</span>._onRejectedCb.push(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">var</span> x = onRejected(reason)</div><div class="line">            <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</div><div class="line">              x.then(resolve, reject)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">              resolve(x)</div><div class="line">            &#125;</div><div class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">            reject(e)</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">        <span class="keyword">break</span></div><div class="line">      <span class="keyword">case</span> FULFILLED:</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">var</span> x = onResolved(<span class="keyword">this</span>._v)</div><div class="line">            <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</div><div class="line">              x.then(resolve, reject)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">              resolve(x)</div><div class="line">            &#125;</div><div class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">            reject(e)</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">        <span class="keyword">break</span></div><div class="line">      <span class="keyword">case</span> REJECTED:</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">var</span> x = onRejected(<span class="keyword">this</span>._v)</div><div class="line">            <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</div><div class="line">              x.then(resolve, reject)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">              resolve(x)</div><div class="line">            &#125;</div><div class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">            reject(e)</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">        <span class="keyword">break</span></div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> promise2</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>代码剖析注意：</strong><br>1、<code>then</code> 方法的两个回调函数执行过程中可能抛出异常，所以在执行时，需要 <code>try-catch</code> 包起来<br>2、Promise 值穿透<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Promise(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</div><div class="line">  resolve(<span class="number">1</span>)</div><div class="line">&#125;)</div><div class="line">.<span class="keyword">then</span>()</div><div class="line">.<span class="keyword">then</span>(<span class="function"><span class="params">(value)</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'resolve: '</span>, value)</div><div class="line">&#125;, <span class="function"><span class="params">(reason)</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'reject: '</span>, reason)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>如上代码正确的执行结果为输出：1；注意到第一个 <code>then</code> 方法并没有传入回调函数，所以在执行的时候，会抛出异常，提示：<code>TypeError: onResolved is not a function</code>；在添加 <code>try-catch</code> 后，可以正常执行；catch 到异常后，执行 <code>reject(e)</code>，于是第二个 <code>then</code> 方法中的 reject 回调函数执行了。</p>
<p>为了解决这个问题，我们需要判断 <code>then</code> 方法传入的两个参数是否为函数，若不是，直接返回 value 或者抛出 reason。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">onResolved = <span class="keyword">this</span>._isFunction(onResolved) ? onResolved : <span class="function"><span class="keyword">function</span> <span class="params">(v)</span> </span>&#123; <span class="keyword">return</span> v &#125;</div><div class="line">onRejected = <span class="keyword">this</span>._isFunction(onRejected) ? onRejected : <span class="function"><span class="keyword">function</span> <span class="params">(r)</span> </span>&#123; <span class="keyword">throw</span> r &#125;</div></pre></td></tr></table></figure></p>
<h3 id="不同-Promise-的交互"><a href="#不同-Promise-的交互" class="headerlink" title="不同 Promise 的交互"></a>不同 Promise 的交互</h3><p><code>then</code> 方法传入的两个回调函数 <code>onResolved</code> 和 <code>onRejected</code> 执行后，返回值 <code>x</code> 可能是一个 Promise 对象，也即是 <code>thenable</code>，为了确保调用 <code>x</code> 上的 <code>then</code> 方法成功，我们需要实现标准中 <strong><a href="https://promisesaplus.com/#the-promise-resolution-procedure" target="_blank" rel="external">2.3.The Promise Resolution Procedure</a></strong> 的内容，这样即使实现方式不同，但遵循标准，不同实现的 Promise 之间就可以交互使用了。</p>
<p>标准对此说明的非常详细，对照着标准阅读以下代码，有助理解。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The Promise Resolution Procedure</span></div><div class="line"><span class="comment">// https://promisesaplus.com/#the-promise-resolution-procedure</span></div><div class="line"><span class="keyword">static</span> resolvePromise (promise2, x, resolve, reject) &#123;</div><div class="line">  <span class="keyword">var</span> then</div><div class="line">  <span class="comment">// multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored</span></div><div class="line">  <span class="keyword">var</span> hasBeenCalled = <span class="literal">false</span></div><div class="line"></div><div class="line">  <span class="comment">// 2.3.1 If promise and x refer to the same object</span></div><div class="line">  <span class="keyword">if</span> (promise2 === x) &#123;</div><div class="line">    reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Chaining cycle detected for promise!'</span>))</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 2.3.2 If x is a promise</span></div><div class="line">  <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (x._status === PENDING) &#123; <span class="comment">// 2.3.2.1</span></div><div class="line">      x.then(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</div><div class="line">        <span class="built_in">Promise</span>.resolvePromise(promise2, v, resolve, reject)</div><div class="line">      &#125;, reject)</div><div class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 2.3.2.2  2.3.2.3</span></div><div class="line">      x.then(resolve, reject)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 2.3.3 Otherwise, if x is an object or function</span></div><div class="line">  <span class="keyword">if</span> ((x !== <span class="literal">null</span>) &amp;&amp; ((<span class="keyword">typeof</span> x === <span class="string">'object'</span>) || (<span class="keyword">typeof</span> x === <span class="string">'function'</span>))) &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      then = x.then <span class="comment">// 2.3.3.1</span></div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">'function'</span>) &#123; <span class="comment">// 2.3.3.3</span></div><div class="line">        then.call(x, <span class="function"><span class="keyword">function</span> <span class="title">rs</span> (<span class="params">y</span>) </span>&#123; <span class="comment">// 2.3.3.3.1</span></div><div class="line">          <span class="keyword">if</span> (hasBeenCalled) <span class="keyword">return</span> <span class="comment">// 2.3.3.3.3</span></div><div class="line">          hasBeenCalled = <span class="literal">true</span></div><div class="line">          <span class="built_in">Promise</span>.resolvePromise(promise2, y, resolve, reject)</div><div class="line">        &#125;, <span class="function"><span class="keyword">function</span> <span class="title">rj</span> (<span class="params">r</span>) </span>&#123; <span class="comment">// 2.3.3.3.2</span></div><div class="line">          <span class="keyword">if</span> (hasBeenCalled) <span class="keyword">return</span> <span class="comment">// 2.3.3.3.3</span></div><div class="line">          hasBeenCalled = <span class="literal">true</span></div><div class="line">          reject(r)</div><div class="line">        &#125;)</div><div class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 2.3.3.4</span></div><div class="line">        resolve(x)</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123; <span class="comment">// 2.3.3.2</span></div><div class="line">      <span class="keyword">if</span> (hasBeenCalled) <span class="keyword">return</span> <span class="comment">// 2.3.3.3.4.1</span></div><div class="line">      hasBeenCalled = <span class="literal">true</span></div><div class="line">      reject(e) <span class="comment">// 2.3.3.3.4.2</span></div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 2.3.4</span></div><div class="line">    resolve(x)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在 <code>then</code> 方法中需要修改，<code>onResolved</code> 和 <code>onRejected</code> 执行后，调用如上的 <code>resolvePromise (promise2, x, resolve, reject)</code> 方法<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="keyword">case</span> FULFILLED:</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">var</span> x = onResolved(<span class="keyword">this</span>._v)</div><div class="line">      <span class="built_in">Promise</span>.resolvePromise(promise2, x, resolve, reject)</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">      reject(e)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">break</span></div><div class="line"><span class="keyword">case</span> REJECTED:</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">var</span> x = onRejected(<span class="keyword">this</span>._v)</div><div class="line">      <span class="built_in">Promise</span>.resolvePromise(promise2, x, resolve, reject)</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">      reject(e)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">break</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<h2 id="Promises-A-test"><a href="#Promises-A-test" class="headerlink" title="Promises/A+ test"></a>Promises/A+ test</h2><p>Promises/A+ 规范提供了一个测试规范： <a href="https://github.com/promises-aplus/promises-tests#promisesa-compliance-test-suite" target="_blank" rel="external">promises-aplus/promises-tests</a><br>测试需要提供一个 adapter 方法 <code>Promise.deferred</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="built_in">Promise</span> <span class="keyword">from</span> <span class="string">'./promise.js'</span></div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.deferred = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> dfd = &#123;&#125;</div><div class="line">  dfd.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    dfd.resolve = resolve</div><div class="line">    dfd.reject = reject</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> dfd</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="built_in">Promise</span></div></pre></td></tr></table></figure></p>
<p>执行：<br><figure class="highlight mercury"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">promises-aplus-tests dist/<span class="keyword">promise</span>-adapter.js</div></pre></td></tr></table></figure></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul>
<li>简易版(没有实现 Promises/A+ 标准 2.3.The Promise Resolution Procedure)<br><a href="https://gist.github.com/YingshanDeng/21ef2abab6cede0ae2bcd00986f762fd" target="_blank" rel="external">YingshanDeng / simple-promise.js</a></li>
<li>完整版(完全通过 Promises/A+ 测试规范)<br><a href="https://github.com/YingshanDeng/Promise" target="_blank" rel="external">YingshanDeng/Promise</a></li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://github.com/xieranmaya/blog/issues/3" target="_blank" rel="external">剖析Promise内部结构，一步一步实现一个完整的、能通过所有Test case的Promise类</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/Promises:A+.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://objcer.com/categories/JS/"/>
    
    
      <category term="Promise" scheme="http://objcer.com/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>Javascript DOM 事件模型</title>
    <link href="http://objcer.com/2017/08/14/Introduction-into-Events/"/>
    <id>http://objcer.com/2017/08/14/Introduction-into-Events/</id>
    <published>2017-08-14T11:39:01.000Z</published>
    <updated>2017-08-14T11:41:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/js-event.jpg" alt=""><br><a id="more"></a></p>
<h2 id="Bubbling-and-capturing"><a href="#Bubbling-and-capturing" class="headerlink" title="Bubbling and capturing"></a>Bubbling and capturing</h2><p>Javascript DOM 事件流存在如下三个阶段：</p>
<ul>
<li>事件捕获阶段 Capturing phase – <strong>the event goes down to the element.</strong></li>
<li>处于目标阶段 Target phase – the event reached the target element.</li>
<li>事件冒泡阶段 Bubbling phase – <strong>the event bubbles up from the element.</strong></li>
</ul>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/eventflow@2x.png" alt=""></p>
<p><strong>Javascript DOM 标准事件流的触发的先后顺序为：先捕获再冒泡。</strong>点击 <code>&lt;td&gt;</code> DOM 节点时，事件传播顺序：首先是事件捕获阶段，从上向下传播；然后到达点击事件目标节点；最后是冒泡阶段，从下向上传播。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">addEventListener(<span class="string">type:</span> DOMString, <span class="string">callback:</span> EventListener, capture?: <span class="keyword">boolean</span>)</div></pre></td></tr></table></figure>
<p>DOM 节点添加事件监听方法 <code>addEventListener</code> 中第三个参数可以指定是该监听是添加在事件捕获阶段或者是事件冒泡阶段，默认为 <code>false</code>，即事件冒泡阶段；显式指定为 <code>true</code>，即事件捕获阶段。</p>
<p>实际应用中，为 DOM 元素添加事件监听绝大多数都是添加到事件冒泡阶段，很少会用到事件捕获。我们通过 <code>on&lt;event&gt;-property</code> HTML 属性添加的事件监听默认也是添加到事件冒泡阶段</p>
<p>注意到事件流处理有三个阶段，其中第二个阶段：处于目标阶段，并不单独处理，事件捕获阶段和冒泡阶段的添加的监听处理就包含了这个阶段。</p>
<h3 id="并非所有的事件都支持冒泡"><a href="#并非所有的事件都支持冒泡" class="headerlink" title="并非所有的事件都支持冒泡"></a>并非所有的事件都支持冒泡</h3><blockquote>
<p>❗ <strong>Almost</strong> all events bubble.</p>
</blockquote>
<p>注意关键字 “almost”，所以并不是所有的事件都支持冒泡。在 wiki <a href="https://en.wikipedia.org/wiki/DOM_events#Events" target="_blank" rel="external">DOM_events</a> 中我们就可以找到一些不支持冒泡的事件，例如 <code>focus</code>、<code>blur</code> 等等<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="params">(event)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(event.bubbles) <span class="regexp">//</span> &gt; <span class="literal">true</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">a.addEventListener(<span class="string">'focus'</span>, <span class="function"><span class="params">(event)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(event.bubbles) <span class="regexp">//</span> &gt; <span class="literal">false</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>我们可以通过 <code>event.bubbles</code> 来判断是否支持事件冒泡</p>
<h3 id="三个常用方法"><a href="#三个常用方法" class="headerlink" title="三个常用方法"></a>三个常用方法</h3><ul>
<li><p><code>event.stopPropagation</code> 阻止捕获和冒泡阶段中当前事件的进一步传播<br>在事件监听回调中调用此方法，若是捕获阶段，则停止向下传递事件；若是冒泡阶段，则停止向上传递事件。</p>
</li>
<li><p><code>event.stopImmediatePropagation</code> 阻止调用相同事件的其他侦听器<br>如果某个元素有多个相同类型事件的事件监听函数, 则当该类型的事件触发时, 多个事件监听函数将按照顺序依次执行. 如果某个监听函数执行了 <code>event.stopImmediatePropagation()</code> 方法, 则除了该事件的冒泡行为被阻止之外(event.stopPropagation方法的作用), 该元素绑定的后序相同类型事件的监听函数的执行也将被阻止。例子：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">"p"</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span></div><div class="line">    &#123;</div><div class="line">        alert(<span class="string">"我是p元素上被绑定的第一个监听函数"</span>);</div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">"p"</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span></div><div class="line">    &#123;</div><div class="line">        alert(<span class="string">"我是p元素上被绑定的第二个监听函数"</span>);</div><div class="line">        event.stopImmediatePropagation();</div><div class="line">        <span class="comment">//执行stopImmediatePropagation方法,阻止click事件冒泡,并且阻止p元素上绑定的其他click事件的事件监听函数的执行.</span></div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">"p"</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span></div><div class="line">    &#123;</div><div class="line">        alert(<span class="string">"我是p元素上被绑定的第三个监听函数"</span>);</div><div class="line">        <span class="comment">//该监听函数排在上个函数后面,该函数不会被执行.</span></div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">"div"</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span></div><div class="line">    &#123;</div><div class="line">        alert(<span class="string">"我是div元素,我是p元素的上层元素"</span>);</div><div class="line">        <span class="comment">//p元素的click事件没有向上冒泡,该函数不会被执行.</span></div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>event.preventDefault</code> 如果事件可取消，则取消该事件，而不停止事件的进一步传播。</p>
<ul>
<li>在事件触发后的任何阶段调用 <code>preventDefault</code> 方法来取消该事件, <strong>意味着该事件的所有默认动作都不会发生.</strong> 例如可以利用 <code>preventDefault()</code> 方法来阻止一个 <code>input</code> 元素内非法字符的输入等等</li>
<li>调用事件的 <code>preventDefault()</code> 方法后,会引起该事件的 <code>event.defaultPrevented</code> 属性值变为 <code>true</code></li>
<li>可以查看 <code>event.cancelable</code> 属性来判断一个事件的默认动作是否可以被取消. 在 <code>cancelable</code> 属性为 <code>false</code> 的事件上调用 <code>preventDefault</code> 方法没有任何效果</li>
<li><code>preventDefault</code> 方法<strong>不会阻止该事件的进一步冒泡</strong>. <code>event.stopPropagation</code> 方法才有这样的功能</li>
</ul>
</li>
</ul>
<h3 id="event-target-和-event-currentTarget"><a href="#event-target-和-event-currentTarget" class="headerlink" title="event.target 和 event.currentTarget"></a><code>event.target</code> 和 <code>event.currentTarget</code></h3><blockquote>
<p>The most deeply nested element that caused the event is called a target element, accessible as event.target.<br>Note the differences from this (=event.currentTarget):</p>
<ul>
<li>event.target – is the “target” element that initiated the event, it doesn’t change through the bubbling process.</li>
<li>this – is the “current” element, the one that has a currently running handler on it.</li>
</ul>
</blockquote>
<ul>
<li><code>event.target</code> – 指向触发事件的元素，在事件冒泡过程中该值不变</li>
<li><code>event.currentTarget</code> = this – 事件绑定的当前元素</li>
</ul>
<p>只有被点击的那个目标元素的 <code>event.target</code> 才会等于 <code>event.currentTarget</code>，看如下例子<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></div><div class="line">  outer</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>inner<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> outerEl = <span class="built_in">document</span>.querySelector(<span class="string">'.outer'</span>);</div><div class="line">  <span class="keyword">var</span> innerEl = <span class="built_in">document</span>.querySelector(<span class="string">'.inner'</span>);</div><div class="line"></div><div class="line">  innerEl.addEventListener(<span class="string">'click'</span>, (event) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'inner'</span>, event.target, event.currentTarget)</div><div class="line">  &#125;);</div><div class="line">  outerEl.addEventListener(<span class="string">'click'</span>, (event) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'outer'</span>, event.target, event.currentTarget)</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>点击 inner 节点，执行结果：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">inner &lt;<span class="keyword">div</span> <span class="built_in">class</span>=​<span class="string">"inner"</span>&gt;​inner​&lt;/<span class="keyword">div</span>&gt;​ &lt;<span class="keyword">div</span> <span class="built_in">class</span>=​<span class="string">"inner"</span>&gt;​inner​&lt;/<span class="keyword">div</span>&gt;​</div><div class="line">outer &lt;<span class="keyword">div</span> <span class="built_in">class</span>=​<span class="string">"inner"</span>&gt;​inner​&lt;/<span class="keyword">div</span>&gt;​ &lt;<span class="keyword">div</span> <span class="built_in">class</span>=​<span class="string">"outer"</span>&gt;​…​&lt;/<span class="keyword">div</span>&gt;​</div></pre></td></tr></table></figure></p>
<h2 id="执行顺序的问题"><a href="#执行顺序的问题" class="headerlink" title="执行顺序的问题"></a>执行顺序的问题</h2><p>我们知道，Javascript DOM 标准事件流的触发的先后顺序为：先捕获再冒泡。如果 DOM 节点同时绑定两个事件监听，一个用于捕获阶段，一个用于冒泡阶段，两个事件的执行顺序真的如此么？<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"outer"</span>&gt;</div><div class="line">  element1</div><div class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;element2&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-----------------------------------</div><div class="line">|<span class="string"> element1                        </span>|</div><div class="line">|<span class="string">   -------------------------     </span>|</div><div class="line">|<span class="string">   </span>|<span class="string">element2               </span>|<span class="string">     </span>|</div><div class="line">|<span class="string">   -------------------------     </span>|</div><div class="line">|<span class="string">                                 </span>|</div><div class="line">-----------------------------------</div></pre></td></tr></table></figure>
<p>分别为内外两个元素添加两个点击事件，一个用于捕获阶段，一个用于冒泡阶段<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  var outerEl = <span class="built_in">document</span>.querySelector(<span class="string">'.outer'</span>);</div><div class="line">  var innerEl = <span class="built_in">document</span>.querySelector(<span class="string">'.inner'</span>);</div><div class="line"></div><div class="line">  innerEl.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="params">(event)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'child bubble'</span>)</div><div class="line">  &#125;, <span class="literal">false</span>);</div><div class="line">  innerEl.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="params">(event)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'child capture'</span>)</div><div class="line">  &#125;, <span class="literal">true</span>);</div><div class="line"></div><div class="line">  outerEl.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="params">(event)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'parent bubble'</span>)</div><div class="line">  &#125;, <span class="literal">false</span>);</div><div class="line">  outerEl.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="params">(event)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'parent capture'</span>)</div><div class="line">  &#125;, <span class="literal">true</span>);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>根据前面的知识，当点击 element2 元素和 element1 元素的时候，我们应该会得到：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#点击 element2 元素</span></div><div class="line"><span class="keyword">parent</span> capture</div><div class="line">child capture</div><div class="line">child bubble</div><div class="line"><span class="keyword">parent</span> bubble</div><div class="line"></div><div class="line"><span class="comment">#点击 element1 元素</span></div><div class="line"><span class="keyword">parent</span> capture</div><div class="line"><span class="keyword">parent</span> bubble</div></pre></td></tr></table></figure></p>
<p><strong>❗️但是，</strong>实际上我们点击 element2 和点击 element1 的时候，得到的结果却是（其中都出现了先 bubble 后 capture）：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 点击 element2</span></div><div class="line"><span class="keyword">parent</span> capture</div><div class="line">child bubble</div><div class="line">child capture</div><div class="line"><span class="keyword">parent</span> bubble</div><div class="line"></div><div class="line"><span class="comment"># 点击 element1</span></div><div class="line"><span class="keyword">parent</span> bubble</div><div class="line"><span class="keyword">parent</span> capture</div></pre></td></tr></table></figure></p>
<p>这是为什么呢？这跟前面的结论不符啊 🤔 通过观察我们可以发现：<br>① DOM 元素先添加了用于冒泡阶段的事件监听，后添加了用于捕获阶段的事件监听<br>② 被点击元素先执行了冒泡阶段的事件监听，后执行捕获阶段的事件监听；而点击事件的父节点事件监听执行顺序正常<br>③ 我们猜测是否跟事件监听添加顺序有关系，我们调换一下添加顺序：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  var outerEl = <span class="built_in">document</span>.querySelector(<span class="string">'.outer'</span>);</div><div class="line">  var innerEl = <span class="built_in">document</span>.querySelector(<span class="string">'.inner'</span>);</div><div class="line"></div><div class="line">  innerEl.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="params">(event)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'child bubble'</span>)</div><div class="line">  &#125;, <span class="literal">true</span>);</div><div class="line">  innerEl.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="params">(event)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'child capture'</span>)</div><div class="line">  &#125;, <span class="literal">false</span>);</div><div class="line"></div><div class="line">  outerEl.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="params">(event)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'parent bubble'</span>)</div><div class="line">  &#125;, <span class="literal">true</span>);</div><div class="line">  outerEl.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="params">(event)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'parent capture'</span>)</div><div class="line">  &#125;, <span class="literal">false</span>);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>发现执行得到的结果正常</p>
<p><strong>❗️给出结论：</strong></p>
<ul>
<li>绑定在被点击元素的事件是按照代码添加顺序执行，其他元素先捕获后冒泡</li>
<li><strong>所以事件的执行顺序是：父元素的捕获阶段事件 -&gt; 触发事件元素按代码添加顺序的事件 -&gt; 父元素的冒泡阶段事件</strong></li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://javascript.info/bubbling-and-capturing" target="_blank" rel="external">Bubbling and capturing</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/js-event.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="JS" scheme="http://objcer.com/categories/JS/"/>
    
    
      <category term="事件捕获" scheme="http://objcer.com/tags/%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7/"/>
    
      <category term="事件冒泡" scheme="http://objcer.com/tags/%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/"/>
    
  </entry>
  
  <entry>
    <title>探究 emoji 字符长度</title>
    <link href="http://objcer.com/2017/07/20/explore-emoji-length/"/>
    <id>http://objcer.com/2017/07/20/explore-emoji-length/</id>
    <published>2017-07-20T11:41:38.000Z</published>
    <updated>2017-07-20T11:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/C0E1DEF1-900B-4372-B8CB-B166A1ABBA57.png" alt=""><br>我们注意到在 Twitter，微博，谷歌翻译的输入框中输入 emoji 字符，都不能正确的判断字符个数。🤷‍<br>在阅读本文之前，需要先对 Unicode 编码有所了解，参考: <a href="http://objcer.com/2017/05/21/JavaScript-Unicode/">JavaScript Unicode 编码那些事</a></p>
<a id="more"></a>
<h2 id="String-length-Char-count"><a href="#String-length-Char-count" class="headerlink" title="String length != Char count"></a>String length != Char count</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">'😂'</span><span class="selector-class">.length</span> <span class="comment">// 2</span></div><div class="line"><span class="string">'1️⃣'</span><span class="selector-class">.length</span> <span class="comment">// 3</span></div><div class="line"><span class="string">'👨‍👨‍👦'</span><span class="selector-class">.length</span> <span class="comment">// 8</span></div><div class="line"><span class="string">'👨‍👩‍👧‍👦'</span><span class="selector-class">.length</span> <span class="comment">// 11</span></div></pre></td></tr></table></figure>
<h2 id="关于-Unicode"><a href="#关于-Unicode" class="headerlink" title="关于 Unicode"></a>关于 Unicode</h2><p>Unicode 编码范围是从 U+0000 到 U+10FFFF，每一个编码（也称之为码位 code point）表示一个 Unicode 字符；而这么多码位有划分成 17 个平面：</p>
<ul>
<li>第一个平面(U+0000 ~ U+FFFF): 基本平面(Basic Multilingual Plane - <em>BMP</em>)</li>
<li>其他 16 个平面(U+100000 ~ U+10FFFF): 补充平面(Supplementary Planes)</li>
</ul>
<p>其中 emoji 作为一种特殊编码在补充平面，例如：<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">'😀'<span class="string">.codePointAt</span><span class="params">(0)</span><span class="string">.toString</span><span class="params">(16)</span> <span class="string">//</span> 0x1f600</div><div class="line">'😂'<span class="string">.codePointAt</span><span class="params">(0)</span><span class="string">.toString</span><span class="params">(16)</span> <span class="string">//</span> 0x1f602</div></pre></td></tr></table></figure></p>
<h2 id="关于-emoji"><a href="#关于-emoji" class="headerlink" title="关于 emoji"></a>关于 emoji</h2><blockquote>
<p>An Emoji as we know it today <strong>is defined by at least one code point</strong> in the Unicode range. This means that there are also several Emoji out there being a combination of several different Emoji and code points. These combinations are called <strong>sequences</strong>.</p>
</blockquote>
<p>一个 emoji 字符至少由一个码位表示，一个 emoji 有多个码位表示的我们称之为序列(sequences)。可以在 <a href="http://unicode.org/emoji/charts/full-emoji-list.html" target="_blank" rel="external">Full Emoji List</a> 页面查看到所有 emoji 的编码信息<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/5E88BF15-66B7-4A32-9125-B3E019C52E9C.png" alt=""></p>
<p>在 JavaScript 中 <code>String.length</code> 计算字符长度时，认为两个字节为一个字符，所以一个基本平面上的字符长度都为 1；而一个补充平面上的字符使用代理对，由四个字符表示，所以长度为 2；<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a: 0x61</span></div><div class="line"><span class="string">'a'</span><span class="selector-class">.lenght</span> <span class="comment">// 1</span></div><div class="line"></div><div class="line"><span class="comment">//💩: U+d83d U+dca9</span></div><div class="line"><span class="string">'💩'</span><span class="selector-class">.length</span> <span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="comment">// '1️⃣': U+0031 U+FE0F U+20E3</span></div><div class="line"><span class="string">'1️⃣'</span><span class="selector-class">.length</span> <span class="comment">// 3</span></div></pre></td></tr></table></figure></p>
<h3 id="Modifier-sequences"><a href="#Modifier-sequences" class="headerlink" title="Modifier sequences"></a>Modifier sequences</h3><p><img src="http://7vikhl.com1.z0.glb.clouddn.com/480D3F20-0262-40E4-B7C6-E068A9958692.png" alt=""><br>我们注意部分人类相关的 <strong>Human emoji</strong> 可以选择其他 5 种不同的肤色(<strong>Skin color</strong>)，默认颜色的 emoji 称之为 <strong>neutral emoji</strong>，不同肤色称之为 <strong>modifier</strong>，这些不同肤色的 emoji 我们称之为 <strong>Modifier sequences</strong>。</p>
<blockquote>
<p>These modifiers are called EMOJI MODIFIER FITZPATRICK TYPE-1-2, -3, -4, -5, and -6 (U+1F3FB–U+1F3FF): 🏻 🏼 🏽 🏾 🏿</p>
</blockquote>
<table>
<thead>
<tr>
<th>Code point</th>
<th>default</th>
<th>FITZ-1-2(U+1F3FB)</th>
<th>FITZ-3(U+1F3FC)</th>
<th>FITZ-4(U+1F3FD)</th>
<th>FITZ-5(U+1F3FE)</th>
<th>FITZ-6(U+1F3FF)</th>
</tr>
</thead>
<tbody>
<tr>
<td>U+1F466: BOY</td>
<td>👦</td>
<td>👦🏻</td>
<td>👦🏼</td>
<td>👦🏽</td>
<td>👦🏾</td>
<td>👦🏿</td>
</tr>
<tr>
<td>U+1F467: GIRL</td>
<td>👧</td>
<td>👧🏻</td>
<td>👧🏼</td>
<td>👧🏽</td>
<td>👧🏾</td>
<td>👧🏿</td>
</tr>
<tr>
<td>U+1F468: MAN</td>
<td>👨</td>
<td>👨🏻</td>
<td>👨🏼</td>
<td>👨🏽</td>
<td>👨🏾</td>
<td>👨🏿</td>
</tr>
<tr>
<td>U+1F469: WOMAN</td>
<td>👩</td>
<td>👩🏻</td>
<td>👩🏼</td>
<td>👩🏽</td>
<td>👩🏾</td>
<td>👩🏿</td>
</tr>
</tbody>
</table>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// U+1F467 + U+1F3FD</div><div class="line">👧 + 🏽</div><div class="line"><span class="meta">&gt;</span><span class="bash"> 👧🏽</span></div></pre></td></tr></table></figure>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/E3F5C223-E3E9-4ECC-AD67-DF09D6D62DD6.png" alt=""></p>
<p>明显的，这类 emoji 的通过 <code>String.length</code> 获取长度为 <strong>4</strong></p>
<h3 id="ZWJ-sequences"><a href="#ZWJ-sequences" class="headerlink" title="ZWJ sequences"></a>ZWJ sequences</h3><p>接下来里了解一下 <strong>family emoji</strong>，譬如我们常见的：三口之家：👪，四口之家：👨‍👩‍👧‍👦，等等；其中值得注意的是：</p>
<ul>
<li>有一个 neutral family emoji (U+1F46A - ‍👪) 由一个码位表示</li>
<li>而其他 family emoji 都是 <strong>Zero-Width-Joiner sequence</strong>；它们由多个 emoji 和 zero-width-joiner (U+200D) 组合而成</li>
</ul>
<p>注：zero-width-joiner (U+200D) 这个码位就如同胶水一般将不同的 emoji 组合成一个 emoji；zero-width-joiner (U+200D) 只占一个长度<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// neutral family</div><div class="line">// U<span class="string">+1</span>F46A</div><div class="line">// length: 2</div><div class="line">&gt; 👪</div><div class="line"></div><div class="line">// ZWJ sequence: family (man, woman, boy)</div><div class="line">// U<span class="string">+1</span>F468 + U<span class="string">+200</span>D + U<span class="string">+1</span>F469 + U<span class="string">+200</span>D + U<span class="string">+1</span>F466</div><div class="line">// 👨‍ + U<span class="string">+200</span>D + 👩‍ + U<span class="string">+200</span>D + 👦</div><div class="line">// length: 8</div><div class="line">&gt; ‍👨‍👩‍👦</div><div class="line"></div><div class="line">// ZWJ sequence: family (woman, woman, girl)</div><div class="line">// U<span class="string">+1</span>F469 + U<span class="string">+200</span>D + U<span class="string">+1</span>F469 + U<span class="string">+200</span>D + U<span class="string">+1</span>F467</div><div class="line">// 👩‍ + U<span class="string">+200</span>D + 👩‍ U<span class="string">+200</span>D + 👧</div><div class="line">// length: 8</div><div class="line">&gt; ‍👩‍👩‍👧</div><div class="line"></div><div class="line">// ZWJ sequence: family (woman, woman, girl, girl)</div><div class="line">// U<span class="string">+1</span>F469 + U<span class="string">+200</span>D + U<span class="string">+1</span>F469 + U<span class="string">+200</span>D + U<span class="string">+1</span>F467 + U<span class="string">+200</span>D + U<span class="string">+1</span>F467</div><div class="line">// 👩‍ + U<span class="string">+200</span>D + 👩‍ + U<span class="string">+200</span>D + 👧‍ + U<span class="string">+200</span>D + 👧</div><div class="line">// length: 11</div><div class="line">&gt; ‍👩‍👩‍👧‍👧</div></pre></td></tr></table></figure></p>
<p>拆分，组合 family emoji：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[...<span class="string">'👨‍👩‍👦'</span>]</div><div class="line">&gt;  [<span class="string">"👨"</span>, <span class="string">"‍"</span>, <span class="string">"👩"</span>, <span class="string">"‍"</span>, <span class="string">"👦"</span>]</div><div class="line"></div><div class="line">var family =  [<span class="string">"👨"</span>, <span class="string">"‍"</span>, <span class="string">"👩"</span>, <span class="string">"‍"</span>, <span class="string">"👦"</span>]</div><div class="line">console.log(family.join(<span class="string">''</span>))</div><div class="line">&gt; <span class="string">"👨‍👩‍👦"</span></div></pre></td></tr></table></figure></p>
<h2 id="解决字符长度终极解决方案"><a href="#解决字符长度终极解决方案" class="headerlink" title="解决字符长度终极解决方案"></a>解决字符长度终极解决方案</h2><p>我们找到一段正则表达式，可以用于匹配 Unicode 字符；然后封装成 <a href="https://github.com/YingshanDeng/EmojiCharString" target="_blank" rel="external">EmojiCharString</a> 类库，详细介绍参考该仓库 README 👉</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://mathiasbynens.be/notes/javascript-unicode" target="_blank" rel="external">JavaScript has a Unicode problem</a><br><a href="https://www.contentful.com/blog/2016/12/06/unicode-javascript-and-the-emoji-family/" target="_blank" rel="external">Emoji.prototype.length — a tale of characters in Unicode</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/C0E1DEF1-900B-4372-B8CB-B166A1ABBA57.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;我们注意到在 Twitter，微博，谷歌翻译的输入框中输入 emoji 字符，都不能正确的判断字符个数。🤷‍&lt;br&gt;在阅读本文之前，需要先对 Unicode 编码有所了解，参考: &lt;a href=&quot;http://objcer.com/2017/05/21/JavaScript-Unicode/&quot;&gt;JavaScript Unicode 编码那些事&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Unicode" scheme="http://objcer.com/categories/Unicode/"/>
    
    
      <category term="unicode-emoji" scheme="http://objcer.com/tags/unicode-emoji/"/>
    
  </entry>
  
  <entry>
    <title>Cordova 开发环境 - Android 篇</title>
    <link href="http://objcer.com/2017/07/03/cordova-android-development-environment/"/>
    <id>http://objcer.com/2017/07/03/cordova-android-development-environment/</id>
    <published>2017-07-03T14:14:19.000Z</published>
    <updated>2017-07-20T11:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/android-banner.jpg" alt=""><br><a id="more"></a></p>
<h2 id="安装-IDE-Android-Studio"><a href="#安装-IDE-Android-Studio" class="headerlink" title="安装 IDE (Android Studio)"></a>安装 IDE (Android Studio)</h2><p>安装 Android Studio, SDK, Android Virtual Device (AVD，安卓模拟器)</p>
<ul>
<li>下载链接：<a href="https://developer.android.com/studio/index.html?hl=zh-cn" target="_blank" rel="external">Android Studio</a></li>
<li>下载安装全程需要<strong>翻墙</strong></li>
<li>安装 Android Studio 完成后，创建一个 HelloWorld 程序到模拟器中运行，这个过程中，按照提示进行下载安装即可</li>
</ul>
<h2 id="真机运行"><a href="#真机运行" class="headerlink" title="真机运行"></a>真机运行</h2><p>手机通过 USB 连接电脑后，运行时，选择对应的设备即可运行，以下罗列几点真机运行中遇到的问题和技巧</p>
<h3 id="解决：DELETE-FAILED-INTERNAL-ERROR-Error-while-Installing-APK"><a href="#解决：DELETE-FAILED-INTERNAL-ERROR-Error-while-Installing-APK" class="headerlink" title="解决：DELETE_FAILED_INTERNAL_ERROR Error while Installing APK"></a>解决：<em>DELETE_FAILED_INTERNAL_ERROR Error while Installing APK</em></h3><p>安卓真机（小米4C）通过 USB 连接电脑后，运行，可能会出现如下问题：<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/3B19ED97-CE3F-45A9-8518-C08D779F7FA3.png" alt=""><br>点击 OK 继续，会出现如下错误：<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DELETE_FAILED_INTERNAL_ERROR</div><div class="line"><span class="keyword">Error </span>while Installing APKs</div></pre></td></tr></table></figure></p>
<p>参考链接：<a href="https://stackoverflow.com/questions/38892270/delete-failed-internal-error-error-while-installing-apk" target="_blank" rel="external">DELETE_FAILED_INTERNAL_ERROR Error while Installing APK</a> 大致有两种解决方案：</p>
<ul>
<li>操作步骤：Android Studio &gt; Preferences &gt;  Build, Execution, Deployment &gt; Instant Run &gt; <strong>Uncheck : Enable Instant Run</strong>（此处理方式会禁用 Instant Run 功能）<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/03E0830C-F5BB-4EC5-AC41-50A604A3E532.png" alt=""></li>
<li>由于调试设备是小米，所以还可以：设置 &gt; 更多设置 &gt; 开发者选项 &gt; <strong>去掉：启动 MIUI 优化</strong> &gt; 关闭并重启</li>
</ul>
<h3 id="ADB-无线调试"><a href="#ADB-无线调试" class="headerlink" title="ADB 无线调试"></a>ADB 无线调试</h3><p>Android ADB 提供了无线调试的功能</p>
<blockquote>
<p><a href="https://developer.android.com/studio/command-line/adb.html?hl=zh-cn#Enabling" target="_blank" rel="external">Android 调试桥</a></p>
</blockquote>
<h4 id="解决：zsh-command-not-found-adb"><a href="#解决：zsh-command-not-found-adb" class="headerlink" title="解决：zsh: command not found: adb"></a>解决：<code>zsh: command not found: adb</code></h4><p>解决步骤：<br>1️⃣ 执行如下命令往 .bash_profile 添加两个路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"export PATH=\$PATH:/Users/<span class="variable">$&#123;USER&#125;</span>/Library/Android/sdk/platform-tools/"</span> &gt;&gt; ~/.bash_profile</div><div class="line"><span class="built_in">echo</span> <span class="string">"export PATH=\$PATH:/Users/<span class="variable">$&#123;USER&#125;</span>/Library/Android/sdk/tools/"</span> &gt;&gt; ~/.bash_profile</div></pre></td></tr></table></figure></p>
<p>执行后 <code>.bash_profile</code> 文件：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export PATH=<span class="variable">$PATH</span><span class="symbol">:/Users/YingshanDeng/Library/Android/sdk/platform-tools/</span></div><div class="line">export PATH=<span class="variable">$PATH</span><span class="symbol">:/Users/YingshanDeng/Library/Android/sdk/tools/</span></div></pre></td></tr></table></figure></p>
<p>2️⃣ 执行 <code>source .bash_profile</code> 使其生效，此时我们在终端中输入 <code>adb</code> 会发现该命令生效了<br>3️⃣ 由于我的终端使用的是 zsh，所以需要再处理一下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 打开 .zshrc</span></div><div class="line">open .zshrc</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 在文件末尾添加</span></div><div class="line">source ~/.bash_profile</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 保存，重启终端即可</span></div></pre></td></tr></table></figure></p>
<h4 id="AndroidWiFiADB-插件"><a href="#AndroidWiFiADB-插件" class="headerlink" title="AndroidWiFiADB 插件"></a>AndroidWiFiADB 插件</h4><p>直接使用还是不够方便，推荐使用 <strong>AndroidWiFiADB 插件</strong>，项目地址：<a href="https://github.com/pedrovgs/AndroidWiFiADB" target="_blank" rel="external">AndroidWiFiADB</a></p>
<p>安装方式：</p>
<ul>
<li>Preferences -&gt; Settings -&gt; Plugins-&gt; Browse Repositories</li>
<li>输入: Android WiFi ADB 进行搜索，安装后重启</li>
</ul>
<p>如何使用：</p>
<ul>
<li>先将手机通过 USB 连接电脑，而且保证手机和电脑连接同一 WiFi，点击 AndroidWiFiADB 插件按键，会在右下角弹气泡提示是否连接成功，连接成功后即可断开 USB 连接线，享受无线提示</li>
<li>在使用过程中，要确保手机和电脑连接的同一 WiFi</li>
<li>可以通过 AndroidWiFiADB 设备面板查看设备及设置连接状态</li>
</ul>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/36CDAE13-BEBC-42D2-9226-A53DF0CEE4B1.png" alt=""></p>
<h2 id="Chrome-远程调试模拟器-真机"><a href="#Chrome-远程调试模拟器-真机" class="headerlink" title="Chrome 远程调试模拟器/真机"></a>Chrome 远程调试模拟器/真机</h2><blockquote>
<p><a href="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/?hl=zh-cn" target="_blank" rel="external">远程调试 Android 设备使用入门</a></p>
</blockquote>
<p>操作步骤：</p>
<ul>
<li>随便在某个页面打开调试页面，如下图找到 <strong>Remote devices</strong><br><img src="http://7vikhl.com1.z0.glb.clouddn.com/8FA1EB72-12AE-4984-AA64-2C7022B1F00E.png" alt=""></li>
<li>确保已勾选 <strong>Discover USB devices</strong><br><img src="http://7vikhl.com1.z0.glb.clouddn.com/B378E60C-01E5-43AE-8EA1-02999501F241.png" alt=""></li>
<li>如下图找到对应的模拟器或者真机，点击 <strong>Inspect</strong> 按键就可以打开调试界面<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/917006D3-5881-4A6F-814F-0B3BB54383D7.png" alt=""></li>
</ul>
<h2 id="其他问题记录"><a href="#其他问题记录" class="headerlink" title="其他问题记录"></a>其他问题记录</h2><p>1、Android Studio 导入项目卡在 <em>Building gradle project info</em> 的解决方法：</p>
<ul>
<li><a href="http://www.jianshu.com/p/1311562bbfd4" target="_blank" rel="external">修改项目中gradle-wrapper.properties文件中的distributionUrl</a></li>
<li>从一个能打开项目根目录拷贝 <code>gradle</code> 文件夹覆盖当前项目根目录中的 <code>gradle</code> 文件夹</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/android-banner.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Cordova" scheme="http://objcer.com/categories/Cordova/"/>
    
    
  </entry>
  
  <entry>
    <title>高清屏一像素边框问题</title>
    <link href="http://objcer.com/2017/06/19/one-pixel-border/"/>
    <id>http://objcer.com/2017/06/19/one-pixel-border/</id>
    <published>2017-06-19T13:24:02.000Z</published>
    <updated>2017-09-06T14:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/retinaDisplayMagnified_1159x285@2x.png" alt=""><br><a id="more"></a></p>
<h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><p>在 iPhone 设备（Retina屏）上一像素边框设置有问题</p>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/F115E87F-990C-4957-B007-26F8B844287D.png" alt=""></p>
<p>如上图右所示，UI 要求效果的边框是 1px；如上图左所示，开发出来的效果边框为 2px（膜拜一下UI的像素眼 👍🏿）。设置边框的代码很简单，如下：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e1e0e0</span>;</div></pre></td></tr></table></figure></p>
<p>那问题该如何解决呢 🤔</p>
<h2 id="基本概念-术语"><a href="#基本概念-术语" class="headerlink" title="基本概念(术语)"></a>基本概念(术语)</h2><h3 id="device-pixel-physical-pixel"><a href="#device-pixel-physical-pixel" class="headerlink" title="device pixel / physical pixel"></a>device pixel / physical pixel</h3><p>设备像素（或物理像素）是<strong>显示屏中最小的物理单元</strong>。 每个像素点根据操作系统的指示设置自己的颜色和亮度。</p>
<h3 id="density-independent-pixel-DIP"><a href="#density-independent-pixel-DIP" class="headerlink" title="density-independent pixel(DIP)"></a>density-independent pixel(DIP)</h3><p>设备无关像素(也叫密度无关像素)，可以认为是<strong>计算机坐标系统中得一个点</strong>，这个点代表一个可以由程序使用的虚拟像素，然后由相关系统转换为物理像素。</p>
<h3 id="CSS-pixel"><a href="#CSS-pixel" class="headerlink" title="CSS pixel"></a>CSS pixel</h3><p>CSS 像素是浏览器使用的抽象单元，用于精确地，一致地在网页上绘制内容。 通常，<strong>CSS 像素被称为与设备无关的像素（DIP）</strong>。</p>
<h3 id="devicePixelRatio"><a href="#devicePixelRatio" class="headerlink" title="devicePixelRatio"></a>devicePixelRatio</h3><p>设备像素和设备无关像素之间存在着一定的对应关系，这就是 devicePixelRatio（设备像素比）</p>
<blockquote>
<p>devicePixelRatio is the ratio between physical pixels and device-independent pixels (dips) on the device.</p>
</blockquote>
<p><strong>devicePixelRatio = device pixels / dips</strong></p>
<p><code>devicePixelRatio</code> 值为 1 的屏幕称之为标准屏；目前，大部分移动设备都是高清屏，即 <code>devicePixelRatio</code> 值大于 1 的屏幕，对于苹果设备来说，我们经常听到 Retina 视网膜屏，其中 iPhone6/6s/7 的 <code>devicePixelRatio</code> 值为 2；而 iPhone6 plus/6s plus/7 plus 的 <code>devicePixelRatio</code> 值为 3。</p>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/iphone-6-plus-screen.jpg" alt=""></p>
<p>通过一个例子进一步理解其中的关系：<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/AF218F20-056F-4CB4-8A1F-2949C6913DCD.png" alt=""></p>
<p>假设我们需要绘制如下这个 <code>div</code> 节点，<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="attribute">height</span>=<span class="string">"2"</span> <span class="attribute">width</span>=<span class="string">"2"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<ul>
<li><code>div</code> 节点宽度和高度都是 <code>2px</code>，这里的 <code>2px</code> 指的就是 CSS pixel，而 CSS pixel 是抽象的单位，所以不管在标准屏，还是高清屏，其 CSS pixel 都是 <code>2px</code></li>
<li>1 CSS pixel 等同于 1 DIP</li>
<li>device pixels = devicePixelRatio * dips<ul>
<li>在标准屏（<code>devicePixelRatio</code> 值为 1）中绘制这个节点时，节点的设备像素为 <code>2px * 2px</code></li>
<li>在高清屏（<code>devicePixelRatio</code> 值为 2）中绘制这个节点时，节点的设备像素为 <code>4px * 4px</code></li>
</ul>
</li>
<li>高清屏中节点的面积是标准屏中的 4 倍</li>
</ul>
<p>在网页中，我们可以通过 JS 获取 <code>devicePixelRatio</code><br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.devicePixelRatio)</div></pre></td></tr></table></figure></p>
<p>在 CSS 媒体查询（media query）中也可以用到 <code>devicePixelRatio</code><br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@media</span> only screen and (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>),</div><div class="line"><span class="variable">@media</span> only screen and (<span class="attribute">min-device-pixel-ratio</span>: <span class="number">2</span>) &#123;</div><div class="line">	<span class="comment">/* TODO ... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="解决一像素边框问题"><a href="#解决一像素边框问题" class="headerlink" title="解决一像素边框问题"></a>解决一像素边框问题</h2><h3 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h3><p>了解了以上这些基本概念，我就知道设置边框一像素 <code>border: 1px solid #e1e0e0;</code> ，在高清屏中展示大于一像素的原因了，因为 <code>devicePixelRatio</code> 这个家伙导致的，由此我们会快就写出如下解决方案：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e1e0e0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@media</span> only screen and (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>),</div><div class="line"><span class="variable">@media</span> only screen and (<span class="attribute">min-device-pixel-ratio</span>: <span class="number">2</span>) &#123;</div><div class="line">    <span class="selector-tag">div</span> &#123;</div><div class="line">        <span class="attribute">border</span>: <span class="number">0.5px</span> solid <span class="number">#e1e0e0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@media</span> only screen and (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">3</span>),</div><div class="line"><span class="variable">@media</span> only screen and (<span class="attribute">min-device-pixel-ratio</span>: <span class="number">3</span>) &#123;</div><div class="line">    <span class="selector-tag">div</span> &#123;</div><div class="line">        <span class="attribute">border</span>: <span class="number">0.3333px</span> solid <span class="number">#e1e0e0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在 <code>devicePixelRatio</code> 为 2 的时候，设置边框为 <code>0.5px</code>；在 <code>devicePixelRatio</code> 为 2 的时候，设置边框为 <code>0.3333px</code>。但是要注意有些 Retina 屏的浏览器可能不认识 <code>0.5px</code> 的边框，将会把它解析成 <code>0px</code>，这样就没有边框了。</p>
<h3 id="终极解决方案"><a href="#终极解决方案" class="headerlink" title="终极解决方案"></a>终极解决方案</h3><p>利用伪元素 <code>before/after</code>  <code>transform</code> 来实现，其浏览器兼容性非常好 👍<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"onePixelBorder"</span>&gt;</div><div class="line">    One Pixel Border</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/9C362BA4-4C66-4590-BED9-6DCE84EA2232.png" alt=""></p>
<p>单一边框：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.onePixelBorder</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#2C2C2C</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.onePixelBorder</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#2C2C2C</span>;</div><div class="line">    <span class="attribute">-webkit-transform-origin</span>: center bottom;</div><div class="line">    <span class="attribute">transform-origin</span>: center bottom;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> only screen and (-webkit-min-device-pixel-ratio: <span class="number">2</span>),</div><div class="line">@media only screen and (min-device-pixel-ratio: <span class="number">2</span>) &#123;</div><div class="line">    <span class="selector-class">.onePixelBorder</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scaleY</span>(.5);</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(.5);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> only screen and (-webkit-min-device-pixel-ratio: <span class="number">3</span>),</div><div class="line">@media only screen and (min-device-pixel-ratio: <span class="number">3</span>) &#123;</div><div class="line">    <span class="selector-class">.onePixelBorder</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scaleY</span>(.333);</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(.333);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>四边边框：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.onePixelBorder</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#2C2C2C</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.onePixelBorder</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#2C2C2C</span>;</div><div class="line">    <span class="attribute">-webkit-transform-origin</span>: left top;</div><div class="line">    <span class="attribute">transform-origin</span>: left top;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> only screen and (-webkit-min-device-pixel-ratio: <span class="number">2</span>),</div><div class="line">@media only screen and (min-device-pixel-ratio: <span class="number">2</span>) &#123;</div><div class="line">    <span class="selector-class">.onePixelBorder</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">200%</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">200%</span>;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(.5);</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(.5);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> only screen and (-webkit-min-device-pixel-ratio: <span class="number">3</span>),</div><div class="line">@media only screen and (min-device-pixel-ratio: <span class="number">3</span>) &#123;</div><div class="line">    <span class="selector-class">.onePixelBorder</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">300%</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">300%</span>;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(.333);</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(.333);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意到以上通过 CSS 媒体查询获知当前屏幕的 <code>devicePixelRatio</code>，然后针对不同的 <code>devicePixelRatio</code> 进行处理。还有一种另一种方式，通过 JS 在 HTML 节点添加 class 表征不同的 <code>devicePixelRatio</code>，例如在 framework7 框架中， HTML 节点就添加了 <code>devicePixelRatio</code> 有关的 class:</p>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/BED6EAE5-B9D5-45B2-A22E-A1B698ECFED1.png" alt=""></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.smashingmagazine.com/2012/08/towards-retina-web/" target="_blank" rel="external">Towards A Retina Web</a><br><a href="https://www.quirksmode.org/blog/archives/2012/07/more_about_devi.html" target="_blank" rel="external">More about devicePixelRatio</a><br><a href="https://jinlong.github.io/2015/05/24/css-retina-hairlines/" target="_blank" rel="external">Retina屏的移动设备如何实现真正1px的线？</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/retinaDisplayMagnified_1159x285@2x.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://objcer.com/categories/CSS/"/>
    
    
      <category term="devicePixelRatio" scheme="http://objcer.com/tags/devicePixelRatio/"/>
    
  </entry>
  
  <entry>
    <title>Cordova 代码热更新</title>
    <link href="http://objcer.com/2017/06/18/cordova-hot-code-push/"/>
    <id>http://objcer.com/2017/06/18/cordova-hot-code-push/</id>
    <published>2017-06-17T16:30:29.000Z</published>
    <updated>2017-06-17T16:32:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/app-store.png" alt=""></p>
<p>基于 Cordova 框架能将网页应用 (js, html, css, 图片等) 打包成 App。当 App 在应用商店上架后，如何快速更新是我们需要考虑的问题。🤖</p>
<ul>
<li>本地打包新版本 App 发布到应用商店，但这中发布流程耗费时间，尤其是 Apple Store</li>
<li>应用加载网络资源，这样 App 展示的内容就可以保证是最新的，但当应用断网时，应用就无法正常使用</li>
</ul>
<p>我们能想的这两种方式都存在的很大的弊端，不适合实际应用！</p>
<a id="more"></a>
<h2 id="插件-Cordova-Hot-Code-Push-CHCP"><a href="#插件-Cordova-Hot-Code-Push-CHCP" class="headerlink" title="插件 Cordova Hot Code Push (CHCP)"></a>插件 Cordova Hot Code Push (CHCP)</h2><p>插件 <strong><a href="https://github.com/nordnet/cordova-hot-code-push" target="_blank" rel="external">Cordova Hot Code Push</a></strong> 正是针对 Cordava 应用如何快速更新问题而提供的解决方案，可以自动更新 web 相关的静态文件。</p>
<blockquote>
<p>该插件提供了详细的 wiki 文档，请参考：<a href="https://github.com/nordnet/cordova-hot-code-push/wiki" target="_blank" rel="external">wiki 文档</a></p>
</blockquote>
<h2 id="App-Store-支持么"><a href="#App-Store-支持么" class="headerlink" title="App Store 支持么"></a>App Store 支持么</h2><blockquote>
<p>近日，苹果App Store审核团队向一些开发者下最后通牒：2017年6月12日之前移除所有热更新相关代码、框架或SDK，并重新提交版本。如果不作调整，App可能会从App Store下架。</p>
</blockquote>
<p>苹果应用商店已经禁止使用类似 JSPatch 等热修复的框架或者SDK，那么这个插件提供的代码热更新功能是否违法这一规定呢? 🤔<br>📌 答案是否定的！此插件提供的代码热更新是 web 静态文件，苹果是允许这一做法的。但有两点值得注意：</p>
<ul>
<li>① 不能明显告知用户有新版本可用，询问用户是否需要更新到最新代码。这一做法会使用户产生困惑，这种更新方式和通过 App Store 更新有何区别。所以正确的做法是，在应用启动的时候，下载和安装热更新代码；或者在某个时机下载热更新代码，在应用下次打开时进行安装</li>
<li>② 如果通过此插件进行代码热更新后，应用功能发生巨大变化，譬如原来是一个计算器应用，代码热更新后，变成了一个音乐播放器，这种欺骗用户的做法也是会被苹果拒绝的</li>
</ul>
<h2 id="添加插件到项目中"><a href="#添加插件到项目中" class="headerlink" title="添加插件到项目中"></a>添加插件到项目中</h2><p>1、下载插件<br><em>要求 Cordova 版本 5.0+</em><br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">cordova</span> plugin <span class="keyword">add </span>cordova-hot-<span class="meta">code</span>-<span class="keyword">push-plugin </span>--save</div></pre></td></tr></table></figure></p>
<p>2、下载插件的命令行工具 <a href="https://github.com/nordnet/cordova-hot-code-push-cli" target="_blank" rel="external">cordova-hot-code-push-cli</a><br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cordova-hot-code-<span class="keyword">push</span>-<span class="keyword">cli</span></div></pre></td></tr></table></figure></p>
<p>该命令行工具可帮助我们自动生成配置文件 <code>chcp.json</code> 和 <code>chcp.manifest</code>，同时还提供了一些其他功能，详细可参考其 README。</p>
<p>3、下载插件后，执行 <code>cordova platform add ios</code> 时可能会遇到如下报错：<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Error: </span>Cannot find module 'xml2js/lib/processors'</div></pre></td></tr></table></figure></p>
<p>参考 <a href="https://github.com/nordnet/cordova-hot-code-push/issues/35" target="_blank" rel="external">xml2js is not installed</a> 解决方法很简单：<code>npm install xml2js</code></p>
<h2 id="热更新相关配置"><a href="#热更新相关配置" class="headerlink" title="热更新相关配置"></a>热更新相关配置</h2><p>Cordova Hot Code Push 下载安装到项目中后，需要对其进行相关的配置才能让其工作。</p>
<h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><p>Cordova Hot Code Push 热更新插件需要两个配置文件：</p>
<ul>
<li><strong>Application config：</strong><code>chcp.json</code> 包含发布相关信息：热更新代码版本号，应用 native side 版本号等等</li>
<li><strong>Content manifest：</strong><code>chcp.manifest</code> 包含项目热更新代码(静态)文件信息：文件名和文件哈希值</li>
</ul>
<p>这两个配置文件对于插件的运行缺一不可，前者描述了热更新代码的版本信息，后者提供了热更新代码文件的变更信息。借助 <code>cordova-hot-code-push-cli</code> 这个命令行工具可以辅助我们创建这两个配置文件。</p>
<h4 id="Application-config"><a href="#Application-config" class="headerlink" title="Application config"></a>Application config</h4><blockquote>
<p><a href="https://github.com/nordnet/cordova-hot-code-push/wiki/Application-config" target="_blank" rel="external">Application config</a> holds information about the current release of the web project.</p>
</blockquote>
<p><code>chcp.json</code> 置于 <code>www</code> 目录根目录，例子如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"wps-*****"</span>,</div><div class="line">  <span class="attr">"content_url"</span>: <span class="string">"https://kss.ksyun.com/*****/*****/"</span>,</div><div class="line">  <span class="attr">"ios_identifier"</span>: <span class="string">"326CN*****"</span>,</div><div class="line">  <span class="attr">"android_identifier"</span>: <span class="string">"com.**********.*****.*****.*****.*****"</span>,</div><div class="line">  <span class="attr">"update"</span>: <span class="string">"resume"</span>,</div><div class="line">  <span class="attr">"release"</span>: <span class="string">"2017.06.07-16.30.20"</span>,</div><div class="line">  <span class="attr">"min_native_interface"</span>: <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>1、配置项<br>① <code>name</code> 项目名称<br>② <code>content_url</code> web 项目文件在服务器上的存储路径（即 www 目录在云存储中的目录路径），热更新插件将此 URL 作为 base url，用于下载配置文件和项目更新文件（必需的配置项）<br>③ <code>release</code> 描述 web 项目版本号，每一次发布的版本号必须唯一（默认使用时间戳，格式为：yyyy.MM.dd-HH.mm.ss），插件是<strong>将版本号进行字符串相等比较</strong>来判断是否存在新版本（必需的配置项）<br>④ <code>min_native_interface</code></p>
<blockquote>
<p>Minimum version of the native side that is required to run this web content</p>
</blockquote>
<ul>
<li>cordova 项目主要包含两部分：web content 和 native side。前者是网页内容，后者是 cordova 插件，为网页提供原生 API 支持，web content 的运行是基于 native side。</li>
<li>该配置项指明 web content 运行时 native side 的最低版本。在 native side 代码有变更后（cordova 插件新增/删除，native side 版本号更新），为了确保 web content 能正常运行，需要更新 <code>min_native_interface</code> 的值</li>
</ul>
<p>在应用 <code>config.xml</code> 配置中可以定义了 native side 的版本号，例如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">chcp</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">native-interface</span> <span class="attr">version</span>=<span class="string">"5"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">chcp</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>例如当前项目 native side 的版本号是5：</p>
<ul>
<li>如果服务器上配置文件 <code>chcp.json</code> 中的 <code>min_native_interface</code> 值为 5，那么符合要求，热更新后的 web content 能够在正常运行</li>
<li>如果服务器上配置文件 <code>chcp.json</code> 中的 <code>min_native_interface</code> 值为 10，高于 <code>config.xml</code> 文件中 <code>&lt;native-interface /&gt;</code>，那么热更新将无法正常进行。此时，插件会提示错误 <code>chcp_updateLoadFailed</code>，提示应用需要更新升级</li>
</ul>
<p>⑤ <code>update</code> 何时触发进行安装（install）代码热更新<br>代码热更新涉及两个主要过程：fetch update 和 install update。前者获取热更新变更文件，后者将获取到的更新文件安装到 App 中生效。此字段是针对后者，何时 install update，可选值：</p>
<ul>
<li><code>start</code>：应用启动，默认项（install update when application is launched）</li>
<li><code>resume</code>：应用从后台恢复（install the update when application is resumed from background state）</li>
<li><code>now</code>：下载更新后立即执行（install update as soon as it has been downloaded）</li>
</ul>
<p>当然也可以禁用自动 install update，手动调用相关 API 进行 install<br>⑥ <code>android_identifier</code> / <code>ios_identifier</code></p>
<ul>
<li><code>android_identifier</code>: Package name of the Android version of the application</li>
<li><code>ios_identifier</code>: Identification number of the application<br>用于跳转到 Google Play Store 或者 App Store 该应用页面</li>
</ul>
<p>2、如何生成该文件：</p>
<ul>
<li>在 cordova 项目根目录执行 <code>cordova-hcp init</code> ，会通过命令行交互的方式，提示输入配置有关信息，创建该文件，会在项目根目录创建一个默认 Application config 文件 <code>cordova-hcp.json</code></li>
<li>然后在每次应用打包时，再执行 <code>cordova-hcp build</code> 即可在 web 项目 <code>www</code> 根目录生成一个 <code>chcp.json</code> 文件。</li>
</ul>
<h4 id="Content-manifest"><a href="#Content-manifest" class="headerlink" title="Content manifest"></a>Content manifest</h4><blockquote>
<p>Content manifest describes the state of the files inside your web project.</p>
</blockquote>
<p>通过执行 <code>cordova-hcp build</code> 在 <code>www</code> 根目录自动生成 <code>chcp.manifest</code> 文件<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"file"</span>: <span class="string">"import.html"</span>,</div><div class="line">    <span class="attr">"hash"</span>: <span class="string">"fc9301d4bd7381ba6033aa51884ed2dd"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"file"</span>: <span class="string">"index.html"</span>,</div><div class="line">    <span class="attr">"hash"</span>: <span class="string">"f73630f62a531ab6c41cd067eb4f9b07"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"file"</span>: <span class="string">"lib/lib.min.js"</span>,</div><div class="line">    <span class="attr">"hash"</span>: <span class="string">"6ecb0251f4c54f80586d9059dfc61de8"</span></div><div class="line">  &#125;,</div><div class="line">  ...</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><code>chcp.manifest</code> 文件中包含的是 web content 静态文件信息，每一个项都包括两个字段：</p>
<ul>
<li><code>file</code>: 相对于 <code>www</code> 目录的文件路径</li>
<li><code>hash</code>: 文件的 MD5 哈希值，用于判断文件是否发生变更</li>
</ul>
<p>基于 <code>chcp.manifest</code> 文件</p>
<ul>
<li>在 fetch update 阶段，从服务器上获取新增、修改文件</li>
<li>在 install update 阶段，移除被删除文件</li>
</ul>
<h3 id="Cordova-config-xml-配置"><a href="#Cordova-config-xml-配置" class="headerlink" title="Cordova config.xml 配置"></a>Cordova <code>config.xml</code> 配置</h3><p>Cordova 项目的 <code>config.xml</code> 文件用于设置项目配置选项，Cordova Hot Code Push 热更新插件的配置项也需要在该文件中进行相应的配置。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">chcp</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">config-file</span> <span class="attr">url</span>=<span class="string">"https://kss.ksyun.com/********/chcp.json"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">auto-download</span> <span class="attr">enabled</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">auto-install</span> <span class="attr">enabled</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">native-interface</span> <span class="attr">version</span>=<span class="string">"1"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">chcp</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li><code>config-file</code>：配置文件 <code>chcp.json</code> 从服务器上加载的路径（必须的配置项）</li>
<li><code>auto-download</code>：是否自动下载热更新代码，默认是 true</li>
<li><code>auto-install</code>：是否自动安装热更新代码，默认是 true</li>
<li><code>native-interface</code>：当前 native side 的版本号</li>
</ul>
<p>可以禁用自动下载，安装热更新代码，通过手动调用执行。</p>
<h2 id="代码热更新原理"><a href="#代码热更新原理" class="headerlink" title="代码热更新原理"></a>代码热更新原理</h2><h3 id="热更新流程"><a href="#热更新流程" class="headerlink" title="热更新流程"></a>热更新流程</h3><p><img src="http://7vikhl.com1.z0.glb.clouddn.com/update-workflow.png" alt=""></p>
<ul>
<li>① 应用启动</li>
<li>② 热更新插件初始化，并在后台加载更新模块 (update loader)</li>
<li>③ 更新模块 (update loader) 从 Cordova 项目配置 <code>config.xml</code> 文件中获取 <code>config-file</code> （热更新插件配置文件 <code>chcp.json</code> 的加载路径），然后加载配置文件 <code>chcp.json</code>，获取其中的 <code>release</code> 版本号，对比当前的版本号，若二者不同，说明有新版本，执行下一步</li>
<li>④ 更新模块 (update loader) 从 <code>chcp.json</code> 配置文件中获取 <code>content_url</code> 作为 base url，然后加载 <code>chcp.manifest</code> 文件，或者新版本文件变更信息</li>
<li>⑤ 更新模块 (update loader) 根据 <code>content_url</code> 作为 base url，下载所有变更、新增文件</li>
<li>⑥ 如果一切顺利， 更新模块 (update loader) 发送通知，该更新已准备好进行安装</li>
<li>⑦ 安装更新，应用重定向到新版本页面</li>
</ul>
<h3 id="Cordova-web-project-存储与更新"><a href="#Cordova-web-project-存储与更新" class="headerlink" title="Cordova web project 存储与更新"></a>Cordova web project 存储与更新</h3><p>Cordova 项目中都包含一个 <code>www</code> 目录，存储网页静态文件，Cordova 打包移动应用时，会将其拷贝到各自的项目目录，同时会被打包到应用中。</p>
<ul>
<li>Android: platforms/android/assets/www.</li>
<li>iOS: platforms/ios/www.</li>
</ul>
<p><code>www</code> 目录打包到应用中之后，我们就没办法对其进行更新了，因为只有可读权限。为了解决这一问题，在应用第一次启动的时候，从应用 bundle 中加载网页内容的同时，将 <code>www</code> 目录拷贝到外部目录中，在后续应用启动时，都从这个外部存储的静态文件中加载文件，而对于外部的这个存储目录，我们就有读写权限，这样就为我们动态更新网页代码提供了可能。</p>
<p>在 safari 调试页面执行 <code>cordova.file.applicationStorageDirectory</code> 可以得到应用的存储路径，点击可以打开 Finder 目录。<br>从 <code>Library/Application Support</code> 目录下就可以找到存储 web content 的外部目录。<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/chcp-external-folder.png" alt=""><br><img src="http://7vikhl.com1.z0.glb.clouddn.com/3CA8CB1D-C26D-4F98-951C-DBE94650CA5D.png" alt=""></p>
<p>Cordova Hot Code Push 插件为每一个版本内容都创建了一个对应的目录，以配置文件 <code>chcp.json</code> 中 <code>release</code> 字段值为目录名，存放不同版本 <code>www</code> 目录中的静态文件，这种处理方式的好处是：</p>
<ul>
<li>避免了文件缓存问题。例如 iOS UIWebView 缓存 css 文件，即使刷新页面，也不会清除缓存，除非重启应用才能强制清除缓存。不同版本置于不同的目录，由于加载路径不同，这样就可以解决文件的缓存问题</li>
<li>避免在更新代码文件时，和当前已有文件出现冲突</li>
<li>方便回滚到前一个版本</li>
</ul>
<p>🤖 下面了解一下，获取更新内容和安装更新内容时都发生了什么？</p>
<p><strong>1、获取更新内容</strong></p>
<ul>
<li>根据 <code>release</code> 版本号，创建一个新的目录</li>
<li>在新目录中，创建 <code>update</code> 目录，根据 <code>chcp.manifest</code> 文件，将所有变更、新增文件下载到该目录中</li>
<li>新版本对应的 <code>chcp.json</code> 和 <code>chcp.manifest</code> 文件也会置于 <code>update</code> 目录中</li>
</ul>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/926064F1-2CF2-4871-90B6-791BA0059C13.png" alt=""></p>
<p><strong>2、安装更新内容</strong></p>
<ul>
<li>将当前版本对应目录下的 <code>www</code> 目录拷贝到新版本对应的目录下</li>
<li>在新版本对应目录下，将 <code>update</code> 目录中变更、新增文件拷贝到 <code>www</code> 目录中，同时根据 <code>chcp.manifest</code> 移除被删除文件</li>
<li>移除 <code>update</code> 目录</li>
<li>应用重定向到新版本目录下加载网页内容</li>
</ul>
<h2 id="插件-JS-接口"><a href="#插件-JS-接口" class="headerlink" title="插件 JS 接口"></a>插件 JS 接口</h2><p>默认情况下，Cordova Hot Code Push (CHCP) 插件不需要额外的代码，就可以自动执行 <code>checking-&gt;downloading-&gt;installation</code> 这个更新循环。当然也可以通过其提供的接口来控制这更新流程，这时，我们需要在项目 <code>config.xml</code> 文件中配置 <code>auto-download</code> 和 <code>auto-install</code> 为 <code>false</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">chcp</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">config-file</span> <span class="attr">url</span>=<span class="string">"https://kss.ksyun.com/******/chcp.json"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">auto-download</span> <span class="attr">enabled</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">auto-install</span> <span class="attr">enabled</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">native-interface</span> <span class="attr">version</span>=<span class="string">"1"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">chcp</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><p>Cordova Hot Code Push 插件提供了一系列事件监听，方便我们对不同情况进行不同的处理。例如：<code>chcp_updateInstalled</code> 事件，当更新安装完成时会发出这个通知；<code>chcp_updateInstallFailed</code> 事件，当更新安装失败时发出这个通知，等等。</p>
<p>值得注意的是，需要在 <code>deviceready</code> 事件回调后，才进行 CHCP 插件的事件监听注册。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = &#123;</div><div class="line"></div><div class="line">  <span class="comment">// Application Constructor</span></div><div class="line">  initialize: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.bindEvents();</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// Bind any events that are required.</span></div><div class="line">  <span class="comment">// Usually you should subscribe on 'deviceready' event to know, when you can start calling cordova modules</span></div><div class="line">  bindEvents: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'deviceready'</span>, <span class="keyword">this</span>.onDeviceReady, <span class="literal">false</span>);</div><div class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'chcp_updateIsReadyToInstall'</span>, <span class="keyword">this</span>.onUpdateReady, <span class="literal">false</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// deviceready Event Handler</span></div><div class="line">  onDeviceReady: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Device is ready for work'</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// chcp_updateIsReadyToInstall Event Handler</span></div><div class="line">  onUpdateReady: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Update is ready for installation'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">app.initialize();</div></pre></td></tr></table></figure></p>
<p>详细事件监听列表参考文档：<a href="https://github.com/nordnet/cordova-hot-code-push/wiki/Listen-for-update-events" target="_blank" rel="external">Listen for update events</a></p>
<h3 id="获取-安装更新"><a href="#获取-安装更新" class="headerlink" title="获取/安装更新"></a>获取/安装更新</h3><p>① fetch update <code>chcp.fetchUpdate</code><br>调用 API 从服务器中获取更新<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchUpdate</span><span class="params">(cb)</span></span> &#123;</div><div class="line">    var options = &#123;</div><div class="line">        <span class="string">'config-file'</span>: <span class="string">'https://kss.ksyun.com/******/chcp.json'</span></div><div class="line">    &#125;;</div><div class="line">    chcp.fetchUpdate(updateCallback, options);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">updateCallback</span><span class="params">(error, data)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">error</span>) &#123;</div><div class="line">            console.<span class="built_in">log</span>(<span class="string">'--fetchUpdate error--'</span>, <span class="built_in">error</span>.code, <span class="built_in">error</span>.description);</div><div class="line">        &#125;</div><div class="line">        console.<span class="built_in">log</span>(<span class="string">'--fetchUpdate--'</span>, data, data.<span class="built_in">config</span>);</div><div class="line">        cb &amp;&amp; cb(<span class="built_in">error</span>, data);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>② install update <code>chcp.installUpdate</code><br>调用 API 安装更新<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">installUpdate</span><span class="params">(cb)</span></span> &#123;</div><div class="line">    chcp.installUpdate(installationCallback);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">installationCallback</span><span class="params">(error)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">error</span>) &#123;</div><div class="line">            console.<span class="built_in">log</span>(<span class="string">'Failed to install the update with error code: '</span> + <span class="built_in">error</span>.code);</div><div class="line">            console.<span class="built_in">log</span>(<span class="built_in">error</span>.description);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            console.<span class="built_in">log</span>(<span class="string">'Update installed!'</span>);</div><div class="line">        &#125;</div><div class="line">        cb &amp;&amp; cb(<span class="built_in">error</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在安装更新之前，还需要检测是否有更新可用于安装<br><code>chcp.isUpdateAvailableForInstallation</code><br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkIsUpdateAvailableForInstallation</span><span class="params">(cb)</span></span> &#123;</div><div class="line">    chcp.isUpdateAvailableForInstallation(callbackMethod);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callbackMethod</span><span class="params">(error, data)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">error</span>) &#123;</div><div class="line">            console.<span class="built_in">log</span>(<span class="string">'No update was loaded =&gt; nothing to install'</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            console.<span class="built_in">log</span>(<span class="string">'Current content version: '</span> + data.currentVersion);</div><div class="line">            console.<span class="built_in">log</span>(<span class="string">'Ready to be installed:'</span> + data.readyToInstallVersion);</div><div class="line">        &#125;</div><div class="line">        cb &amp;&amp; cb(<span class="built_in">error</span>, data);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="获取版本信息"><a href="#获取版本信息" class="headerlink" title="获取版本信息"></a>获取版本信息</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function getVersionInfo(cb) &#123;</div><div class="line">    chcp.getVersionInfo((err, <span class="built_in">data</span>) =&gt; &#123;</div><div class="line">        console.<span class="keyword">log</span>(<span class="string">'Current web version: '</span> + <span class="built_in">data</span>.currentWebVersion);</div><div class="line">        console.<span class="keyword">log</span>(<span class="string">'Previous web version: '</span> + <span class="built_in">data</span>.previousWebVersion);</div><div class="line">        console.<span class="keyword">log</span>(<span class="string">'Loaded and ready for installation web version: '</span> + <span class="built_in">data</span>.readyToInstallWebVersion);</div><div class="line">        console.<span class="keyword">log</span>(<span class="string">'Application version name: '</span> + <span class="built_in">data</span>.appVersion);</div><div class="line">        console.<span class="keyword">log</span>(<span class="string">'Application build version: '</span> + <span class="built_in">data</span>.buildVersion);</div><div class="line"></div><div class="line">        cb &amp;&amp; cb(err, <span class="built_in">data</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h3><p>在下载，安装更新过程中都有可能出现错误，详细的错误代码参考：<a href="https://github.com/nordnet/cordova-hot-code-push/wiki/Error-codes" target="_blank" rel="external">Error codes</a></p>
<h2 id="请求到应用商店进行-APP-升级"><a href="#请求到应用商店进行-APP-升级" class="headerlink" title="请求到应用商店进行 APP 升级"></a>请求到应用商店进行 APP 升级</h2><p>插件配置文件 <code>chcp.json</code> 中 <code>min_native_interface</code> 选项是网页内容执行时要求 native side 最低版本号。每一次热更新过程中，都会去检查这个逻辑，判断当前 native side 的版本是否符合要求。如果当前 APP 中的 native side 版本号低于 <code>chcp.json</code> 中 <code>min_native_interface</code> 的选项值，那么执行热更新就会提示错误：<code>chcp.error.APPLICATION_BUILD_VERSION_TOO_LOW</code>，这个时候，我们应当提示用户前往应用商店对 APP 进行升级。</p>
<p>恰当的处理方式是，在出现 <code>chcp.error.APPLICATION_BUILD_VERSION_TOO_LOW</code> 错误时，弹框提示用户前往应用商店进行升级，弹框有两个按键：一个点击后跳转到应用商店该 APP 对应下载页面；另一个点击后关闭弹框。插件也提供了 API 处理这个过程，我们只需：</p>
<ul>
<li>在 <code>chcp.json</code> 配置文件中设置 <code>android_identifier</code> 和 <code>ios_identifier</code></li>
<li>调用 <code>chcp.requestApplicationUpdate</code> 方法</li>
</ul>
<p>监听 <code>chcp_updateLoadFailed</code> 事件，判断错误代码为 <code>chcp.error.APPLICATION_BUILD_VERSION_TOO_LOW</code> 时，调用 <code>chcp.requestApplicationUpdate</code> 方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = &#123;</div><div class="line"></div><div class="line">  <span class="comment">// Application Constructor</span></div><div class="line">  initialize: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.bindEvents();</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// Bind any events that are required.</span></div><div class="line">  <span class="comment">// Usually you should subscribe on 'deviceready' event to know, when you can start calling cordova modules</span></div><div class="line">  bindEvents: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'deviceready'</span>, <span class="keyword">this</span>.onDeviceReady, <span class="literal">false</span>);</div><div class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'chcp_updateLoadFailed'</span>, <span class="keyword">this</span>.onUpdateLoadError, <span class="literal">false</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// deviceready Event Handler</span></div><div class="line">  onDeviceReady: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">onUpdateLoadError</span>: <span class="function"><span class="keyword">function</span>(<span class="params">eventData</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> error = eventData.detail.error;</div><div class="line">    <span class="keyword">if</span> (error &amp;&amp; error.code == chcp.error.APPLICATION_BUILD_VERSION_TOO_LOW) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Native side update required'</span>);</div><div class="line">        <span class="keyword">var</span> dialogMessage = <span class="string">'New version of the application is available on the store. Please, update.'</span>;</div><div class="line">        chcp.requestApplicationUpdate(dialogMessage, <span class="keyword">this</span>.userWentToStoreCallback, <span class="keyword">this</span>.userDeclinedRedirectCallback);</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">userWentToStoreCallback</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// user went to the store from the dialog</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">userDeclinedRedirectCallback</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// User didn't want to leave the app.</span></div><div class="line">    <span class="comment">// Maybe he will update later.</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">app.initialize();</div></pre></td></tr></table></figure></p>
<h2 id="Usage-Limitations"><a href="#Usage-Limitations" class="headerlink" title="Usage Limitations"></a><a href="https://github.com/nordnet/cordova-hot-code-push/wiki/Usage-Limitations" target="_blank" rel="external">Usage Limitations</a></h2><p><strong>1、Don’t rename/delete/move your index page</strong><br>Cordova 项目 <code>config.xml</code> 文件中都会定义一个入口页面 <code>index.html</code>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">content</span> <span class="attr">src</span>=<span class="string">"index.html"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>应用启动的时候，就会加载 <code>index.html</code> 页面作为入口，在代码热更新过程中，这是唯一不能删除，移动和重命名的文件，否则，代码热更新后，应用就无法正常加载到 <code>index.html</code> 入口页面，所以会出错。</p>
<p>诚然，如果你需要重命名，或者修改其存储路径，那么需要在 <code>config.xml</code> 文件中修改 <code>content</code> 配置。</p>
<p><strong>2、Do not clean plugin’s inner preferences with cordova-plugin-nativestorage</strong><br>cordova-plugin-nativestorage 插件提供了读写本地存储数据的能力，例如在 iOS 中对应的本地存储是 <code>NSUserDefault</code>，CHCP 热更新插件在其中存储了一些属性。</p>
<p>调用 cordova-plugin-nativestorage 插件中的 <code>NativeStorage.clear()</code> 方法会清除本地存储数据，这就会影响到 CHCP 插件的正常运行，导致下一次应用启动时加载的是应用 bundle 中 <code>www</code> 目录中的网页内容，而非外部目录存储的当前版本网页内容。</p>
<h2 id="将-www-目录打包上传到服务器或者云存储目录"><a href="#将-www-目录打包上传到服务器或者云存储目录" class="headerlink" title="将 www 目录打包上传到服务器或者云存储目录"></a>将 <code>www</code> 目录打包上传到服务器或者云存储目录</h2><p>新版本发布时，都需要执行如下处理：</p>
<ul>
<li>对 <code>www</code> 目录下的静态文件进行打包，包括代码压缩，合并等等</li>
<li>执行 <code>cordova-hcp build</code> 生成 <code>chcp.json</code> 和 <code>chcp.manifest</code> 文件</li>
<li>将 <code>www</code> 目录下的静态文件上传至服务器或者云存储目录</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/app-store.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;基于 Cordova 框架能将网页应用 (js, html, css, 图片等) 打包成 App。当 App 在应用商店上架后，如何快速更新是我们需要考虑的问题。🤖&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地打包新版本 App 发布到应用商店，但这中发布流程耗费时间，尤其是 Apple Store&lt;/li&gt;
&lt;li&gt;应用加载网络资源，这样 App 展示的内容就可以保证是最新的，但当应用断网时，应用就无法正常使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们能想的这两种方式都存在的很大的弊端，不适合实际应用！&lt;/p&gt;
    
    </summary>
    
      <category term="Cordova" scheme="http://objcer.com/categories/Cordova/"/>
    
    
      <category term="Cordova Hot Code Push" scheme="http://objcer.com/tags/Cordova-Hot-Code-Push/"/>
    
  </entry>
  
  <entry>
    <title>URI, URL, URN 的区别</title>
    <link href="http://objcer.com/2017/06/04/The-Difference-Between-URLs-and-URIs/"/>
    <id>http://objcer.com/2017/06/04/The-Difference-Between-URLs-and-URIs/</id>
    <published>2017-06-04T08:43:26.000Z</published>
    <updated>2017-06-04T08:48:24.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>URI: Uniform Resource Identifier (统一资源标识符)</li>
<li>URL: Uniform Resource Locator (统一资源定位符)</li>
<li>URN: Uniform Resource Name (统一资源名称)</li>
</ul>
<a id="more"></a>
<h2 id="URI-URL-URN"><a href="#URI-URL-URN" class="headerlink" title="URI, URL, URN"></a>URI, URL, URN</h2><p><strong>URI, URL, URN</strong> 三者关系图:<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/URI-vs-URL.png" alt=""></p>
<p>📌 关系：</p>
<ul>
<li>URI 是一个紧凑的字符串用来标示抽象或物理资源</li>
<li>URL 相对于 URI，除了确定一个资源，还提供一种定位该资源的主要访问机制或者网络地址 (“access mechanism” or “network location”) 例如：http:// or ftp://</li>
<li>URI 包括 URL 和 URN，每一个 URL 都是 URI</li>
<li>URN 是唯一标识的一部分，就是一个特殊的名字</li>
</ul>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/800px-URI_Euler_Diagram_no_lone_URIs.svg.png" alt=""></p>
<blockquote>
<p><em>[维基百科]:</em> URI 可被视为定位符（URL），名称（URN）或两者兼备。统一资源名（URN）如同一个人的名称，而统一资源定位符（URL）代表一个人的住址。换言之，URN 定义某事物的身份，而 URL 提供查找该事物的方法。</p>
</blockquote>
<p>举例说明：</p>
<ul>
<li><a href="http://www.wikipedia.org/" target="_blank" rel="external">http://www.wikipedia.org/</a><br>  这个就是 URL，标识一个特定的互联网资源，并且可以通过 http 协议访问该网络资源</li>
<li>urn:isbn:0-395-36341-1<br>  这个就是 URN，指定标识系统（即国际标准书号ISBN）和某资源在该系统中的唯一表示的URI。它可以允许人们在不指出其位置和获得方式的情况下谈论这本书</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://danielmiessler.com/study/url-uri/#gs.taQ4gpU" target="_blank" rel="external">The Difference Between URLs and URIs</a><br><a href="https://zh.wikipedia.org/zh-cn/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E6%A0%87%E5%BF%97%E7%AC%A6" target="_blank" rel="external">统一资源标志符</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;URI: Uniform Resource Identifier (统一资源标识符)&lt;/li&gt;
&lt;li&gt;URL: Uniform Resource Locator (统一资源定位符)&lt;/li&gt;
&lt;li&gt;URN: Uniform Resource Name (统一资源名称)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程" scheme="http://objcer.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="URI" scheme="http://objcer.com/tags/URI/"/>
    
      <category term="URL" scheme="http://objcer.com/tags/URL/"/>
    
      <category term="URN" scheme="http://objcer.com/tags/URN/"/>
    
  </entry>
  
  <entry>
    <title>Cordova 远程推送 - iOS篇</title>
    <link href="http://objcer.com/2017/06/04/cordova-register-and-receive-push-notifications-iOS/"/>
    <id>http://objcer.com/2017/06/04/cordova-register-and-receive-push-notifications-iOS/</id>
    <published>2017-06-03T17:03:12.000Z</published>
    <updated>2017-06-03T17:05:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/iOS-PUsh-Notifications.png" alt=""></p>
<a id="more"></a>
<h2 id="APNs"><a href="#APNs" class="headerlink" title="APNs"></a>APNs</h2><blockquote>
<p>APNs(<em>Apple Push Notification service</em>) <a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html#//apple_ref/doc/uid/TP40008194-CH8-SW1" target="_blank" rel="external">官方文档 Overview</a></p>
</blockquote>
<h3 id="推送原理"><a href="#推送原理" class="headerlink" title="推送原理"></a>推送原理</h3><p>当 Provider 远程服务器需要向 App 推送一条消息时，并不是直接往 App 推送消息，而是推送苹果 APNs 服务器上，而苹果的 APNs 服务器再通过与设备建立长连接进而把消息推送到我们的设备上。<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/82BDFC5F-339D-4402-8719-5197D0246305.png" alt=""></p>
<p>由此：APNs 推送就划分成两部分：</p>
<ul>
<li>Provider-to-APNs connection (服务端交互)</li>
<li>APNs-to-device connection (客户端交互)</li>
</ul>
<h3 id="deviceToken"><a href="#deviceToken" class="headerlink" title="deviceToken"></a>deviceToken</h3><p>1、当一个 App 注册接收远程通知时，系统会发送请求到 APNs 服务器，APNs 服务器收到此请求会生成一个<strong>独一无二</strong>的 deviceToken，发送到对应请求的 App 上。然后 App 把此 deviceToken 发送给我们自己的服务器 Provider。</p>
<blockquote>
<p>❗️一个 deviceToken 可以唯一标识某个设备上的某个 App，可以理解成：<strong>deviceToken = device UUID + App Bundle ID</strong></p>
</blockquote>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/Managing%20the%20device%20token.png" alt=""></p>
<p>2、Provider 给我们的设备推送通知的时候，必须包含此 deviceToken。<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/Remote%20notification%20path%20from%20provider%20to%20device.png" alt=""></p>
<h3 id="推送消息-Payload"><a href="#推送消息-Payload" class="headerlink" title="推送消息 Payload"></a>推送消息 Payload</h3><blockquote>
<p><a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CreatingtheNotificationPayload.html#//apple_ref/doc/uid/TP40008194-CH10-SW1" target="_blank" rel="external">Creating the Remote Notification Payload</a></p>
</blockquote>
<p>1、Payload 消息大小</p>
<ul>
<li>For regular remote notifications, the maximum size is 4KB (4096 bytes)</li>
<li>For Voice over Internet Protocol (VoIP) notifications, the maximum size is 5KB (5120 bytes)</li>
<li>If you are using the legacy APNs binary interface to send notifications instead of an HTTP/2 request, the maximum payload size is 2KB (2048 bytes)</li>
</ul>
<p>当 Payload 负载大小超过规定的负载大小时，APNs 会拒绝发送此消息。</p>
<p>2、Payload 消息格式<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 以下为 Payload 常用字段，详细请参考官方文档</div><div class="line">&#123;</div><div class="line">    <span class="string">"aps"</span> : &#123;</div><div class="line">        <span class="string">"alert"</span>              :   &#123;   // <span class="type">string</span> <span class="keyword">or</span> dictionary</div><div class="line">            <span class="string">"title"</span>          :   "<span class="type">string</span><span class="string">",</span></div><div class="line">            "<span class="keyword">body</span><span class="string">"           :   "</span>string<span class="string">"</span></div><div class="line">        &#125;,</div><div class="line">        "badge<span class="string">"              :    number,</span></div><div class="line">        "sound<span class="string">"              :    "</span>string<span class="string">"</span></div><div class="line">    &#125;,</div><div class="line">    "acme1<span class="string">" : [ "</span>foo<span class="string">",  "</span>bar<span class="string">" ]</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>aps：推送消息必须有的 key<ul>
<li>alert：推送消息包含此 key 值，系统就会根据用户的设置展示标准的推送信息<ul>
<li>title：简短描述此调推送消息的目的</li>
<li>body：推送的内容</li>
</ul>
</li>
<li>badge：在 app 图标上显示消息数量，缺少此 key ，消息数量就不会改变，消除标记时把此 key 对应的 value 设置为0</li>
<li>sound：设置推送声音的key值，系统默认提示声音对应的 value 值为 default</li>
</ul>
</li>
<li>acme: 以 <code>acme</code> 作为前缀，表示自定义数据</li>
</ul>
<p>例如：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"aps"</span> : &#123;</div><div class="line">        <span class="attr">"alert"</span>: <span class="string">"This is a notification"</span>,</div><div class="line">        <span class="attr">"badge"</span>: <span class="number">1</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"acme-data"</span>: [ <span class="string">"foo"</span>,  <span class="string">"bar"</span> ]</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="attr">"aps"</span> : &#123;</div><div class="line">        <span class="attr">"alert"</span>: &#123;</div><div class="line">            <span class="attr">"title"</span>: <span class="string">"This is Title"</span>,</div><div class="line">            <span class="attr">"body"</span>: <span class="string">"This is Body"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"badge"</span>: <span class="number">1</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"acme-data"</span>: [ <span class="string">"foo"</span>,  <span class="string">"bar"</span> ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、当设备处于离线 offline 状态时，APNs 会为保留 Provider 所推送的最后一条通知，当设备转换为连网状态时，APNs则把其保留的最后一条通知推送给我们的设备；如果设备长时间离线，那么最后一条通知也有可能被丢弃。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="http://7vikhl.com1.z0.glb.clouddn.com/apns-app.png" alt=""></p>
<ul>
<li>① App 向系统发起请求</li>
<li>② 系统向 APNs 发送注册远程推送请求</li>
<li>③ APNs 生成 deviceToken 并返回</li>
<li>④ App 将 deviceToken 发送给服务器 Provider</li>
<li>⑤ 从推送管理平台向 Provider 发出推送消息指令</li>
<li>⑥ Provider 推送消息给 APNs</li>
<li>⑦ APNs 推送消息给 App</li>
</ul>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>Cordova 项目要集成远程推送功能，需要用到 <a href="https://github.com/phonegap/phonegap-plugin-push" target="_blank" rel="external">phonegap-plugin-push</a> 这个插件，该插件提供了对多个平台的推送支持，当然包括 iOS 和 Android，下面以 iOS 项目为例，详细介绍整个安装过程。</p>
<blockquote>
<p>iOS 安装过程：<a href="https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/INSTALLATION.md#ios-details" target="_blank" rel="external">参考文档</a></p>
</blockquote>
<p>❗️注意：</p>
<ul>
<li>以下安装过程需要<strong>翻墙</strong></li>
<li>该插件要求 cordova 版本至少 6.1.0，否则要么更新 cordova 或者下载时指定该插件版本号：<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cordova plugin <span class="keyword">add</span> phonegap-plugin-<span class="keyword">push</span><span class="subst">@1</span><span class="number">.8</span><span class="number">.1</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>执行安装命令：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">➜  wps-<span class="built_in">writer</span> git:(feature/<span class="keyword">edit</span>) cordova plugin add phonegap-plugin-<span class="keyword">push</span></div><div class="line">Fetching plugin <span class="string">"phonegap-plugin-push@1.10.4"</span> via npm</div><div class="line">Installing <span class="string">"phonegap-plugin-push"</span> <span class="keyword">for</span> browser</div><div class="line">Installing <span class="string">"phonegap-plugin-push"</span> <span class="keyword">for</span> ios</div><div class="line">Failed to install 'phonegap-plugin-<span class="keyword">push</span>':undefined</div><div class="line"><span class="built_in">Error</span>: CocoaPods was <span class="keyword">not</span> found. Please install version <span class="number">1.0</span><span class="number">.1</span> <span class="keyword">or</span> greater from https:<span class="comment">//cocoapods.org/</span></div></pre></td></tr></table></figure></p>
<p>提示我们要安装 CocoaPods，执行如下命令进行安装：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  wps-writer git:(feature/edit) ✗ sudo gem <span class="keyword">install</span> cocoapods</div><div class="line"><span class="keyword">ERROR</span>:  Could <span class="keyword">not</span> find a valid gem <span class="string">'cocoapods'</span> (&gt;= <span class="number">0</span>), here <span class="keyword">is</span> why:</div><div class="line">          Unable <span class="keyword">to</span> download <span class="keyword">data</span> <span class="keyword">from</span> https://ruby.taobao.org/ - Errno::ECONNRESET: <span class="keyword">Connection</span> <span class="keyword">reset</span> <span class="keyword">by</span> peer - SSL_connect (https://ruby.taobao.org/specs<span class="number">.4</span><span class="number">.8</span>.gz)</div></pre></td></tr></table></figure></p>
<p>根据错误提示我们知道，从淘宝 Ruby 的软件源中找不到 cocoapods，我们需要增加 gem 源<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 增加/删除 gem 源</span></div><div class="line">gem sources --<span class="keyword">add</span> https:<span class="comment">//rubygems.org/</span></div><div class="line">gem sources --<span class="keyword">remove</span> https:<span class="comment">//rubygems.org/</span></div><div class="line"><span class="meta"># 查看 gem 源</span></div><div class="line">gem sources -l</div></pre></td></tr></table></figure></p>
<p>安装完 CocoaPods 之后，重新安装插件：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">➜  wps-writer git:(feature/edit) cordova plugin add phonegap-plugin-push</div><div class="line">Fetching plugin <span class="string">"phonegap-plugin-push@1.10.4"</span> via npm</div><div class="line">Installing <span class="string">"phonegap-plugin-push"</span> <span class="keyword">for</span> browser</div><div class="line">Installing <span class="string">"phonegap-plugin-push"</span> <span class="keyword">for</span> ios</div><div class="line">Failed to install <span class="string">'phonegap-plugin-push'</span>:Error: pod: Command failed with exit <span class="selector-tag">code</span> <span class="number">1</span></div><div class="line">    at ChildProcess<span class="selector-class">.whenDone</span> (/Users/YingshanDeng/Documents/WebPS/wps-writer/platforms/ios/cordova/node_modules/cordova-common/src/superspawn<span class="selector-class">.js</span>:<span class="number">169</span>:<span class="number">23</span>)</div><div class="line">    at emitTwo (events<span class="selector-class">.js</span>:<span class="number">100</span>:<span class="number">13</span>)</div><div class="line">    at ChildProcess<span class="selector-class">.emit</span> (events<span class="selector-class">.js</span>:<span class="number">185</span>:<span class="number">7</span>)</div><div class="line">    at maybeClose (internal/child_process<span class="selector-class">.js</span>:<span class="number">827</span>:<span class="number">16</span>)</div><div class="line">    at Process<span class="selector-class">.ChildProcess</span>._handle<span class="selector-class">.onexit</span> (internal/child_process<span class="selector-class">.js</span>:<span class="number">211</span>:<span class="number">5</span>)</div><div class="line">Error: pod: Command failed with exit <span class="selector-tag">code</span> <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>安装文档中也可以找到 <a href="https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/INSTALLATION.md#common-cocoapod-installation-issues" target="_blank" rel="external">解决这个问题</a> 的介绍：</p>
<ul>
<li>进入 <code>platforms/ios</code> iOS 项目根目录，执行 <code>pod repo update</code></li>
<li>重新安装该插件</li>
</ul>
<p>但是执行 <code>pod repo update</code> 实在是太慢了💩，不能忍。我们可以通过如下方法进行解决：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo rm -fr ~/.cocoapods/repos/<span class="keyword">master</span></div><div class="line"><span class="title">pod</span> setup</div></pre></td></tr></table></figure></p>
<p>执行 <code>pod setup</code> 会 Specs 整个仓库 clone 到本地，这个仓库是是所有 Pods 的索引，就是一个容器，所有公开的 Pods 都在这里面。整个下载大小约 400M 所以需要点时间 🤣</p>
<p>下载完毕后，我们再进入 iOS 项目中执行 <code>pod repo update</code> 就很快了。以上操作都顺利完成后，重新安装该插件：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 先移除后添加</div><div class="line">cordova <span class="keyword">plugin</span> <span class="keyword">rm</span> phonegap-<span class="keyword">plugin</span>-push</div><div class="line">cordova <span class="keyword">plugin</span> add phonegap-<span class="keyword">plugin</span>-push</div></pre></td></tr></table></figure></p>
<p>不出意外就安装成功了 ✌️。</p>
<p>总结一下其实就是两点：</p>
<ul>
<li><code>sudo gem install cocoapods</code></li>
<li><code>pod setup</code></li>
</ul>
<h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><blockquote>
<p><a href="https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/API.md#pushnotificationinitoptions" target="_blank" rel="external">API 文档</a></p>
</blockquote>
<p>插件在全局添加了一个 PushNotification 类。</p>
<h3 id="PushNotification-init-options"><a href="#PushNotification-init-options" class="headerlink" title="PushNotification.init(options)"></a><code>PushNotification.init(options)</code></h3><p>推送初始化，通过传入配置信息，包含各个平台相应的设置，返回 <code>PushNotification</code> 实例<br>❗️注意：</p>
<ul>
<li>必须在 <code>deviceready</code> 事件回调中调用 <code>PushNotification.init()</code></li>
<li>每一次 App 启动，都需要调用 <code>PushNotification.init()</code>，因为 App 对应的推送服务 registration ID 可能发生变化（对于 iOS 即是 deviceToken）</li>
</ul>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> push = PushNotification.init(&#123;</div><div class="line">    <span class="comment">// android: &#123;</span></div><div class="line">    <span class="comment">// &#125;,</span></div><div class="line">    <span class="comment">// browser: &#123;</span></div><div class="line">    <span class="comment">// &#125;,</span></div><div class="line"><span class="symbol">    ios:</span> &#123;</div><div class="line"><span class="symbol">        alert:</span> <span class="string">"true"</span>, <span class="comment">// 弹出通知提示</span></div><div class="line"><span class="symbol">        badge:</span> <span class="string">"true"</span>, <span class="comment">// 应用图标右上角数字标记</span></div><div class="line"><span class="symbol">        sound:</span> <span class="string">"true"</span>, <span class="comment">// 通知提示音</span></div><div class="line"><span class="symbol">        clearBadge:</span> <span class="string">"true"</span> <span class="comment">// 应用打开后清除图标标记</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="事件监听-push-on-event-callback"><a href="#事件监听-push-on-event-callback" class="headerlink" title="事件监听 push.on(event, callback)"></a>事件监听 <code>push.on(event, callback)</code></h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ① 注册通知成功回调，返回的 registrationId</span></div><div class="line"><span class="comment">// 对于 iOS，向 APNs 注册远程推送，返回的 deviceToken 即 registrationId</span></div><div class="line">push.<span class="keyword">on</span>(<span class="string">'registration'</span>, (<span class="built_in">data</span>) =&gt; &#123;</div><div class="line">    console.<span class="keyword">log</span>(<span class="string">'---registration---'</span>, <span class="built_in">data</span>.registrationId)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// ② 接收到远程推送消息的回调</span></div><div class="line">push.<span class="keyword">on</span>(<span class="string">'notification'</span>, (<span class="built_in">data</span>) =&gt; &#123;</div><div class="line">    <span class="comment">// data.message,</span></div><div class="line">    <span class="comment">// data.title,</span></div><div class="line">    <span class="comment">// data.count,</span></div><div class="line">    <span class="comment">// data.sound,</span></div><div class="line">    <span class="comment">// data.image,</span></div><div class="line">    <span class="comment">// data.additionalData</span></div><div class="line">    console.<span class="keyword">log</span>(<span class="string">'---notification---'</span>, <span class="built_in">data</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// ③ 内部错误回调</span></div><div class="line">push.<span class="keyword">on</span>(<span class="string">'error'</span>, (e) =&gt; &#123;</div><div class="line">    <span class="comment">// e.message</span></div><div class="line">    console.<span class="keyword">log</span>(<span class="string">'---notification error---'</span>, e.message);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="PushNotification-hasPermission"><a href="#PushNotification-hasPermission" class="headerlink" title="PushNotification.hasPermission"></a><code>PushNotification.hasPermission</code></h3><p>检查 App 是否授权允许推送通知<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">checkPermission: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        PushNotification.hasPermission(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">            <span class="comment">// resolve(isEnabled)</span></div><div class="line">            resolve(data.isEnabled);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="get-setApplicationIconBadgeNumber"><a href="#get-setApplicationIconBadgeNumber" class="headerlink" title="get/setApplicationIconBadgeNumber"></a><code>get/setApplicationIconBadgeNumber</code></h3><p>获取/设置应用图标标记数字<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">setIconBadgeNumber(count) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        <span class="comment">// resolve()</span></div><div class="line">        push.setApplicationIconBadgeNumber(resolve, reject, count);</div><div class="line">    &#125;);</div><div class="line">&#125;,</div><div class="line">getIconBadgeNumber() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        <span class="comment">// resolve(count)</span></div><div class="line">        push.getApplicationIconBadgeNumber(resolve, reject);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="badge-自增问题-🤖"><a href="#badge-自增问题-🤖" class="headerlink" title="badge 自增问题 🤖"></a>badge 自增问题 🤖</h3><p>通常来说，应用在接收到一条推送消息通知的时候，图标标记 badge 就应该加一；当打开应用的时候，badge 清零。</p>
<p>我们知道通过设置 Payload 消息中的 <code>badge</code> 字段，可以设置应用接收到推送消息时，图标标记设置的数值（<code>badge</code> 字段为零即为清空图标标记数字）；而在 PushNotification 插件初始化时通过配置传入 <code>clearBadge</code> 可以设置打开应用时，图标标记清零。</p>
<p>但是能否做到接收到推送消息时，badge 显示数值自增一呢？就目前 PushNotification 插件来说，并不能做到。而对于微信或者 QQ 这类应用的图标 badge 数值提示的是未读消息数，其设置逻辑应该是通过服务端维护的。</p>
<p>对于图标标记的设置，参考了一些 App 的做法：</p>
<ul>
<li>设置 <code>badge</code> 字段为 1</li>
<li>不展示图标标记（设置 <code>badge</code> 字段为 0 或者 PushNotification 插件初始化是 <code>badge</code> 设置为 <code>false</code>）</li>
</ul>
<h2 id="推送证书"><a href="#推送证书" class="headerlink" title="推送证书"></a>推送证书</h2><p>具备接收远程推送的应用打包时需要使用推送证书，同样也区分开发证书和发布证书。</p>
<h3 id="导出推送证书"><a href="#导出推送证书" class="headerlink" title="导出推送证书"></a>导出推送证书</h3><p>登录 <a href="https://developer.apple.com" target="_blank" rel="external">苹果开发者中心</a> 在 <code>Certificates, Identifiers &amp; Profiles -&gt; Identifiers -&gt; App IDs</code>，找到应用对应的 App ID，点击 <code>Edit</code> 对 Push Notifications 进行配置导出 certificate 证书。<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/CreateCertificate.png" alt=""></p>
<p>双击安装证书如下：<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/aps.png" alt=""></p>
<p>同时我们也需要更新下载 Provisioning Profile 文件。</p>
<h3 id="Xcode-真机调试推送配置"><a href="#Xcode-真机调试推送配置" class="headerlink" title="Xcode 真机调试推送配置"></a>Xcode 真机调试推送配置</h3><p>1、target -&gt; Capabilities<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/capabilities.jpg" alt=""></p>
<p>2、target -&gt; Build Settings -&gt; Signings<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/build-settings.jpg" alt=""></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.jianshu.com/p/4b947569a548" target="_blank" rel="external">iOS推送之远程推送（iOS Notification Of Remote Notification）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/iOS-PUsh-Notifications.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Cordova" scheme="http://objcer.com/categories/Cordova/"/>
    
    
      <category term="Push Notification" scheme="http://objcer.com/tags/Push-Notification/"/>
    
  </entry>
  
  <entry>
    <title>Unicode 之神奇的空格</title>
    <link href="http://objcer.com/2017/05/22/Unicode-spaces/"/>
    <id>http://objcer.com/2017/05/22/Unicode-spaces/</id>
    <published>2017-05-22T13:37:42.000Z</published>
    <updated>2017-05-22T13:41:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/IMG_3319.PNG" alt=""></p>
<a id="more"></a>
<h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var a</span> = <span class="string">"&lt;p&gt;The app&amp;nbsp;&lt;/p&gt;"</span>;</div><div class="line"><span class="attribute">var b</span> = <span class="string">"&lt;p&gt;The app &lt;/p&gt;"</span></div></pre></td></tr></table></figure>
<p>有如上两个两个字符串（其中前者是从 WYSIWYG 编辑器中获取到的字符串数据）， 我们已知两个字符串表示的内容是一样的，我们如何通过代码来判断他们相等呢。</p>
<p>看到这个问题，很简单的嘛 🤣 <code>&amp;nbsp;</code> 是空格的转义字符，那我们可以先把 <code>&amp;nbsp;</code> 替换成空格<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceNbsps</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/&amp;nbsp;/g</span>, <span class="string">' '</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(replaceNbsps(a)) <span class="comment">// "&lt;p&gt;The app &lt;/p&gt;"</span></div><div class="line">replaceNbsps(a) == b <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<p>替换后，两个字符串看起来一模一样了，但是执行结果却是 <code>false</code> 🤔 这是为啥呢？</p>
<p>其实字符串 <code>b</code> 中暗含玄机：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> <span class="selector-tag">b</span> = <span class="string">"&lt;p&gt;The app &lt;/p&gt;"</span></div><div class="line"><span class="selector-tag">var</span> <span class="selector-tag">b</span> = <span class="string">"&lt;p&gt;The app\u00a0&lt;/p&gt;"</span></div></pre></td></tr></table></figure></p>
<p>这其中的包含的一个空格字符，其 Unicode 为 <code>U+00A0</code>，十进制值为：160。莫非这两个空格字符不一样？</p>
<p>没错❗通过正则替换的空格字符的 Unicode 为 <code>U+0020</code>，十进制值为：32</p>
<table>
<thead>
<tr>
<th>Unicode</th>
<th>十进制值</th>
<th>描述</th>
<th>拉丁字母</th>
</tr>
</thead>
<tbody>
<tr>
<td>U+0020</td>
<td>160</td>
<td><a href="https://zh.wikipedia.org/zh-cn/%E7%A9%BA%E6%A0%BC" target="_blank" rel="external">空格</a></td>
<td>基本拉丁字母</td>
</tr>
<tr>
<td>U+00A0</td>
<td>32</td>
<td><a href="https://zh.wikipedia.org/zh-cn/%E4%B8%8D%E6%8D%A2%E8%A1%8C%E7%A9%BA%E6%A0%BC" target="_blank" rel="external">不换行空格</a></td>
<td>拉丁字母-1 辅助</td>
</tr>
</tbody>
</table>
<h2 id="空格-U-0020"><a href="#空格-U-0020" class="headerlink" title="空格 U+0020"></a>空格 <code>U+0020</code></h2><p>我们通过键盘点击空格键输入的空格，就是此类空格，普通半角空格，显示为空白字符。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> space1 = <span class="string">'\u0020'</span>;</div><div class="line"><span class="keyword">var</span> space2 = <span class="string">' '</span>;</div><div class="line">space1 == space2 <span class="comment">// true</span></div><div class="line"></div><div class="line">space1.charCodeAt(<span class="number">0</span>) <span class="comment">// 32</span></div></pre></td></tr></table></figure></p>
<h2 id="空格-U-00A0"><a href="#空格-U-00A0" class="headerlink" title="空格 U+00A0"></a>空格 <code>U+00A0</code></h2><p>这类空格字符称之为<strong>不换行空格</strong>。用途是禁止换行。</p>
<p>在 HTML 网页显示中，会自动合并多个连续的空白字符；但是如果使用此类字符，就会禁止合并，因此这类字符也称之为<em>硬空格</em>。在网页显示中其转义字符为 <code>&amp;nbsp;</code><br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dom = <span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">'div'</span>); <span class="comment">// DOM 元素</span></div><div class="line"></div><div class="line"><span class="comment">// ① 自动合并空格</span></div><div class="line">dom.innerText = <span class="string">'a  b'</span>;</div><div class="line">dom.innerText = <span class="string">'a\u0020\u0020b'</span></div><div class="line">dom.innerText.length <span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="comment">// ② 禁止合并</span></div><div class="line">dom.innerText = <span class="string">'a\u00a0\u00a0b'</span></div><div class="line"><span class="comment">// 或者使用空格的转义字符 &amp;nbsp; ，此时需要用 innerHTML</span></div><div class="line">$<span class="number">0.</span>innerHTML = <span class="string">'a&amp;nbsp;&amp;nbsp;b'</span></div><div class="line">dom.innerText.length <span class="comment">// 4</span></div></pre></td></tr></table></figure></p>
<p>对于 ① 我们在页面中会观察到，DOM 元素只会展示一个空格（两个空格合并成一个）；而对于 ② 就会显示两个空格。</p>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>了解了原因，现在就可以解决第一节中的问题了。<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="title">replaceNbsps</span>(str) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">str.replace(/&amp;nbsp</span>;|\u00a0/g, <span class="string">' '</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">replaceNbsps(a) == replaceNbsps(b) // <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>我们只需要统一把空格都转换成 Unicode 为 <code>\u0020</code> 的空格，然后再进行比较就可以了。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://zh.wikipedia.org/zh-cn/%E7%A9%BA%E6%A0%BC" target="_blank" rel="external">空格</a><br><a href="https://zh.wikipedia.org/zh-cn/%E4%B8%8D%E6%8D%A2%E8%A1%8C%E7%A9%BA%E6%A0%BC" target="_blank" rel="external">不换行空格</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/IMG_3319.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Unicode" scheme="http://objcer.com/categories/Unicode/"/>
    
    
      <category term="space" scheme="http://objcer.com/tags/space/"/>
    
  </entry>
  
  <entry>
    <title>Cordova 打包应用 - iOS篇</title>
    <link href="http://objcer.com/2017/05/22/cordova-build-iOS-App/"/>
    <id>http://objcer.com/2017/05/22/cordova-build-iOS-App/</id>
    <published>2017-05-22T03:53:18.000Z</published>
    <updated>2017-05-22T03:55:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/ios.jpg" alt=""></p>
<a id="more"></a>
<h2 id="苹果开发知识储备"><a href="#苹果开发知识储备" class="headerlink" title="苹果开发知识储备"></a>苹果开发知识储备</h2><p><img src="http://7vikhl.com1.z0.glb.clouddn.com/iOS-dev-center.jpg" alt=""></p>
<h3 id="Certificates"><a href="#Certificates" class="headerlink" title="Certificates"></a>Certificates</h3><p>Certificates 证书，是用来给应用程序签名(code sign)，证明应用程序的合法性和完整性。对于想要安装到真机调试或者发布到应用商店的应用程序，只有经过签名，才能保证其来源可靠，并且代码完整，未经篡改的。<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/Code%20Signing%20Identity.jpg" alt=""><br>在Xcode Build Setting 的 Code Signing Identity 中，你可以设置用于为代码签名的证书。</p>
<ul>
<li>申请一个 Certificate 之前，需要先申请一个 Certificate Signing Request (CSR) 文件，而这个过程中实际上是生成了一对公钥和私钥，保存在你 Mac 的 Keychain 中。<strong>代码签名正是使用这种基于非对称秘钥的加密方式，用私钥进行签名，用公钥进行验证。</strong></li>
<li>如下图所示，在你 Mac 的 keychain 的 login 中存储着相关的公钥和私钥，而证书中包含了公钥。用私钥来进行签名，<strong>苹果就可以用证书中的公钥来进行验证</strong>，确保是你对代码进行了签名，而不是别人冒充你，同时也确保代码的完整性等。</li>
<li>当你想与其他人或其他设备共享证书时，导出证书（.p12类型），把私钥传给它就可以了。</li>
</ul>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/Certificates.png" alt=""><br>证书主要分为两类：Development 和 Production，Development 证书用来开发和调试应用程序，Production 主要用来分发应用程序。</p>
<h3 id="Identifiers"><a href="#Identifiers" class="headerlink" title="Identifiers"></a>Identifiers</h3><p>App ID 用于标识一个或者一组 App，App ID 应该是和 Xcode 中的 Bundle ID 是一致的或者匹配的。App ID主要有以下两种：</p>
<ul>
<li>An Explicit App ID Matches a Single App：唯一的App ID，这种App ID用于唯一标识一个应用程序，例如 <code>com.ABC.demo1</code>，标识 Bundle ID 为 <code>com.ABC.demo1</code> 的程序。</li>
<li>Wildcard App IDs Match Multiple Apps：通配符App ID，用于标识一组应用程序。例如 <code>*</code> 可以表示所有应用程序，而 <code>com.ABC.*</code> 可以表示以 <code>com.ABC</code> 开头的所有应用程序。</li>
</ul>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/Bundle%20ID.jpg" alt=""></p>
<h3 id="Devices"><a href="#Devices" class="headerlink" title="Devices"></a>Devices</h3><p>Device 是指运行 iOS 系统用于开发调试 App 的设备。每台 Apple 设备使用 UDID 来唯一标识。设备的 UDID 可通过 <code>iTunes-&gt;Summary</code> 或者 <code>Xcode-&gt;Window-&gt;Devices</code> 获取。</p>
<h3 id="Provisioning-Profiles"><a href="#Provisioning-Profiles" class="headerlink" title="Provisioning Profiles"></a>Provisioning Profiles</h3><p>一个 Provisioning Profile 文件包含了上述的所有内容：<strong>证书、App ID、设备</strong>。<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/Provisioning%20Profiles.png" alt=""></p>
<p>在打包应用程序或者在真机上运行调试一个应用程序的过程：</p>
<ul>
<li>使用 Certificates 证书来进行签名，用于标识该应用程序合法性和完整性</li>
<li>指明该应用程序的 App ID，并且验证与 Bundle ID 是否一致</li>
<li>到真机中运行调试该应用程序，确认该设备是否能够用来运行</li>
</ul>
<p>Provisioning Profile 把这些信息全部打包在一起，在打包时嵌入 <code>.ipa</code> 的包里。如上所述，在一台设备上运行应用程序的过程如下：<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/16185213-ea355ff0690b497a80ed5fd2dd5e62cf.png" alt=""></p>
<p>与 Certificates 证书一样，Provisioning Profile 也分为 Development 和 Distribution 两种：</p>
<ul>
<li>Development</li>
<li>Distribution: In House、Ad Hoc、App Store</li>
</ul>
<p>注：使用 Development Provisioning Profiles 打包的应用程序在设备中运行，要求该设备 UDID 必须绑定添加到该 Provisioning Profiles 中，否则无法在该设备中运行。解决方法是：绑定添加该设备 UDID，更新 Provisioning Profiles，重新打包。</p>
<h2 id="Xcode-调试"><a href="#Xcode-调试" class="headerlink" title="Xcode 调试"></a>Xcode 调试</h2><h3 id="Xcode-模拟器调试"><a href="#Xcode-模拟器调试" class="headerlink" title="Xcode 模拟器调试"></a>Xcode 模拟器调试</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加/移除 iOS 项目</span></div><div class="line">phonegap <span class="built_in">platform</span> <span class="built_in">add</span> ios</div><div class="line">phonegap <span class="built_in">platform</span> remove ios</div><div class="line"><span class="comment"># 更新 iOS 项目</span></div><div class="line">phonegap <span class="built_in">prepare</span> ios</div></pre></td></tr></table></figure>
<p>在 <code>/platforms/ios</code> 目录下双击打开 <code>.xcworkspace</code> 文件，Xcode 中选择对应的模拟器即可运行。</p>
<h3 id="Xcode-真机调试"><a href="#Xcode-真机调试" class="headerlink" title="Xcode 真机调试"></a>Xcode 真机调试</h3><p>Xcode 真机调试需要申请 Certificates 证书，然后添加调试设备 UDID，生成 Provisioning Profiles（Development 类型），下载到电脑中，双击安装。<br>苹果设备连接电脑，Xcode -&gt; Build Settings 设置 Code Signing Identity 和 Provisioning Profiles，设置完成后，选择该设备运行即可。<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/Xcode-debug.jpg" alt=""></p>
<p>当然 <a href="http://www.jianshu.com/p/351be39f959e" target="_blank" rel="external">Xcode7以后，无证书也能真机编译调试！</a></p>
<h2 id="应用打包"><a href="#应用打包" class="headerlink" title="应用打包"></a>应用打包</h2><blockquote>
<p>cordova iOS 应用打包 <a href="https://cordova.apache.org/docs/en/latest/guide/platforms/ios/#signing-an-app" target="_blank" rel="external">参考文档</a></p>
</blockquote>
<p>使用 Development 和 Distribution 的 Certificates 和 Provisioning Profiles 对应用程序进行打包的区别是：Development 打出来的包可以进行应用调试，譬如我们可以通过 Safari 对网页进行调试。</p>
<p>cordova 提供了一套打包解决方案，在项目<strong>根目录</strong>添加 <code>build.json</code> 文件，配置文件中需要指定的参数包括：</p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Flag</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Code Sign Identity</td>
<td>–codeSignIdentity</td>
<td>Code signing identity to use for signing.</td>
</tr>
<tr>
<td>Provisioning Profile</td>
<td>–provisioningProfile</td>
<td>GUID of the provisioning profile to be used for signing. It is copied here on your Mac: <code>~/Library/MobileDevice/Provisioning\ Profiles/</code>.</td>
</tr>
<tr>
<td>Code Sign Resource Rules</td>
<td>–codesignResourceRules    (Optional)</td>
<td>Used to control which files in a bundle should be sealed by a code signature. For more details, read The OS X Code Signing In Depth article.</td>
</tr>
<tr>
<td>Development Team</td>
<td>–developmentTeam</td>
<td>This is new for Xcode 8. The development team (Team ID) to use for code signing. You would use this setting and a simplified Code Sign Identity (i.e. just ‘iPhone Developer’) to sign your apps, you do not need to provide a Provisioning Profile.</td>
</tr>
<tr>
<td>Packaging Type</td>
<td>–packageType</td>
<td>This will determine what type of build is generated by Xcode. Valid options are development (the default), enterprise, ad-hoc, and app-store.</td>
</tr>
</tbody>
</table>
<p>解释一下需要用到的四个参数：</p>
<ul>
<li><strong>Code Sign Identity</strong>：应用程序签名时使用的证书标识。如下图<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/Code%20Sign%20Identity.jpg" alt=""></li>
<li><strong>Provisioning Profile</strong>：Provisioning Profile 的 GUID。进入 <code>~/Library/MobileDevice/Provisioning\ Profiles/</code> 目录，即可获取到对应 Provisioning Profile 的 GUID<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/GUID.jpg" alt=""></li>
<li><strong>Development Team</strong>：开发团队 ID<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/TeamID.jpg" alt=""></li>
<li><strong>Packaging Type</strong>：打包类型，包括：development、enterprise, ad-hoc, 和 app-store</li>
</ul>
<p><code>build.json</code> 配置如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"ios"</span>: &#123;</div><div class="line">        <span class="attr">"debug"</span>: &#123;</div><div class="line">            <span class="attr">"codeSignIdentity"</span>: <span class="string">"iPhone Developer: Deng Yingshan (Z7********)"</span>,</div><div class="line">            <span class="attr">"provisioningProfile"</span>: <span class="string">"91840e00-****-****-****-************"</span>,</div><div class="line">            <span class="attr">"developmentTeam"</span>: <span class="string">"32********"</span>,</div><div class="line">            <span class="attr">"packageType"</span>: <span class="string">"development"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"release"</span>: &#123;</div><div class="line">            <span class="attr">"codeSignIdentity"</span>: <span class="string">"iPhone Distribution: Zhuhai Kingsoft Office Software Co., Ltd."</span>,</div><div class="line">            <span class="attr">"provisioningProfile"</span>: <span class="string">"ce06cf9c-****-****-****-************"</span>,</div><div class="line">            <span class="attr">"packageType"</span>: <span class="string">"enterprise"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>❗️注意：</strong></p>
<ul>
<li>签名证书 Identity 一定要和 Provisioning Profiles GUID 对应上，否则打包不成功</li>
<li>打包类型 enterprise 即为使用 in house 类型的 Distribution Provisioning Profiles</li>
</ul>
<h3 id="Development"><a href="#Development" class="headerlink" title="Development"></a>Development</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">cordova</span> <span class="comment">build</span> <span class="comment">ios</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">device</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">debug</span></div></pre></td></tr></table></figure>
<ul>
<li>打 Development 必须使用 Development 类型的 Certificates 和 Provisioning Profiles。</li>
<li>配置文件中，在 <code>debug</code> 属性配置参数；打包命令指定 <code>--debug</code>。</li>
</ul>
<h3 id="Distribution"><a href="#Distribution" class="headerlink" title="Distribution"></a>Distribution</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">cordova</span> <span class="comment">build</span> <span class="comment">ios</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">device</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">release</span></div></pre></td></tr></table></figure>
<ul>
<li>打 Distribution 必须使用 Distribution 类型的 Certificates 和 Provisioning Profiles。</li>
<li>配置文件中，在 <code>release</code> 属性配置参数；打包命令指定 <code>--release</code>。</li>
<li>由于 Distribution 类型包括：In House、Ad Hoc、App Store 三种，对应在配置文件中的 <code>packageType</code> 分别为：<code>enterprise</code>, <code>ad-hoc</code>, 和 <code>app-store</code></li>
</ul>
<p>最终打包成功后，我们在 <code>platforms/ios/build/device</code> 目录下找到 <code>.ipa</code> 文件</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://cordova.apache.org/docs/en/latest/guide/platforms/ios/#signing-an-app" target="_blank" rel="external">Signing an App</a><br><a href="http://www.cnblogs.com/cywin888/p/3263027.html" target="_blank" rel="external">关于Certificate、Provisioning Profile、App ID的介绍及其之间的关系</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/ios.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Cordova" scheme="http://objcer.com/categories/Cordova/"/>
    
    
      <category term="cordova-build" scheme="http://objcer.com/tags/cordova-build/"/>
    
  </entry>
  
  <entry>
    <title>JS 数组排序 sort 方法</title>
    <link href="http://objcer.com/2017/05/21/JS-Array-sort/"/>
    <id>http://objcer.com/2017/05/21/JS-Array-sort/</id>
    <published>2017-05-21T08:42:51.000Z</published>
    <updated>2017-05-21T08:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>[问题引入]:</em>在推特上看到有人发了这样一段代码<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">1</span>];</div><div class="line">var b = a.sort();</div><div class="line">console.log(b);</div></pre></td></tr></table></figure></p>
<p>输出的结果竟然是：<code>[-1, -2, 0, 1]</code><br>显然该推友对 <code>Array.prototype.sort</code> 用法不熟悉导致的误解。🤓<br><a id="more"></a></p>
<h2 id="Array-prototype-sort"><a href="#Array-prototype-sort" class="headerlink" title="Array.prototype.sort"></a><code>Array.prototype.sort</code></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">arr</span><span class="selector-class">.sort</span>()</div><div class="line"></div><div class="line"><span class="selector-tag">arr</span><span class="selector-class">.sort</span>(<span class="selector-tag">compareFunction</span>)</div></pre></td></tr></table></figure>
<p><code>sort</code> 方法对数组中的元素进行排序，返回数组；可以指定排序顺序比较函数，如果省略，那么默认排序顺序是根据字符串 Unicode 码点<strong>升序排列</strong>。<br>通过一个例子理解一下：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var scores = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">8</span>];</div><div class="line">scores.sort(); <span class="comment">// [1, 10, 21, 8]</span></div></pre></td></tr></table></figure></p>
<p>我们对数组 <code>scores</code> 进行排序，没有指明 <code>compareFunction</code> ，那么元素会按照转换为的字符串的诸个字符的 Unicode 码点进行升序排列。相当于是<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> scores = [<span class="string">'1'</span>, <span class="string">'10'</span>, <span class="string">'21'</span>, <span class="string">'8'</span>];</div><div class="line">scores.sort();</div></pre></td></tr></table></figure></p>
<blockquote>
<p>关于码点，参考文章：<a href="http://objcer.com/2017/05/21/JavaScript-Unicode/">JavaScript Unicode 编码那些事</a></p>
</blockquote>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">'<span class="number">1</span>'.codePointAt(<span class="number">0</span>) <span class="comment">// 49</span></div><div class="line">'<span class="number">8</span>'.codePointAt(<span class="number">0</span>) <span class="comment">// 56</span></div></pre></td></tr></table></figure>
<p>字符 <code>1</code> 的码点比字符 <code>8</code> 的码点小，所以 <code>10</code> 排在 <code>8</code> 前面。同理也就可以解释文章开头的例子了。</p>
<h2 id="compareFunction"><a href="#compareFunction" class="headerlink" title="compareFunction"></a><code>compareFunction</code></h2><p>比较函数格式如下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function compare(a, b) &#123;</div><div class="line">    <span class="keyword">if</span> (a <span class="keyword">is</span> less than b <span class="keyword">by</span> some ordering criterion) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (a <span class="keyword">is</span> greater than b <span class="keyword">by</span> the ordering criterion) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// a must be equal to b</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有点需要注意的是，比较函数必须返回 -1 或者 0 或者 1；而不能返回 true 或者 false。</p>
<p>为了实现元素为数字的数组按照数值升序排列，我们就需要传入一个比较函数 <code>compareFunction</code>，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> scores = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">8</span>];</div><div class="line">scores.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b) <span class="comment">// 升序排列</span></div><div class="line">scores.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a) <span class="comment">// 降序排列</span></div></pre></td></tr></table></figure></p>
<p>通过比较函数，我们也可以对对象数组按照某个属性进行排序，很方便。</p>
<h2 id="sort-排序不一定是稳定的"><a href="#sort-排序不一定是稳定的" class="headerlink" title="sort 排序不一定是稳定的"></a>sort 排序不一定是稳定的</h2><blockquote>
<p>Quicksort is generally considered to be efficient and fast and so is used by V8 as the implementation for Array.prototype.sort() on arrays with more than 23 items. For less than 23 items, V8 uses insertion sort[2]. Merge sort is a competitor of quicksort as it is also efficient and fast but has the added benefit of being stable. This is why Mozilla and Safari use it for their implementation of Array.prototype.sort().</p>
</blockquote>
<p>关于排序是否稳定，参考: <a href="http://imweb.io/topic/565cf7253ad940357eb99881" target="_blank" rel="external">维基百科</a><br>这个图也能很好的理解<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/440px-Sorting_stability_playing_cards.svg.png" alt=""></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank" rel="external">MDN Array.prototype.sort</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;[问题引入]:&lt;/em&gt;在推特上看到有人发了这样一段代码&lt;br&gt;&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var a = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var b = a.sort();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(b);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输出的结果竟然是：&lt;code&gt;[-1, -2, 0, 1]&lt;/code&gt;&lt;br&gt;显然该推友对 &lt;code&gt;Array.prototype.sort&lt;/code&gt; 用法不熟悉导致的误解。🤓&lt;br&gt;
    
    </summary>
    
      <category term="JS" scheme="http://objcer.com/categories/JS/"/>
    
    
      <category term="Array.prototype.sort" scheme="http://objcer.com/tags/Array-prototype-sort/"/>
    
  </entry>
  
</feed>
