<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Deng&#39;s Blog</title>
  <subtitle>Work Smart, Enjoy Life!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://objcer.com/"/>
  <updated>2017-08-14T11:41:13.000Z</updated>
  <id>http://objcer.com/</id>
  
  <author>
    <name>小邓</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Javascript DOM 事件模型</title>
    <link href="http://objcer.com/2017/08/14/Introduction-into-Events/"/>
    <id>http://objcer.com/2017/08/14/Introduction-into-Events/</id>
    <published>2017-08-14T11:39:01.000Z</published>
    <updated>2017-08-14T11:41:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/js-event.jpg" alt=""><br><a id="more"></a></p>
<h2 id="Bubbling-and-capturing"><a href="#Bubbling-and-capturing" class="headerlink" title="Bubbling and capturing"></a>Bubbling and capturing</h2><p>Javascript DOM 事件流存在如下三个阶段：</p>
<ul>
<li>事件捕获阶段 Capturing phase – <strong>the event goes down to the element.</strong></li>
<li>处于目标阶段 Target phase – the event reached the target element.</li>
<li>事件冒泡阶段 Bubbling phase – <strong>the event bubbles up from the element.</strong></li>
</ul>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/eventflow@2x.png" alt=""></p>
<p><strong>Javascript DOM 标准事件流的触发的先后顺序为：先捕获再冒泡。</strong>点击 <code>&lt;td&gt;</code> DOM 节点时，事件传播顺序：首先是事件捕获阶段，从上向下传播；然后到达点击事件目标节点；最后是冒泡阶段，从下向上传播。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">addEventListener(<span class="string">type:</span> DOMString, <span class="string">callback:</span> EventListener, capture?: <span class="keyword">boolean</span>)</div></pre></td></tr></table></figure>
<p>DOM 节点添加事件监听方法 <code>addEventListener</code> 中第三个参数可以指定是该监听是添加在事件捕获阶段或者是事件冒泡阶段，默认为 <code>false</code>，即事件冒泡阶段；显式指定为 <code>true</code>，即事件捕获阶段。</p>
<p>实际应用中，为 DOM 元素添加事件监听绝大多数都是添加到事件冒泡阶段，很少会用到事件捕获。我们通过 <code>on&lt;event&gt;-property</code> HTML 属性添加的事件监听默认也是添加到事件冒泡阶段</p>
<p>注意到事件流处理有三个阶段，其中第二个阶段：处于目标阶段，并不单独处理，事件捕获阶段和冒泡阶段的添加的监听处理就包含了这个阶段。</p>
<h3 id="并非所有的事件都支持冒泡"><a href="#并非所有的事件都支持冒泡" class="headerlink" title="并非所有的事件都支持冒泡"></a>并非所有的事件都支持冒泡</h3><blockquote>
<p>❗ <strong>Almost</strong> all events bubble.</p>
</blockquote>
<p>注意关键字 “almost”，所以并不是所有的事件都支持冒泡。在 wiki <a href="https://en.wikipedia.org/wiki/DOM_events#Events" target="_blank" rel="external">DOM_events</a> 中我们就可以找到一些不支持冒泡的事件，例如 <code>focus</code>、<code>blur</code> 等等<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="params">(event)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(event.bubbles) <span class="regexp">//</span> &gt; <span class="literal">true</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">a.addEventListener(<span class="string">'focus'</span>, <span class="function"><span class="params">(event)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(event.bubbles) <span class="regexp">//</span> &gt; <span class="literal">false</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>我们可以通过 <code>event.bubbles</code> 来判断是否支持事件冒泡</p>
<h3 id="三个常用方法"><a href="#三个常用方法" class="headerlink" title="三个常用方法"></a>三个常用方法</h3><ul>
<li><p><code>event.stopPropagation</code> 阻止捕获和冒泡阶段中当前事件的进一步传播<br>在事件监听回调中调用此方法，若是捕获阶段，则停止向下传递事件；若是冒泡阶段，则停止向上传递事件。</p>
</li>
<li><p><code>event.stopImmediatePropagation</code> 阻止调用相同事件的其他侦听器<br>如果某个元素有多个相同类型事件的事件监听函数, 则当该类型的事件触发时, 多个事件监听函数将按照顺序依次执行. 如果某个监听函数执行了 <code>event.stopImmediatePropagation()</code> 方法, 则除了该事件的冒泡行为被阻止之外(event.stopPropagation方法的作用), 该元素绑定的后序相同类型事件的监听函数的执行也将被阻止。例子：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">"p"</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span></div><div class="line">    &#123;</div><div class="line">        alert(<span class="string">"我是p元素上被绑定的第一个监听函数"</span>);</div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">"p"</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span></div><div class="line">    &#123;</div><div class="line">        alert(<span class="string">"我是p元素上被绑定的第二个监听函数"</span>);</div><div class="line">        event.stopImmediatePropagation();</div><div class="line">        <span class="comment">//执行stopImmediatePropagation方法,阻止click事件冒泡,并且阻止p元素上绑定的其他click事件的事件监听函数的执行.</span></div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">"p"</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span></div><div class="line">    &#123;</div><div class="line">        alert(<span class="string">"我是p元素上被绑定的第三个监听函数"</span>);</div><div class="line">        <span class="comment">//该监听函数排在上个函数后面,该函数不会被执行.</span></div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">"div"</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span></div><div class="line">    &#123;</div><div class="line">        alert(<span class="string">"我是div元素,我是p元素的上层元素"</span>);</div><div class="line">        <span class="comment">//p元素的click事件没有向上冒泡,该函数不会被执行.</span></div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>event.preventDefault</code> 如果事件可取消，则取消该事件，而不停止事件的进一步传播。</p>
<ul>
<li>在事件触发后的任何阶段调用 <code>preventDefault</code> 方法来取消该事件, <strong>意味着该事件的所有默认动作都不会发生.</strong> 例如可以利用 <code>preventDefault()</code> 方法来阻止一个 <code>input</code> 元素内非法字符的输入等等</li>
<li>调用事件的 <code>preventDefault()</code> 方法后,会引起该事件的 <code>event.defaultPrevented</code> 属性值变为 <code>true</code></li>
<li>可以查看 <code>event.cancelable</code> 属性来判断一个事件的默认动作是否可以被取消. 在 <code>cancelable</code> 属性为 <code>false</code> 的事件上调用 <code>preventDefault</code> 方法没有任何效果</li>
<li><code>preventDefault</code> 方法<strong>不会阻止该事件的进一步冒泡</strong>. <code>event.stopPropagation</code> 方法才有这样的功能</li>
</ul>
</li>
</ul>
<h3 id="event-target-和-event-currentTarget"><a href="#event-target-和-event-currentTarget" class="headerlink" title="event.target 和 event.currentTarget"></a><code>event.target</code> 和 <code>event.currentTarget</code></h3><blockquote>
<p>The most deeply nested element that caused the event is called a target element, accessible as event.target.<br>Note the differences from this (=event.currentTarget):</p>
<ul>
<li>event.target – is the “target” element that initiated the event, it doesn’t change through the bubbling process.</li>
<li>this – is the “current” element, the one that has a currently running handler on it.</li>
</ul>
</blockquote>
<ul>
<li><code>event.target</code> – 指向触发事件的元素，在事件冒泡过程中该值不变</li>
<li><code>event.currentTarget</code> = this – 事件绑定的当前元素</li>
</ul>
<p>只有被点击的那个目标元素的 <code>event.target</code> 才会等于 <code>event.currentTarget</code>，看如下例子<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></div><div class="line">  outer</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>inner<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> outerEl = <span class="built_in">document</span>.querySelector(<span class="string">'.outer'</span>);</div><div class="line">  <span class="keyword">var</span> innerEl = <span class="built_in">document</span>.querySelector(<span class="string">'.inner'</span>);</div><div class="line"></div><div class="line">  innerEl.addEventListener(<span class="string">'click'</span>, (event) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'inner'</span>, event.target, event.currentTarget)</div><div class="line">  &#125;);</div><div class="line">  outerEl.addEventListener(<span class="string">'click'</span>, (event) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'outer'</span>, event.target, event.currentTarget)</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>点击 inner 节点，执行结果：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">inner &lt;<span class="keyword">div</span> <span class="built_in">class</span>=​<span class="string">"inner"</span>&gt;​inner​&lt;/<span class="keyword">div</span>&gt;​ &lt;<span class="keyword">div</span> <span class="built_in">class</span>=​<span class="string">"inner"</span>&gt;​inner​&lt;/<span class="keyword">div</span>&gt;​</div><div class="line">outer &lt;<span class="keyword">div</span> <span class="built_in">class</span>=​<span class="string">"inner"</span>&gt;​inner​&lt;/<span class="keyword">div</span>&gt;​ &lt;<span class="keyword">div</span> <span class="built_in">class</span>=​<span class="string">"outer"</span>&gt;​…​&lt;/<span class="keyword">div</span>&gt;​</div></pre></td></tr></table></figure></p>
<h2 id="执行顺序的问题"><a href="#执行顺序的问题" class="headerlink" title="执行顺序的问题"></a>执行顺序的问题</h2><p>我们知道，Javascript DOM 标准事件流的触发的先后顺序为：先捕获再冒泡。如果 DOM 节点同时绑定两个事件监听，一个用于捕获阶段，一个用于冒泡阶段，两个事件的执行顺序真的如此么？<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"outer"</span>&gt;</div><div class="line">  element1</div><div class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;element2&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-----------------------------------</div><div class="line">|<span class="string"> element1                        </span>|</div><div class="line">|<span class="string">   -------------------------     </span>|</div><div class="line">|<span class="string">   </span>|<span class="string">element2               </span>|<span class="string">     </span>|</div><div class="line">|<span class="string">   -------------------------     </span>|</div><div class="line">|<span class="string">                                 </span>|</div><div class="line">-----------------------------------</div></pre></td></tr></table></figure>
<p>分别为内外两个元素添加两个点击事件，一个用于捕获阶段，一个用于冒泡阶段<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  var outerEl = <span class="built_in">document</span>.querySelector(<span class="string">'.outer'</span>);</div><div class="line">  var innerEl = <span class="built_in">document</span>.querySelector(<span class="string">'.inner'</span>);</div><div class="line"></div><div class="line">  innerEl.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="params">(event)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'child bubble'</span>)</div><div class="line">  &#125;, <span class="literal">false</span>);</div><div class="line">  innerEl.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="params">(event)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'child capture'</span>)</div><div class="line">  &#125;, <span class="literal">true</span>);</div><div class="line"></div><div class="line">  outerEl.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="params">(event)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'parent bubble'</span>)</div><div class="line">  &#125;, <span class="literal">false</span>);</div><div class="line">  outerEl.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="params">(event)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'parent capture'</span>)</div><div class="line">  &#125;, <span class="literal">true</span>);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>根据前面的知识，当点击 element2 元素和 element1 元素的时候，我们应该会得到：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#点击 element2 元素</span></div><div class="line"><span class="keyword">parent</span> capture</div><div class="line">child capture</div><div class="line">child bubble</div><div class="line"><span class="keyword">parent</span> bubble</div><div class="line"></div><div class="line"><span class="comment">#点击 element1 元素</span></div><div class="line"><span class="keyword">parent</span> capture</div><div class="line"><span class="keyword">parent</span> bubble</div></pre></td></tr></table></figure></p>
<p><strong>❗️但是，</strong>实际上我们点击 element2 和点击 element1 的时候，得到的结果却是（其中都出现了先 bubble 后 capture）：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 点击 element2</span></div><div class="line"><span class="keyword">parent</span> capture</div><div class="line">child bubble</div><div class="line">child capture</div><div class="line"><span class="keyword">parent</span> bubble</div><div class="line"></div><div class="line"><span class="comment"># 点击 element1</span></div><div class="line"><span class="keyword">parent</span> bubble</div><div class="line"><span class="keyword">parent</span> capture</div></pre></td></tr></table></figure></p>
<p>这是为什么呢？这跟前面的结论不符啊 🤔 通过观察我们可以发现：<br>① DOM 元素先添加了用于冒泡阶段的事件监听，后添加了用于捕获阶段的事件监听<br>② 被点击元素先执行了冒泡阶段的事件监听，后执行捕获阶段的事件监听；而点击事件的父节点事件监听执行顺序正常<br>③ 我们猜测是否跟事件监听添加顺序有关系，我们调换一下添加顺序：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  var outerEl = <span class="built_in">document</span>.querySelector(<span class="string">'.outer'</span>);</div><div class="line">  var innerEl = <span class="built_in">document</span>.querySelector(<span class="string">'.inner'</span>);</div><div class="line"></div><div class="line">  innerEl.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="params">(event)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'child bubble'</span>)</div><div class="line">  &#125;, <span class="literal">true</span>);</div><div class="line">  innerEl.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="params">(event)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'child capture'</span>)</div><div class="line">  &#125;, <span class="literal">false</span>);</div><div class="line"></div><div class="line">  outerEl.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="params">(event)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'parent bubble'</span>)</div><div class="line">  &#125;, <span class="literal">true</span>);</div><div class="line">  outerEl.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="params">(event)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'parent capture'</span>)</div><div class="line">  &#125;, <span class="literal">false</span>);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>发现执行得到的结果正常</p>
<p><strong>❗️给出结论：</strong></p>
<ul>
<li>绑定在被点击元素的事件是按照代码添加顺序执行，其他元素先捕获后冒泡</li>
<li><strong>所以事件的执行顺序是：父元素的捕获阶段事件 -&gt; 触发事件元素按代码添加顺序的事件 -&gt; 父元素的冒泡阶段事件</strong></li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://javascript.info/bubbling-and-capturing" target="_blank" rel="external">Bubbling and capturing</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/js-event.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="JS" scheme="http://objcer.com/categories/JS/"/>
    
    
      <category term="事件捕获" scheme="http://objcer.com/tags/%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7/"/>
    
      <category term="事件冒泡" scheme="http://objcer.com/tags/%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/"/>
    
  </entry>
  
  <entry>
    <title>探究 emoji 字符长度</title>
    <link href="http://objcer.com/2017/07/20/explore-emoji-length/"/>
    <id>http://objcer.com/2017/07/20/explore-emoji-length/</id>
    <published>2017-07-20T11:41:38.000Z</published>
    <updated>2017-07-20T11:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/C0E1DEF1-900B-4372-B8CB-B166A1ABBA57.png" alt=""><br>我们注意到在 Twitter，微博，谷歌翻译的输入框中输入 emoji 字符，都不能正确的判断字符个数。🤷‍<br>在阅读本文之前，需要先对 Unicode 编码有所了解，参考: <a href="http://objcer.com/2017/05/21/JavaScript-Unicode/">JavaScript Unicode 编码那些事</a></p>
<a id="more"></a>
<h2 id="String-length-Char-count"><a href="#String-length-Char-count" class="headerlink" title="String length != Char count"></a>String length != Char count</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">'😂'</span><span class="selector-class">.length</span> <span class="comment">// 2</span></div><div class="line"><span class="string">'1️⃣'</span><span class="selector-class">.length</span> <span class="comment">// 3</span></div><div class="line"><span class="string">'👨‍👨‍👦'</span><span class="selector-class">.length</span> <span class="comment">// 8</span></div><div class="line"><span class="string">'👨‍👩‍👧‍👦'</span><span class="selector-class">.length</span> <span class="comment">// 11</span></div></pre></td></tr></table></figure>
<h2 id="关于-Unicode"><a href="#关于-Unicode" class="headerlink" title="关于 Unicode"></a>关于 Unicode</h2><p>Unicode 编码范围是从 U+0000 到 U+10FFFF，每一个编码（也称之为码位 code point）表示一个 Unicode 字符；而这么多码位有划分成 17 个平面：</p>
<ul>
<li>第一个平面(U+0000 ~ U+FFFF): 基本平面(Basic Multilingual Plane - <em>BMP</em>)</li>
<li>其他 16 个平面(U+100000 ~ U+10FFFF): 补充平面(Supplementary Planes)</li>
</ul>
<p>其中 emoji 作为一种特殊编码在补充平面，例如：<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">'😀'<span class="string">.codePointAt</span><span class="params">(0)</span><span class="string">.toString</span><span class="params">(16)</span> <span class="string">//</span> 0x1f600</div><div class="line">'😂'<span class="string">.codePointAt</span><span class="params">(0)</span><span class="string">.toString</span><span class="params">(16)</span> <span class="string">//</span> 0x1f602</div></pre></td></tr></table></figure></p>
<h2 id="关于-emoji"><a href="#关于-emoji" class="headerlink" title="关于 emoji"></a>关于 emoji</h2><blockquote>
<p>An Emoji as we know it today <strong>is defined by at least one code point</strong> in the Unicode range. This means that there are also several Emoji out there being a combination of several different Emoji and code points. These combinations are called <strong>sequences</strong>.</p>
</blockquote>
<p>一个 emoji 字符至少由一个码位表示，一个 emoji 有多个码位表示的我们称之为序列(sequences)。可以在 <a href="http://unicode.org/emoji/charts/full-emoji-list.html" target="_blank" rel="external">Full Emoji List</a> 页面查看到所有 emoji 的编码信息<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/5E88BF15-66B7-4A32-9125-B3E019C52E9C.png" alt=""></p>
<p>在 JavaScript 中 <code>String.length</code> 计算字符长度时，认为两个字节为一个字符，所以一个基本平面上的字符长度都为 1；而一个补充平面上的字符使用代理对，由四个字符表示，所以长度为 2；<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a: 0x61</span></div><div class="line"><span class="string">'a'</span><span class="selector-class">.lenght</span> <span class="comment">// 1</span></div><div class="line"></div><div class="line"><span class="comment">//💩: U+d83d U+dca9</span></div><div class="line"><span class="string">'💩'</span><span class="selector-class">.length</span> <span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="comment">// '1️⃣': U+0031 U+FE0F U+20E3</span></div><div class="line"><span class="string">'1️⃣'</span><span class="selector-class">.length</span> <span class="comment">// 3</span></div></pre></td></tr></table></figure></p>
<h3 id="Modifier-sequences"><a href="#Modifier-sequences" class="headerlink" title="Modifier sequences"></a>Modifier sequences</h3><p><img src="http://7vikhl.com1.z0.glb.clouddn.com/480D3F20-0262-40E4-B7C6-E068A9958692.png" alt=""><br>我们注意部分人类相关的 <strong>Human emoji</strong> 可以选择其他 5 种不同的肤色(<strong>Skin color</strong>)，默认颜色的 emoji 称之为 <strong>neutral emoji</strong>，不同肤色称之为 <strong>modifier</strong>，这些不同肤色的 emoji 我们称之为 <strong>Modifier sequences</strong>。</p>
<blockquote>
<p>These modifiers are called EMOJI MODIFIER FITZPATRICK TYPE-1-2, -3, -4, -5, and -6 (U+1F3FB–U+1F3FF): 🏻 🏼 🏽 🏾 🏿</p>
</blockquote>
<table>
<thead>
<tr>
<th>Code point</th>
<th>default</th>
<th>FITZ-1-2(U+1F3FB)</th>
<th>FITZ-3(U+1F3FC)</th>
<th>FITZ-4(U+1F3FD)</th>
<th>FITZ-5(U+1F3FE)</th>
<th>FITZ-6(U+1F3FF)</th>
</tr>
</thead>
<tbody>
<tr>
<td>U+1F466: BOY</td>
<td>👦</td>
<td>👦🏻</td>
<td>👦🏼</td>
<td>👦🏽</td>
<td>👦🏾</td>
<td>👦🏿</td>
</tr>
<tr>
<td>U+1F467: GIRL</td>
<td>👧</td>
<td>👧🏻</td>
<td>👧🏼</td>
<td>👧🏽</td>
<td>👧🏾</td>
<td>👧🏿</td>
</tr>
<tr>
<td>U+1F468: MAN</td>
<td>👨</td>
<td>👨🏻</td>
<td>👨🏼</td>
<td>👨🏽</td>
<td>👨🏾</td>
<td>👨🏿</td>
</tr>
<tr>
<td>U+1F469: WOMAN</td>
<td>👩</td>
<td>👩🏻</td>
<td>👩🏼</td>
<td>👩🏽</td>
<td>👩🏾</td>
<td>👩🏿</td>
</tr>
</tbody>
</table>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// U+1F467 + U+1F3FD</div><div class="line">👧 + 🏽</div><div class="line"><span class="meta">&gt;</span><span class="bash"> 👧🏽</span></div></pre></td></tr></table></figure>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/E3F5C223-E3E9-4ECC-AD67-DF09D6D62DD6.png" alt=""></p>
<p>明显的，这类 emoji 的通过 <code>String.length</code> 获取长度为 <strong>4</strong></p>
<h3 id="ZWJ-sequences"><a href="#ZWJ-sequences" class="headerlink" title="ZWJ sequences"></a>ZWJ sequences</h3><p>接下来里了解一下 <strong>family emoji</strong>，譬如我们常见的：三口之家：👪，四口之家：👨‍👩‍👧‍👦，等等；其中值得注意的是：</p>
<ul>
<li>有一个 neutral family emoji (U+1F46A - ‍👪) 由一个码位表示</li>
<li>而其他 family emoji 都是 <strong>Zero-Width-Joiner sequence</strong>；它们由多个 emoji 和 zero-width-joiner (U+200D) 组合而成</li>
</ul>
<p>注：zero-width-joiner (U+200D) 这个码位就如同胶水一般将不同的 emoji 组合成一个 emoji；zero-width-joiner (U+200D) 只占一个长度<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// neutral family</div><div class="line">// U<span class="string">+1</span>F46A</div><div class="line">// length: 2</div><div class="line">&gt; 👪</div><div class="line"></div><div class="line">// ZWJ sequence: family (man, woman, boy)</div><div class="line">// U<span class="string">+1</span>F468 + U<span class="string">+200</span>D + U<span class="string">+1</span>F469 + U<span class="string">+200</span>D + U<span class="string">+1</span>F466</div><div class="line">// 👨‍ + U<span class="string">+200</span>D + 👩‍ + U<span class="string">+200</span>D + 👦</div><div class="line">// length: 8</div><div class="line">&gt; ‍👨‍👩‍👦</div><div class="line"></div><div class="line">// ZWJ sequence: family (woman, woman, girl)</div><div class="line">// U<span class="string">+1</span>F469 + U<span class="string">+200</span>D + U<span class="string">+1</span>F469 + U<span class="string">+200</span>D + U<span class="string">+1</span>F467</div><div class="line">// 👩‍ + U<span class="string">+200</span>D + 👩‍ U<span class="string">+200</span>D + 👧</div><div class="line">// length: 8</div><div class="line">&gt; ‍👩‍👩‍👧</div><div class="line"></div><div class="line">// ZWJ sequence: family (woman, woman, girl, girl)</div><div class="line">// U<span class="string">+1</span>F469 + U<span class="string">+200</span>D + U<span class="string">+1</span>F469 + U<span class="string">+200</span>D + U<span class="string">+1</span>F467 + U<span class="string">+200</span>D + U<span class="string">+1</span>F467</div><div class="line">// 👩‍ + U<span class="string">+200</span>D + 👩‍ + U<span class="string">+200</span>D + 👧‍ + U<span class="string">+200</span>D + 👧</div><div class="line">// length: 11</div><div class="line">&gt; ‍👩‍👩‍👧‍👧</div></pre></td></tr></table></figure></p>
<p>拆分，组合 family emoji：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[...<span class="string">'👨‍👩‍👦'</span>]</div><div class="line">&gt;  [<span class="string">"👨"</span>, <span class="string">"‍"</span>, <span class="string">"👩"</span>, <span class="string">"‍"</span>, <span class="string">"👦"</span>]</div><div class="line"></div><div class="line">var family =  [<span class="string">"👨"</span>, <span class="string">"‍"</span>, <span class="string">"👩"</span>, <span class="string">"‍"</span>, <span class="string">"👦"</span>]</div><div class="line">console.log(family.join(<span class="string">''</span>))</div><div class="line">&gt; <span class="string">"👨‍👩‍👦"</span></div></pre></td></tr></table></figure></p>
<h2 id="解决字符长度终极解决方案"><a href="#解决字符长度终极解决方案" class="headerlink" title="解决字符长度终极解决方案"></a>解决字符长度终极解决方案</h2><p>我们找到一段正则表达式，可以用于匹配 Unicode 字符；然后封装成 <a href="https://github.com/YingshanDeng/EmojiCharString" target="_blank" rel="external">EmojiCharString</a> 类库，详细介绍参考该仓库 README 👉</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://mathiasbynens.be/notes/javascript-unicode" target="_blank" rel="external">JavaScript has a Unicode problem</a><br><a href="https://www.contentful.com/blog/2016/12/06/unicode-javascript-and-the-emoji-family/" target="_blank" rel="external">Emoji.prototype.length — a tale of characters in Unicode</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/C0E1DEF1-900B-4372-B8CB-B166A1ABBA57.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;我们注意到在 Twitter，微博，谷歌翻译的输入框中输入 emoji 字符，都不能正确的判断字符个数。🤷‍&lt;br&gt;在阅读本文之前，需要先对 Unicode 编码有所了解，参考: &lt;a href=&quot;http://objcer.com/2017/05/21/JavaScript-Unicode/&quot;&gt;JavaScript Unicode 编码那些事&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Unicode" scheme="http://objcer.com/categories/Unicode/"/>
    
    
      <category term="unicode-emoji" scheme="http://objcer.com/tags/unicode-emoji/"/>
    
  </entry>
  
  <entry>
    <title>Cordova 开发环境 - Android 篇</title>
    <link href="http://objcer.com/2017/07/03/cordova-android-development-environment/"/>
    <id>http://objcer.com/2017/07/03/cordova-android-development-environment/</id>
    <published>2017-07-03T14:14:19.000Z</published>
    <updated>2017-07-20T11:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/android-banner.jpg" alt=""><br><a id="more"></a></p>
<h2 id="安装-IDE-Android-Studio"><a href="#安装-IDE-Android-Studio" class="headerlink" title="安装 IDE (Android Studio)"></a>安装 IDE (Android Studio)</h2><p>安装 Android Studio, SDK, Android Virtual Device (AVD，安卓模拟器)</p>
<ul>
<li>下载链接：<a href="https://developer.android.com/studio/index.html?hl=zh-cn" target="_blank" rel="external">Android Studio</a></li>
<li>下载安装全程需要<strong>翻墙</strong></li>
<li>安装 Android Studio 完成后，创建一个 HelloWorld 程序到模拟器中运行，这个过程中，按照提示进行下载安装即可</li>
</ul>
<h2 id="真机运行"><a href="#真机运行" class="headerlink" title="真机运行"></a>真机运行</h2><p>手机通过 USB 连接电脑后，运行时，选择对应的设备即可运行，以下罗列几点真机运行中遇到的问题和技巧</p>
<h3 id="解决：DELETE-FAILED-INTERNAL-ERROR-Error-while-Installing-APK"><a href="#解决：DELETE-FAILED-INTERNAL-ERROR-Error-while-Installing-APK" class="headerlink" title="解决：DELETE_FAILED_INTERNAL_ERROR Error while Installing APK"></a>解决：<em>DELETE_FAILED_INTERNAL_ERROR Error while Installing APK</em></h3><p>安卓真机（小米4C）通过 USB 连接电脑后，运行，可能会出现如下问题：<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/3B19ED97-CE3F-45A9-8518-C08D779F7FA3.png" alt=""><br>点击 OK 继续，会出现如下错误：<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DELETE_FAILED_INTERNAL_ERROR</div><div class="line"><span class="keyword">Error </span>while Installing APKs</div></pre></td></tr></table></figure></p>
<p>参考链接：<a href="https://stackoverflow.com/questions/38892270/delete-failed-internal-error-error-while-installing-apk" target="_blank" rel="external">DELETE_FAILED_INTERNAL_ERROR Error while Installing APK</a> 大致有两种解决方案：</p>
<ul>
<li>操作步骤：Android Studio &gt; Preferences &gt;  Build, Execution, Deployment &gt; Instant Run &gt; <strong>Uncheck : Enable Instant Run</strong>（此处理方式会禁用 Instant Run 功能）<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/03E0830C-F5BB-4EC5-AC41-50A604A3E532.png" alt=""></li>
<li>由于调试设备是小米，所以还可以：设置 &gt; 更多设置 &gt; 开发者选项 &gt; <strong>去掉：启动 MIUI 优化</strong> &gt; 关闭并重启</li>
</ul>
<h3 id="ADB-无线调试"><a href="#ADB-无线调试" class="headerlink" title="ADB 无线调试"></a>ADB 无线调试</h3><p>Android ADB 提供了无线调试的功能</p>
<blockquote>
<p><a href="https://developer.android.com/studio/command-line/adb.html?hl=zh-cn#Enabling" target="_blank" rel="external">Android 调试桥</a></p>
</blockquote>
<h4 id="解决：zsh-command-not-found-adb"><a href="#解决：zsh-command-not-found-adb" class="headerlink" title="解决：zsh: command not found: adb"></a>解决：<code>zsh: command not found: adb</code></h4><p>解决步骤：<br>1️⃣ 执行如下命令往 .bash_profile 添加两个路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"export PATH=\$PATH:/Users/<span class="variable">$&#123;USER&#125;</span>/Library/Android/sdk/platform-tools/"</span> &gt;&gt; ~/.bash_profile</div><div class="line"><span class="built_in">echo</span> <span class="string">"export PATH=\$PATH:/Users/<span class="variable">$&#123;USER&#125;</span>/Library/Android/sdk/tools/"</span> &gt;&gt; ~/.bash_profile</div></pre></td></tr></table></figure></p>
<p>执行后 <code>.bash_profile</code> 文件：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export PATH=<span class="variable">$PATH</span><span class="symbol">:/Users/YingshanDeng/Library/Android/sdk/platform-tools/</span></div><div class="line">export PATH=<span class="variable">$PATH</span><span class="symbol">:/Users/YingshanDeng/Library/Android/sdk/tools/</span></div></pre></td></tr></table></figure></p>
<p>2️⃣ 执行 <code>source .bash_profile</code> 使其生效，此时我们在终端中输入 <code>adb</code> 会发现该命令生效了<br>3️⃣ 由于我的终端使用的是 zsh，所以需要再处理一下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 打开 .zshrc</span></div><div class="line">open .zshrc</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 在文件末尾添加</span></div><div class="line">source ~/.bash_profile</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 保存，重启终端即可</span></div></pre></td></tr></table></figure></p>
<h4 id="AndroidWiFiADB-插件"><a href="#AndroidWiFiADB-插件" class="headerlink" title="AndroidWiFiADB 插件"></a>AndroidWiFiADB 插件</h4><p>直接使用还是不够方便，推荐使用 <strong>AndroidWiFiADB 插件</strong>，项目地址：<a href="https://github.com/pedrovgs/AndroidWiFiADB" target="_blank" rel="external">AndroidWiFiADB</a></p>
<p>安装方式：</p>
<ul>
<li>Preferences -&gt; Settings -&gt; Plugins-&gt; Browse Repositories</li>
<li>输入: Android WiFi ADB 进行搜索，安装后重启</li>
</ul>
<p>如何使用：</p>
<ul>
<li>先将手机通过 USB 连接电脑，而且保证手机和电脑连接同一 WiFi，点击 AndroidWiFiADB 插件按键，会在右下角弹气泡提示是否连接成功，连接成功后即可断开 USB 连接线，享受无线提示</li>
<li>在使用过程中，要确保手机和电脑连接的同一 WiFi</li>
<li>可以通过 AndroidWiFiADB 设备面板查看设备及设置连接状态</li>
</ul>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/36CDAE13-BEBC-42D2-9226-A53DF0CEE4B1.png" alt=""></p>
<h2 id="Chrome-远程调试模拟器-真机"><a href="#Chrome-远程调试模拟器-真机" class="headerlink" title="Chrome 远程调试模拟器/真机"></a>Chrome 远程调试模拟器/真机</h2><blockquote>
<p><a href="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/?hl=zh-cn" target="_blank" rel="external">远程调试 Android 设备使用入门</a></p>
</blockquote>
<p>操作步骤：</p>
<ul>
<li>随便在某个页面打开调试页面，如下图找到 <strong>Remote devices</strong><br><img src="http://7vikhl.com1.z0.glb.clouddn.com/8FA1EB72-12AE-4984-AA64-2C7022B1F00E.png" alt=""></li>
<li>确保已勾选 <strong>Discover USB devices</strong><br><img src="http://7vikhl.com1.z0.glb.clouddn.com/B378E60C-01E5-43AE-8EA1-02999501F241.png" alt=""></li>
<li>如下图找到对应的模拟器或者真机，点击 <strong>Inspect</strong> 按键就可以打开调试界面<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/917006D3-5881-4A6F-814F-0B3BB54383D7.png" alt=""></li>
</ul>
<h2 id="其他问题记录"><a href="#其他问题记录" class="headerlink" title="其他问题记录"></a>其他问题记录</h2><p>1、Android Studio 导入项目卡在 <em>Building gradle project info</em> 的解决方法：</p>
<ul>
<li><a href="http://www.jianshu.com/p/1311562bbfd4" target="_blank" rel="external">修改项目中gradle-wrapper.properties文件中的distributionUrl</a></li>
<li>从一个能打开项目根目录拷贝 <code>gradle</code> 文件夹覆盖当前项目根目录中的 <code>gradle</code> 文件夹</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/android-banner.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Cordova" scheme="http://objcer.com/categories/Cordova/"/>
    
    
  </entry>
  
  <entry>
    <title>高清屏一像素边框问题</title>
    <link href="http://objcer.com/2017/06/19/one-pixel-border/"/>
    <id>http://objcer.com/2017/06/19/one-pixel-border/</id>
    <published>2017-06-19T13:24:02.000Z</published>
    <updated>2017-06-19T13:27:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/retinaDisplayMagnified_1159x285@2x.png" alt=""><br><a id="more"></a></p>
<h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><p>在 iPhone 设备（Retina屏）上一像素边框设置有问题</p>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/F115E87F-990C-4957-B007-26F8B844287D.png" alt=""></p>
<p>如上图右所示，UI 要求效果的边框是 1px；如上图左所示，开发出来的效果边框为 2px（膜拜一下UI的像素眼 👍🏿）。设置边框的代码很简单，如下：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e1e0e0</span>;</div></pre></td></tr></table></figure></p>
<p>那问题该如何解决呢 🤔</p>
<h2 id="基本概念-术语"><a href="#基本概念-术语" class="headerlink" title="基本概念(术语)"></a>基本概念(术语)</h2><h3 id="device-pixel-physical-pixel"><a href="#device-pixel-physical-pixel" class="headerlink" title="device pixel / physical pixel"></a>device pixel / physical pixel</h3><p>设备像素（或物理像素）是<strong>显示屏中最小的物理单元</strong>。 每个像素点根据操作系统的指示设置自己的颜色和亮度。</p>
<h3 id="density-independent-pixel-DIP"><a href="#density-independent-pixel-DIP" class="headerlink" title="density-independent pixel(DIP)"></a>density-independent pixel(DIP)</h3><p>设备无关像素(也叫密度无关像素)，可以认为是<strong>计算机坐标系统中得一个点</strong>，这个点代表一个可以由程序使用的虚拟像素，然后由相关系统转换为物理像素。</p>
<h3 id="CSS-pixel"><a href="#CSS-pixel" class="headerlink" title="CSS pixel"></a>CSS pixel</h3><p>CSS 像素是浏览器使用的抽象单元，用于精确地，一致地在网页上绘制内容。 通常，<strong>CSS 像素被称为与设备无关的像素（DIP）</strong>。</p>
<h3 id="devicePixelRatio"><a href="#devicePixelRatio" class="headerlink" title="devicePixelRatio"></a>devicePixelRatio</h3><p>设备像素和设备无关像素之间存在着一定的对应关系，这就是 devicePixelRatio（设备像素比）</p>
<blockquote>
<p>devicePixelRatio is the ratio between physical pixels and device-independent pixels (dips) on the device.</p>
</blockquote>
<p><strong>devicePixelRatio = device pixels / dips</strong></p>
<p><code>devicePixelRatio</code> 值为 1 的屏幕称之为标准屏；目前，大部分移动设备都是高清屏，即 <code>devicePixelRatio</code> 值大于 1 的屏幕，对于苹果设备来说，我们经常听到 Retina 视网膜屏，其中 iPhone6/6s/7 的 <code>devicePixelRatio</code> 值为 2；而 iPhone6 plus/6s plus/7 plus 的 <code>devicePixelRatio</code> 值为 3。</p>
<p>通过一个例子进一步理解其中的关系：<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/AF218F20-056F-4CB4-8A1F-2949C6913DCD.png" alt=""></p>
<p>假设我们需要绘制如下这个 <code>div</code> 节点，<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="attribute">height</span>=<span class="string">"2"</span> <span class="attribute">width</span>=<span class="string">"2"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<ul>
<li><code>div</code> 节点宽度和高度都是 <code>2px</code>，这里的 <code>2px</code> 指的就是 CSS pixel，而 CSS pixel 是抽象的单位，所以不管在标准屏，还是高清屏，其 CSS pixel 都是 <code>2px</code></li>
<li>1 CSS pixel 等同于 1 DIP</li>
<li>device pixels = devicePixelRatio * dips<ul>
<li>在标准屏（<code>devicePixelRatio</code> 值为 1）中绘制这个节点时，节点的设备像素为 <code>2px * 2px</code></li>
<li>在高清屏（<code>devicePixelRatio</code> 值为 2）中绘制这个节点时，节点的设备像素为 <code>4px * 4px</code></li>
</ul>
</li>
<li>高清屏中节点的面积是标准屏中的 4 倍</li>
</ul>
<p>在网页中，我们可以通过 JS 获取 <code>devicePixelRatio</code><br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.devicePixelRatio)</div></pre></td></tr></table></figure></p>
<p>在 CSS 媒体查询（media query）中也可以用到 <code>devicePixelRatio</code><br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@media</span> only screen and (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>),</div><div class="line"><span class="variable">@media</span> only screen and (<span class="attribute">min-device-pixel-ratio</span>: <span class="number">2</span>) &#123;</div><div class="line">	<span class="comment">/* TODO ... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="解决一像素边框问题"><a href="#解决一像素边框问题" class="headerlink" title="解决一像素边框问题"></a>解决一像素边框问题</h2><h3 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h3><p>了解了以上这些基本概念，我就知道设置边框一像素 <code>border: 1px solid #e1e0e0;</code> ，在高清屏中展示大于一像素的原因了，因为 <code>devicePixelRatio</code> 这个家伙导致的，由此我们会快就写出如下解决方案：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e1e0e0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@media</span> only screen and (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>),</div><div class="line"><span class="variable">@media</span> only screen and (<span class="attribute">min-device-pixel-ratio</span>: <span class="number">2</span>) &#123;</div><div class="line">    <span class="selector-tag">div</span> &#123;</div><div class="line">        <span class="attribute">border</span>: <span class="number">0.5px</span> solid <span class="number">#e1e0e0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@media</span> only screen and (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">3</span>),</div><div class="line"><span class="variable">@media</span> only screen and (<span class="attribute">min-device-pixel-ratio</span>: <span class="number">3</span>) &#123;</div><div class="line">    <span class="selector-tag">div</span> &#123;</div><div class="line">        <span class="attribute">border</span>: <span class="number">0.3333px</span> solid <span class="number">#e1e0e0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在 <code>devicePixelRatio</code> 为 2 的时候，设置边框为 <code>0.5px</code>；在 <code>devicePixelRatio</code> 为 2 的时候，设置边框为 <code>0.3333px</code>。但是要注意有些 Retina 屏的浏览器可能不认识 <code>0.5px</code> 的边框，将会把它解析成 <code>0px</code>，这样就没有边框了。</p>
<h3 id="终极解决方案"><a href="#终极解决方案" class="headerlink" title="终极解决方案"></a>终极解决方案</h3><p>利用伪元素 <code>before/after</code>  <code>transform</code> 来实现，其浏览器兼容性非常好 👍<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"onePixelBorder"</span>&gt;</div><div class="line">    One Pixel Border</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/9C362BA4-4C66-4590-BED9-6DCE84EA2232.png" alt=""></p>
<p>单一边框：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.onePixelBorder</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#2C2C2C</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.onePixelBorder</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#2C2C2C</span>;</div><div class="line">    <span class="attribute">-webkit-transform-origin</span>: center bottom;</div><div class="line">    <span class="attribute">transform-origin</span>: center bottom;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> only screen and (-webkit-min-device-pixel-ratio: <span class="number">2</span>),</div><div class="line">@media only screen and (min-device-pixel-ratio: <span class="number">2</span>) &#123;</div><div class="line">    <span class="selector-class">.onePixelBorder</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scaleY</span>(.5);</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(.5);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> only screen and (-webkit-min-device-pixel-ratio: <span class="number">3</span>),</div><div class="line">@media only screen and (min-device-pixel-ratio: <span class="number">3</span>) &#123;</div><div class="line">    <span class="selector-class">.onePixelBorder</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scaleY</span>(.333);</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(.333);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>四边边框：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.onePixelBorder</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#2C2C2C</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.onePixelBorder</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#2C2C2C</span>;</div><div class="line">    <span class="attribute">-webkit-transform-origin</span>: left top;</div><div class="line">    <span class="attribute">transform-origin</span>: left top;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> only screen and (-webkit-min-device-pixel-ratio: <span class="number">2</span>),</div><div class="line">@media only screen and (min-device-pixel-ratio: <span class="number">2</span>) &#123;</div><div class="line">    <span class="selector-class">.onePixelBorder</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">200%</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">200%</span>;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(.5);</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(.5);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> only screen and (-webkit-min-device-pixel-ratio: <span class="number">3</span>),</div><div class="line">@media only screen and (min-device-pixel-ratio: <span class="number">3</span>) &#123;</div><div class="line">    <span class="selector-class">.onePixelBorder</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">300%</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">300%</span>;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(.333);</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(.333);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意到以上通过 CSS 媒体查询获知当前屏幕的 <code>devicePixelRatio</code>，然后针对不同的 <code>devicePixelRatio</code> 进行处理。还有一种另一种方式，通过 JS 在 HTML 节点添加 class 表征不同的 <code>devicePixelRatio</code>，例如在 framework7 框架中， HTML 节点就添加了 <code>devicePixelRatio</code> 有关的 class:</p>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/BED6EAE5-B9D5-45B2-A22E-A1B698ECFED1.png" alt=""></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.smashingmagazine.com/2012/08/towards-retina-web/" target="_blank" rel="external">Towards A Retina Web</a><br><a href="https://www.quirksmode.org/blog/archives/2012/07/more_about_devi.html" target="_blank" rel="external">More about devicePixelRatio</a><br><a href="https://jinlong.github.io/2015/05/24/css-retina-hairlines/" target="_blank" rel="external">Retina屏的移动设备如何实现真正1px的线？</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/retinaDisplayMagnified_1159x285@2x.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://objcer.com/categories/CSS/"/>
    
    
      <category term="devicePixelRatio" scheme="http://objcer.com/tags/devicePixelRatio/"/>
    
  </entry>
  
  <entry>
    <title>Cordova 代码热更新</title>
    <link href="http://objcer.com/2017/06/18/cordova-hot-code-push/"/>
    <id>http://objcer.com/2017/06/18/cordova-hot-code-push/</id>
    <published>2017-06-17T16:30:29.000Z</published>
    <updated>2017-06-17T16:32:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/app-store.png" alt=""></p>
<p>基于 Cordova 框架能将网页应用 (js, html, css, 图片等) 打包成 App。当 App 在应用商店上架后，如何快速更新是我们需要考虑的问题。🤖</p>
<ul>
<li>本地打包新版本 App 发布到应用商店，但这中发布流程耗费时间，尤其是 Apple Store</li>
<li>应用加载网络资源，这样 App 展示的内容就可以保证是最新的，但当应用断网时，应用就无法正常使用</li>
</ul>
<p>我们能想的这两种方式都存在的很大的弊端，不适合实际应用！</p>
<a id="more"></a>
<h2 id="插件-Cordova-Hot-Code-Push-CHCP"><a href="#插件-Cordova-Hot-Code-Push-CHCP" class="headerlink" title="插件 Cordova Hot Code Push (CHCP)"></a>插件 Cordova Hot Code Push (CHCP)</h2><p>插件 <strong><a href="https://github.com/nordnet/cordova-hot-code-push" target="_blank" rel="external">Cordova Hot Code Push</a></strong> 正是针对 Cordava 应用如何快速更新问题而提供的解决方案，可以自动更新 web 相关的静态文件。</p>
<blockquote>
<p>该插件提供了详细的 wiki 文档，请参考：<a href="https://github.com/nordnet/cordova-hot-code-push/wiki" target="_blank" rel="external">wiki 文档</a></p>
</blockquote>
<h2 id="App-Store-支持么"><a href="#App-Store-支持么" class="headerlink" title="App Store 支持么"></a>App Store 支持么</h2><blockquote>
<p>近日，苹果App Store审核团队向一些开发者下最后通牒：2017年6月12日之前移除所有热更新相关代码、框架或SDK，并重新提交版本。如果不作调整，App可能会从App Store下架。</p>
</blockquote>
<p>苹果应用商店已经禁止使用类似 JSPatch 等热修复的框架或者SDK，那么这个插件提供的代码热更新功能是否违法这一规定呢? 🤔<br>📌 答案是否定的！此插件提供的代码热更新是 web 静态文件，苹果是允许这一做法的。但有两点值得注意：</p>
<ul>
<li>① 不能明显告知用户有新版本可用，询问用户是否需要更新到最新代码。这一做法会使用户产生困惑，这种更新方式和通过 App Store 更新有何区别。所以正确的做法是，在应用启动的时候，下载和安装热更新代码；或者在某个时机下载热更新代码，在应用下次打开时进行安装</li>
<li>② 如果通过此插件进行代码热更新后，应用功能发生巨大变化，譬如原来是一个计算器应用，代码热更新后，变成了一个音乐播放器，这种欺骗用户的做法也是会被苹果拒绝的</li>
</ul>
<h2 id="添加插件到项目中"><a href="#添加插件到项目中" class="headerlink" title="添加插件到项目中"></a>添加插件到项目中</h2><p>1、下载插件<br><em>要求 Cordova 版本 5.0+</em><br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">cordova</span> plugin <span class="keyword">add </span>cordova-hot-<span class="meta">code</span>-<span class="keyword">push-plugin </span>--save</div></pre></td></tr></table></figure></p>
<p>2、下载插件的命令行工具 <a href="https://github.com/nordnet/cordova-hot-code-push-cli" target="_blank" rel="external">cordova-hot-code-push-cli</a><br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cordova-hot-code-<span class="keyword">push</span>-<span class="keyword">cli</span></div></pre></td></tr></table></figure></p>
<p>该命令行工具可帮助我们自动生成配置文件 <code>chcp.json</code> 和 <code>chcp.manifest</code>，同时还提供了一些其他功能，详细可参考其 README。</p>
<p>3、下载插件后，执行 <code>cordova platform add ios</code> 时可能会遇到如下报错：<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Error: </span>Cannot find module 'xml2js/lib/processors'</div></pre></td></tr></table></figure></p>
<p>参考 <a href="https://github.com/nordnet/cordova-hot-code-push/issues/35" target="_blank" rel="external">xml2js is not installed</a> 解决方法很简单：<code>npm install xml2js</code></p>
<h2 id="热更新相关配置"><a href="#热更新相关配置" class="headerlink" title="热更新相关配置"></a>热更新相关配置</h2><p>Cordova Hot Code Push 下载安装到项目中后，需要对其进行相关的配置才能让其工作。</p>
<h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><p>Cordova Hot Code Push 热更新插件需要两个配置文件：</p>
<ul>
<li><strong>Application config：</strong><code>chcp.json</code> 包含发布相关信息：热更新代码版本号，应用 native side 版本号等等</li>
<li><strong>Content manifest：</strong><code>chcp.manifest</code> 包含项目热更新代码(静态)文件信息：文件名和文件哈希值</li>
</ul>
<p>这两个配置文件对于插件的运行缺一不可，前者描述了热更新代码的版本信息，后者提供了热更新代码文件的变更信息。借助 <code>cordova-hot-code-push-cli</code> 这个命令行工具可以辅助我们创建这两个配置文件。</p>
<h4 id="Application-config"><a href="#Application-config" class="headerlink" title="Application config"></a>Application config</h4><blockquote>
<p><a href="https://github.com/nordnet/cordova-hot-code-push/wiki/Application-config" target="_blank" rel="external">Application config</a> holds information about the current release of the web project.</p>
</blockquote>
<p><code>chcp.json</code> 置于 <code>www</code> 目录根目录，例子如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"wps-*****"</span>,</div><div class="line">  <span class="attr">"content_url"</span>: <span class="string">"https://kss.ksyun.com/*****/*****/"</span>,</div><div class="line">  <span class="attr">"ios_identifier"</span>: <span class="string">"326CN*****"</span>,</div><div class="line">  <span class="attr">"android_identifier"</span>: <span class="string">"com.**********.*****.*****.*****.*****"</span>,</div><div class="line">  <span class="attr">"update"</span>: <span class="string">"resume"</span>,</div><div class="line">  <span class="attr">"release"</span>: <span class="string">"2017.06.07-16.30.20"</span>,</div><div class="line">  <span class="attr">"min_native_interface"</span>: <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>1、配置项<br>① <code>name</code> 项目名称<br>② <code>content_url</code> web 项目文件在服务器上的存储路径（即 www 目录在云存储中的目录路径），热更新插件将此 URL 作为 base url，用于下载配置文件和项目更新文件（必需的配置项）<br>③ <code>release</code> 描述 web 项目版本号，每一次发布的版本号必须唯一（默认使用时间戳，格式为：yyyy.MM.dd-HH.mm.ss），插件是<strong>将版本号进行字符串相等比较</strong>来判断是否存在新版本（必需的配置项）<br>④ <code>min_native_interface</code></p>
<blockquote>
<p>Minimum version of the native side that is required to run this web content</p>
</blockquote>
<ul>
<li>cordova 项目主要包含两部分：web content 和 native side。前者是网页内容，后者是 cordova 插件，为网页提供原生 API 支持，web content 的运行是基于 native side。</li>
<li>该配置项指明 web content 运行时 native side 的最低版本。在 native side 代码有变更后（cordova 插件新增/删除，native side 版本号更新），为了确保 web content 能正常运行，需要更新 <code>min_native_interface</code> 的值</li>
</ul>
<p>在应用 <code>config.xml</code> 配置中可以定义了 native side 的版本号，例如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">chcp</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">native-interface</span> <span class="attr">version</span>=<span class="string">"5"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">chcp</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>例如当前项目 native side 的版本号是5：</p>
<ul>
<li>如果服务器上配置文件 <code>chcp.json</code> 中的 <code>min_native_interface</code> 值为 5，那么符合要求，热更新后的 web content 能够在正常运行</li>
<li>如果服务器上配置文件 <code>chcp.json</code> 中的 <code>min_native_interface</code> 值为 10，高于 <code>config.xml</code> 文件中 <code>&lt;native-interface /&gt;</code>，那么热更新将无法正常进行。此时，插件会提示错误 <code>chcp_updateLoadFailed</code>，提示应用需要更新升级</li>
</ul>
<p>⑤ <code>update</code> 何时触发进行安装（install）代码热更新<br>代码热更新涉及两个主要过程：fetch update 和 install update。前者获取热更新变更文件，后者将获取到的更新文件安装到 App 中生效。此字段是针对后者，何时 install update，可选值：</p>
<ul>
<li><code>start</code>：应用启动，默认项（install update when application is launched）</li>
<li><code>resume</code>：应用从后台恢复（install the update when application is resumed from background state）</li>
<li><code>now</code>：下载更新后立即执行（install update as soon as it has been downloaded）</li>
</ul>
<p>当然也可以禁用自动 install update，手动调用相关 API 进行 install<br>⑥ <code>android_identifier</code> / <code>ios_identifier</code></p>
<ul>
<li><code>android_identifier</code>: Package name of the Android version of the application</li>
<li><code>ios_identifier</code>: Identification number of the application<br>用于跳转到 Google Play Store 或者 App Store 该应用页面</li>
</ul>
<p>2、如何生成该文件：</p>
<ul>
<li>在 cordova 项目根目录执行 <code>cordova-hcp init</code> ，会通过命令行交互的方式，提示输入配置有关信息，创建该文件，会在项目根目录创建一个默认 Application config 文件 <code>cordova-hcp.json</code></li>
<li>然后在每次应用打包时，再执行 <code>cordova-hcp build</code> 即可在 web 项目 <code>www</code> 根目录生成一个 <code>chcp.json</code> 文件。</li>
</ul>
<h4 id="Content-manifest"><a href="#Content-manifest" class="headerlink" title="Content manifest"></a>Content manifest</h4><blockquote>
<p>Content manifest describes the state of the files inside your web project.</p>
</blockquote>
<p>通过执行 <code>cordova-hcp build</code> 在 <code>www</code> 根目录自动生成 <code>chcp.manifest</code> 文件<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"file"</span>: <span class="string">"import.html"</span>,</div><div class="line">    <span class="attr">"hash"</span>: <span class="string">"fc9301d4bd7381ba6033aa51884ed2dd"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"file"</span>: <span class="string">"index.html"</span>,</div><div class="line">    <span class="attr">"hash"</span>: <span class="string">"f73630f62a531ab6c41cd067eb4f9b07"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"file"</span>: <span class="string">"lib/lib.min.js"</span>,</div><div class="line">    <span class="attr">"hash"</span>: <span class="string">"6ecb0251f4c54f80586d9059dfc61de8"</span></div><div class="line">  &#125;,</div><div class="line">  ...</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><code>chcp.manifest</code> 文件中包含的是 web content 静态文件信息，每一个项都包括两个字段：</p>
<ul>
<li><code>file</code>: 相对于 <code>www</code> 目录的文件路径</li>
<li><code>hash</code>: 文件的 MD5 哈希值，用于判断文件是否发生变更</li>
</ul>
<p>基于 <code>chcp.manifest</code> 文件</p>
<ul>
<li>在 fetch update 阶段，从服务器上获取新增、修改文件</li>
<li>在 install update 阶段，移除被删除文件</li>
</ul>
<h3 id="Cordova-config-xml-配置"><a href="#Cordova-config-xml-配置" class="headerlink" title="Cordova config.xml 配置"></a>Cordova <code>config.xml</code> 配置</h3><p>Cordova 项目的 <code>config.xml</code> 文件用于设置项目配置选项，Cordova Hot Code Push 热更新插件的配置项也需要在该文件中进行相应的配置。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">chcp</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">config-file</span> <span class="attr">url</span>=<span class="string">"https://kss.ksyun.com/********/chcp.json"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">auto-download</span> <span class="attr">enabled</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">auto-install</span> <span class="attr">enabled</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">native-interface</span> <span class="attr">version</span>=<span class="string">"1"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">chcp</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li><code>config-file</code>：配置文件 <code>chcp.json</code> 从服务器上加载的路径（必须的配置项）</li>
<li><code>auto-download</code>：是否自动下载热更新代码，默认是 true</li>
<li><code>auto-install</code>：是否自动安装热更新代码，默认是 true</li>
<li><code>native-interface</code>：当前 native side 的版本号</li>
</ul>
<p>可以禁用自动下载，安装热更新代码，通过手动调用执行。</p>
<h2 id="代码热更新原理"><a href="#代码热更新原理" class="headerlink" title="代码热更新原理"></a>代码热更新原理</h2><h3 id="热更新流程"><a href="#热更新流程" class="headerlink" title="热更新流程"></a>热更新流程</h3><p><img src="http://7vikhl.com1.z0.glb.clouddn.com/update-workflow.png" alt=""></p>
<ul>
<li>① 应用启动</li>
<li>② 热更新插件初始化，并在后台加载更新模块 (update loader)</li>
<li>③ 更新模块 (update loader) 从 Cordova 项目配置 <code>config.xml</code> 文件中获取 <code>config-file</code> （热更新插件配置文件 <code>chcp.json</code> 的加载路径），然后加载配置文件 <code>chcp.json</code>，获取其中的 <code>release</code> 版本号，对比当前的版本号，若二者不同，说明有新版本，执行下一步</li>
<li>④ 更新模块 (update loader) 从 <code>chcp.json</code> 配置文件中获取 <code>content_url</code> 作为 base url，然后加载 <code>chcp.manifest</code> 文件，或者新版本文件变更信息</li>
<li>⑤ 更新模块 (update loader) 根据 <code>content_url</code> 作为 base url，下载所有变更、新增文件</li>
<li>⑥ 如果一切顺利， 更新模块 (update loader) 发送通知，该更新已准备好进行安装</li>
<li>⑦ 安装更新，应用重定向到新版本页面</li>
</ul>
<h3 id="Cordova-web-project-存储与更新"><a href="#Cordova-web-project-存储与更新" class="headerlink" title="Cordova web project 存储与更新"></a>Cordova web project 存储与更新</h3><p>Cordova 项目中都包含一个 <code>www</code> 目录，存储网页静态文件，Cordova 打包移动应用时，会将其拷贝到各自的项目目录，同时会被打包到应用中。</p>
<ul>
<li>Android: platforms/android/assets/www.</li>
<li>iOS: platforms/ios/www.</li>
</ul>
<p><code>www</code> 目录打包到应用中之后，我们就没办法对其进行更新了，因为只有可读权限。为了解决这一问题，在应用第一次启动的时候，从应用 bundle 中加载网页内容的同时，将 <code>www</code> 目录拷贝到外部目录中，在后续应用启动时，都从这个外部存储的静态文件中加载文件，而对于外部的这个存储目录，我们就有读写权限，这样就为我们动态更新网页代码提供了可能。</p>
<p>在 safari 调试页面执行 <code>cordova.file.applicationStorageDirectory</code> 可以得到应用的存储路径，点击可以打开 Finder 目录。<br>从 <code>Library/Application Support</code> 目录下就可以找到存储 web content 的外部目录。<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/chcp-external-folder.png" alt=""><br><img src="http://7vikhl.com1.z0.glb.clouddn.com/3CA8CB1D-C26D-4F98-951C-DBE94650CA5D.png" alt=""></p>
<p>Cordova Hot Code Push 插件为每一个版本内容都创建了一个对应的目录，以配置文件 <code>chcp.json</code> 中 <code>release</code> 字段值为目录名，存放不同版本 <code>www</code> 目录中的静态文件，这种处理方式的好处是：</p>
<ul>
<li>避免了文件缓存问题。例如 iOS UIWebView 缓存 css 文件，即使刷新页面，也不会清除缓存，除非重启应用才能强制清除缓存。不同版本置于不同的目录，由于加载路径不同，这样就可以解决文件的缓存问题</li>
<li>避免在更新代码文件时，和当前已有文件出现冲突</li>
<li>方便回滚到前一个版本</li>
</ul>
<p>🤖 下面了解一下，获取更新内容和安装更新内容时都发生了什么？</p>
<p><strong>1、获取更新内容</strong></p>
<ul>
<li>根据 <code>release</code> 版本号，创建一个新的目录</li>
<li>在新目录中，创建 <code>update</code> 目录，根据 <code>chcp.manifest</code> 文件，将所有变更、新增文件下载到该目录中</li>
<li>新版本对应的 <code>chcp.json</code> 和 <code>chcp.manifest</code> 文件也会置于 <code>update</code> 目录中</li>
</ul>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/926064F1-2CF2-4871-90B6-791BA0059C13.png" alt=""></p>
<p><strong>2、安装更新内容</strong></p>
<ul>
<li>将当前版本对应目录下的 <code>www</code> 目录拷贝到新版本对应的目录下</li>
<li>在新版本对应目录下，将 <code>update</code> 目录中变更、新增文件拷贝到 <code>www</code> 目录中，同时根据 <code>chcp.manifest</code> 移除被删除文件</li>
<li>移除 <code>update</code> 目录</li>
<li>应用重定向到新版本目录下加载网页内容</li>
</ul>
<h2 id="插件-JS-接口"><a href="#插件-JS-接口" class="headerlink" title="插件 JS 接口"></a>插件 JS 接口</h2><p>默认情况下，Cordova Hot Code Push (CHCP) 插件不需要额外的代码，就可以自动执行 <code>checking-&gt;downloading-&gt;installation</code> 这个更新循环。当然也可以通过其提供的接口来控制这更新流程，这时，我们需要在项目 <code>config.xml</code> 文件中配置 <code>auto-download</code> 和 <code>auto-install</code> 为 <code>false</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">chcp</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">config-file</span> <span class="attr">url</span>=<span class="string">"https://kss.ksyun.com/******/chcp.json"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">auto-download</span> <span class="attr">enabled</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">auto-install</span> <span class="attr">enabled</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">native-interface</span> <span class="attr">version</span>=<span class="string">"1"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">chcp</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><p>Cordova Hot Code Push 插件提供了一系列事件监听，方便我们对不同情况进行不同的处理。例如：<code>chcp_updateInstalled</code> 事件，当更新安装完成时会发出这个通知；<code>chcp_updateInstallFailed</code> 事件，当更新安装失败时发出这个通知，等等。</p>
<p>值得注意的是，需要在 <code>deviceready</code> 事件回调后，才进行 CHCP 插件的事件监听注册。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = &#123;</div><div class="line"></div><div class="line">  <span class="comment">// Application Constructor</span></div><div class="line">  initialize: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.bindEvents();</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// Bind any events that are required.</span></div><div class="line">  <span class="comment">// Usually you should subscribe on 'deviceready' event to know, when you can start calling cordova modules</span></div><div class="line">  bindEvents: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'deviceready'</span>, <span class="keyword">this</span>.onDeviceReady, <span class="literal">false</span>);</div><div class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'chcp_updateIsReadyToInstall'</span>, <span class="keyword">this</span>.onUpdateReady, <span class="literal">false</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// deviceready Event Handler</span></div><div class="line">  onDeviceReady: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Device is ready for work'</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// chcp_updateIsReadyToInstall Event Handler</span></div><div class="line">  onUpdateReady: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Update is ready for installation'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">app.initialize();</div></pre></td></tr></table></figure></p>
<p>详细事件监听列表参考文档：<a href="https://github.com/nordnet/cordova-hot-code-push/wiki/Listen-for-update-events" target="_blank" rel="external">Listen for update events</a></p>
<h3 id="获取-安装更新"><a href="#获取-安装更新" class="headerlink" title="获取/安装更新"></a>获取/安装更新</h3><p>① fetch update <code>chcp.fetchUpdate</code><br>调用 API 从服务器中获取更新<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchUpdate</span><span class="params">(cb)</span></span> &#123;</div><div class="line">    var options = &#123;</div><div class="line">        <span class="string">'config-file'</span>: <span class="string">'https://kss.ksyun.com/******/chcp.json'</span></div><div class="line">    &#125;;</div><div class="line">    chcp.fetchUpdate(updateCallback, options);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">updateCallback</span><span class="params">(error, data)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">error</span>) &#123;</div><div class="line">            console.<span class="built_in">log</span>(<span class="string">'--fetchUpdate error--'</span>, <span class="built_in">error</span>.code, <span class="built_in">error</span>.description);</div><div class="line">        &#125;</div><div class="line">        console.<span class="built_in">log</span>(<span class="string">'--fetchUpdate--'</span>, data, data.<span class="built_in">config</span>);</div><div class="line">        cb &amp;&amp; cb(<span class="built_in">error</span>, data);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>② install update <code>chcp.installUpdate</code><br>调用 API 安装更新<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">installUpdate</span><span class="params">(cb)</span></span> &#123;</div><div class="line">    chcp.installUpdate(installationCallback);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">installationCallback</span><span class="params">(error)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">error</span>) &#123;</div><div class="line">            console.<span class="built_in">log</span>(<span class="string">'Failed to install the update with error code: '</span> + <span class="built_in">error</span>.code);</div><div class="line">            console.<span class="built_in">log</span>(<span class="built_in">error</span>.description);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            console.<span class="built_in">log</span>(<span class="string">'Update installed!'</span>);</div><div class="line">        &#125;</div><div class="line">        cb &amp;&amp; cb(<span class="built_in">error</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在安装更新之前，还需要检测是否有更新可用于安装<br><code>chcp.isUpdateAvailableForInstallation</code><br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkIsUpdateAvailableForInstallation</span><span class="params">(cb)</span></span> &#123;</div><div class="line">    chcp.isUpdateAvailableForInstallation(callbackMethod);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callbackMethod</span><span class="params">(error, data)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">error</span>) &#123;</div><div class="line">            console.<span class="built_in">log</span>(<span class="string">'No update was loaded =&gt; nothing to install'</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            console.<span class="built_in">log</span>(<span class="string">'Current content version: '</span> + data.currentVersion);</div><div class="line">            console.<span class="built_in">log</span>(<span class="string">'Ready to be installed:'</span> + data.readyToInstallVersion);</div><div class="line">        &#125;</div><div class="line">        cb &amp;&amp; cb(<span class="built_in">error</span>, data);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="获取版本信息"><a href="#获取版本信息" class="headerlink" title="获取版本信息"></a>获取版本信息</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function getVersionInfo(cb) &#123;</div><div class="line">    chcp.getVersionInfo((err, <span class="built_in">data</span>) =&gt; &#123;</div><div class="line">        console.<span class="keyword">log</span>(<span class="string">'Current web version: '</span> + <span class="built_in">data</span>.currentWebVersion);</div><div class="line">        console.<span class="keyword">log</span>(<span class="string">'Previous web version: '</span> + <span class="built_in">data</span>.previousWebVersion);</div><div class="line">        console.<span class="keyword">log</span>(<span class="string">'Loaded and ready for installation web version: '</span> + <span class="built_in">data</span>.readyToInstallWebVersion);</div><div class="line">        console.<span class="keyword">log</span>(<span class="string">'Application version name: '</span> + <span class="built_in">data</span>.appVersion);</div><div class="line">        console.<span class="keyword">log</span>(<span class="string">'Application build version: '</span> + <span class="built_in">data</span>.buildVersion);</div><div class="line"></div><div class="line">        cb &amp;&amp; cb(err, <span class="built_in">data</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h3><p>在下载，安装更新过程中都有可能出现错误，详细的错误代码参考：<a href="https://github.com/nordnet/cordova-hot-code-push/wiki/Error-codes" target="_blank" rel="external">Error codes</a></p>
<h2 id="请求到应用商店进行-APP-升级"><a href="#请求到应用商店进行-APP-升级" class="headerlink" title="请求到应用商店进行 APP 升级"></a>请求到应用商店进行 APP 升级</h2><p>插件配置文件 <code>chcp.json</code> 中 <code>min_native_interface</code> 选项是网页内容执行时要求 native side 最低版本号。每一次热更新过程中，都会去检查这个逻辑，判断当前 native side 的版本是否符合要求。如果当前 APP 中的 native side 版本号低于 <code>chcp.json</code> 中 <code>min_native_interface</code> 的选项值，那么执行热更新就会提示错误：<code>chcp.error.APPLICATION_BUILD_VERSION_TOO_LOW</code>，这个时候，我们应当提示用户前往应用商店对 APP 进行升级。</p>
<p>恰当的处理方式是，在出现 <code>chcp.error.APPLICATION_BUILD_VERSION_TOO_LOW</code> 错误时，弹框提示用户前往应用商店进行升级，弹框有两个按键：一个点击后跳转到应用商店该 APP 对应下载页面；另一个点击后关闭弹框。插件也提供了 API 处理这个过程，我们只需：</p>
<ul>
<li>在 <code>chcp.json</code> 配置文件中设置 <code>android_identifier</code> 和 <code>ios_identifier</code></li>
<li>调用 <code>chcp.requestApplicationUpdate</code> 方法</li>
</ul>
<p>监听 <code>chcp_updateLoadFailed</code> 事件，判断错误代码为 <code>chcp.error.APPLICATION_BUILD_VERSION_TOO_LOW</code> 时，调用 <code>chcp.requestApplicationUpdate</code> 方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = &#123;</div><div class="line"></div><div class="line">  <span class="comment">// Application Constructor</span></div><div class="line">  initialize: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.bindEvents();</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// Bind any events that are required.</span></div><div class="line">  <span class="comment">// Usually you should subscribe on 'deviceready' event to know, when you can start calling cordova modules</span></div><div class="line">  bindEvents: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'deviceready'</span>, <span class="keyword">this</span>.onDeviceReady, <span class="literal">false</span>);</div><div class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'chcp_updateLoadFailed'</span>, <span class="keyword">this</span>.onUpdateLoadError, <span class="literal">false</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// deviceready Event Handler</span></div><div class="line">  onDeviceReady: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">onUpdateLoadError</span>: <span class="function"><span class="keyword">function</span>(<span class="params">eventData</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> error = eventData.detail.error;</div><div class="line">    <span class="keyword">if</span> (error &amp;&amp; error.code == chcp.error.APPLICATION_BUILD_VERSION_TOO_LOW) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Native side update required'</span>);</div><div class="line">        <span class="keyword">var</span> dialogMessage = <span class="string">'New version of the application is available on the store. Please, update.'</span>;</div><div class="line">        chcp.requestApplicationUpdate(dialogMessage, <span class="keyword">this</span>.userWentToStoreCallback, <span class="keyword">this</span>.userDeclinedRedirectCallback);</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">userWentToStoreCallback</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// user went to the store from the dialog</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">userDeclinedRedirectCallback</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// User didn't want to leave the app.</span></div><div class="line">    <span class="comment">// Maybe he will update later.</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">app.initialize();</div></pre></td></tr></table></figure></p>
<h2 id="Usage-Limitations"><a href="#Usage-Limitations" class="headerlink" title="Usage Limitations"></a><a href="https://github.com/nordnet/cordova-hot-code-push/wiki/Usage-Limitations" target="_blank" rel="external">Usage Limitations</a></h2><p><strong>1、Don’t rename/delete/move your index page</strong><br>Cordova 项目 <code>config.xml</code> 文件中都会定义一个入口页面 <code>index.html</code>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">content</span> <span class="attr">src</span>=<span class="string">"index.html"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>应用启动的时候，就会加载 <code>index.html</code> 页面作为入口，在代码热更新过程中，这是唯一不能删除，移动和重命名的文件，否则，代码热更新后，应用就无法正常加载到 <code>index.html</code> 入口页面，所以会出错。</p>
<p>诚然，如果你需要重命名，或者修改其存储路径，那么需要在 <code>config.xml</code> 文件中修改 <code>content</code> 配置。</p>
<p><strong>2、Do not clean plugin’s inner preferences with cordova-plugin-nativestorage</strong><br>cordova-plugin-nativestorage 插件提供了读写本地存储数据的能力，例如在 iOS 中对应的本地存储是 <code>NSUserDefault</code>，CHCP 热更新插件在其中存储了一些属性。</p>
<p>调用 cordova-plugin-nativestorage 插件中的 <code>NativeStorage.clear()</code> 方法会清除本地存储数据，这就会影响到 CHCP 插件的正常运行，导致下一次应用启动时加载的是应用 bundle 中 <code>www</code> 目录中的网页内容，而非外部目录存储的当前版本网页内容。</p>
<h2 id="将-www-目录打包上传到服务器或者云存储目录"><a href="#将-www-目录打包上传到服务器或者云存储目录" class="headerlink" title="将 www 目录打包上传到服务器或者云存储目录"></a>将 <code>www</code> 目录打包上传到服务器或者云存储目录</h2><p>新版本发布时，都需要执行如下处理：</p>
<ul>
<li>对 <code>www</code> 目录下的静态文件进行打包，包括代码压缩，合并等等</li>
<li>执行 <code>cordova-hcp build</code> 生成 <code>chcp.json</code> 和 <code>chcp.manifest</code> 文件</li>
<li>将 <code>www</code> 目录下的静态文件上传至服务器或者云存储目录</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/app-store.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;基于 Cordova 框架能将网页应用 (js, html, css, 图片等) 打包成 App。当 App 在应用商店上架后，如何快速更新是我们需要考虑的问题。🤖&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地打包新版本 App 发布到应用商店，但这中发布流程耗费时间，尤其是 Apple Store&lt;/li&gt;
&lt;li&gt;应用加载网络资源，这样 App 展示的内容就可以保证是最新的，但当应用断网时，应用就无法正常使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们能想的这两种方式都存在的很大的弊端，不适合实际应用！&lt;/p&gt;
    
    </summary>
    
      <category term="Cordova" scheme="http://objcer.com/categories/Cordova/"/>
    
    
      <category term="Cordova Hot Code Push" scheme="http://objcer.com/tags/Cordova-Hot-Code-Push/"/>
    
  </entry>
  
  <entry>
    <title>URI, URL, URN 的区别</title>
    <link href="http://objcer.com/2017/06/04/The-Difference-Between-URLs-and-URIs/"/>
    <id>http://objcer.com/2017/06/04/The-Difference-Between-URLs-and-URIs/</id>
    <published>2017-06-04T08:43:26.000Z</published>
    <updated>2017-06-04T08:48:24.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>URI: Uniform Resource Identifier (统一资源标识符)</li>
<li>URL: Uniform Resource Locator (统一资源定位符)</li>
<li>URN: Uniform Resource Name (统一资源名称)</li>
</ul>
<a id="more"></a>
<h2 id="URI-URL-URN"><a href="#URI-URL-URN" class="headerlink" title="URI, URL, URN"></a>URI, URL, URN</h2><p><strong>URI, URL, URN</strong> 三者关系图:<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/URI-vs-URL.png" alt=""></p>
<p>📌 关系：</p>
<ul>
<li>URI 是一个紧凑的字符串用来标示抽象或物理资源</li>
<li>URL 相对于 URI，除了确定一个资源，还提供一种定位该资源的主要访问机制或者网络地址 (“access mechanism” or “network location”) 例如：http:// or ftp://</li>
<li>URI 包括 URL 和 URN，每一个 URL 都是 URI</li>
<li>URN 是唯一标识的一部分，就是一个特殊的名字</li>
</ul>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/800px-URI_Euler_Diagram_no_lone_URIs.svg.png" alt=""></p>
<blockquote>
<p><em>[维基百科]:</em> URI 可被视为定位符（URL），名称（URN）或两者兼备。统一资源名（URN）如同一个人的名称，而统一资源定位符（URL）代表一个人的住址。换言之，URN 定义某事物的身份，而 URL 提供查找该事物的方法。</p>
</blockquote>
<p>举例说明：</p>
<ul>
<li><a href="http://www.wikipedia.org/" target="_blank" rel="external">http://www.wikipedia.org/</a><br>  这个就是 URL，标识一个特定的互联网资源，并且可以通过 http 协议访问该网络资源</li>
<li>urn:isbn:0-395-36341-1<br>  这个就是 URN，指定标识系统（即国际标准书号ISBN）和某资源在该系统中的唯一表示的URI。它可以允许人们在不指出其位置和获得方式的情况下谈论这本书</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://danielmiessler.com/study/url-uri/#gs.taQ4gpU" target="_blank" rel="external">The Difference Between URLs and URIs</a><br><a href="https://zh.wikipedia.org/zh-cn/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E6%A0%87%E5%BF%97%E7%AC%A6" target="_blank" rel="external">统一资源标志符</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;URI: Uniform Resource Identifier (统一资源标识符)&lt;/li&gt;
&lt;li&gt;URL: Uniform Resource Locator (统一资源定位符)&lt;/li&gt;
&lt;li&gt;URN: Uniform Resource Name (统一资源名称)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程" scheme="http://objcer.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="URI" scheme="http://objcer.com/tags/URI/"/>
    
      <category term="URL" scheme="http://objcer.com/tags/URL/"/>
    
      <category term="URN" scheme="http://objcer.com/tags/URN/"/>
    
  </entry>
  
  <entry>
    <title>Cordova 远程推送 - iOS篇</title>
    <link href="http://objcer.com/2017/06/04/cordova-register-and-receive-push-notifications-iOS/"/>
    <id>http://objcer.com/2017/06/04/cordova-register-and-receive-push-notifications-iOS/</id>
    <published>2017-06-03T17:03:12.000Z</published>
    <updated>2017-06-03T17:05:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/iOS-PUsh-Notifications.png" alt=""></p>
<a id="more"></a>
<h2 id="APNs"><a href="#APNs" class="headerlink" title="APNs"></a>APNs</h2><blockquote>
<p>APNs(<em>Apple Push Notification service</em>) <a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html#//apple_ref/doc/uid/TP40008194-CH8-SW1" target="_blank" rel="external">官方文档 Overview</a></p>
</blockquote>
<h3 id="推送原理"><a href="#推送原理" class="headerlink" title="推送原理"></a>推送原理</h3><p>当 Provider 远程服务器需要向 App 推送一条消息时，并不是直接往 App 推送消息，而是推送苹果 APNs 服务器上，而苹果的 APNs 服务器再通过与设备建立长连接进而把消息推送到我们的设备上。<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/82BDFC5F-339D-4402-8719-5197D0246305.png" alt=""></p>
<p>由此：APNs 推送就划分成两部分：</p>
<ul>
<li>Provider-to-APNs connection (服务端交互)</li>
<li>APNs-to-device connection (客户端交互)</li>
</ul>
<h3 id="deviceToken"><a href="#deviceToken" class="headerlink" title="deviceToken"></a>deviceToken</h3><p>1、当一个 App 注册接收远程通知时，系统会发送请求到 APNs 服务器，APNs 服务器收到此请求会生成一个<strong>独一无二</strong>的 deviceToken，发送到对应请求的 App 上。然后 App 把此 deviceToken 发送给我们自己的服务器 Provider。</p>
<blockquote>
<p>❗️一个 deviceToken 可以唯一标识某个设备上的某个 App，可以理解成：<strong>deviceToken = device UUID + App Bundle ID</strong></p>
</blockquote>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/Managing%20the%20device%20token.png" alt=""></p>
<p>2、Provider 给我们的设备推送通知的时候，必须包含此 deviceToken。<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/Remote%20notification%20path%20from%20provider%20to%20device.png" alt=""></p>
<h3 id="推送消息-Payload"><a href="#推送消息-Payload" class="headerlink" title="推送消息 Payload"></a>推送消息 Payload</h3><blockquote>
<p><a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CreatingtheNotificationPayload.html#//apple_ref/doc/uid/TP40008194-CH10-SW1" target="_blank" rel="external">Creating the Remote Notification Payload</a></p>
</blockquote>
<p>1、Payload 消息大小</p>
<ul>
<li>For regular remote notifications, the maximum size is 4KB (4096 bytes)</li>
<li>For Voice over Internet Protocol (VoIP) notifications, the maximum size is 5KB (5120 bytes)</li>
<li>If you are using the legacy APNs binary interface to send notifications instead of an HTTP/2 request, the maximum payload size is 2KB (2048 bytes)</li>
</ul>
<p>当 Payload 负载大小超过规定的负载大小时，APNs 会拒绝发送此消息。</p>
<p>2、Payload 消息格式<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 以下为 Payload 常用字段，详细请参考官方文档</div><div class="line">&#123;</div><div class="line">    <span class="string">"aps"</span> : &#123;</div><div class="line">        <span class="string">"alert"</span>              :   &#123;   // <span class="type">string</span> <span class="keyword">or</span> dictionary</div><div class="line">            <span class="string">"title"</span>          :   "<span class="type">string</span><span class="string">",</span></div><div class="line">            "<span class="keyword">body</span><span class="string">"           :   "</span>string<span class="string">"</span></div><div class="line">        &#125;,</div><div class="line">        "badge<span class="string">"              :    number,</span></div><div class="line">        "sound<span class="string">"              :    "</span>string<span class="string">"</span></div><div class="line">    &#125;,</div><div class="line">    "acme1<span class="string">" : [ "</span>foo<span class="string">",  "</span>bar<span class="string">" ]</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>aps：推送消息必须有的 key<ul>
<li>alert：推送消息包含此 key 值，系统就会根据用户的设置展示标准的推送信息<ul>
<li>title：简短描述此调推送消息的目的</li>
<li>body：推送的内容</li>
</ul>
</li>
<li>badge：在 app 图标上显示消息数量，缺少此 key ，消息数量就不会改变，消除标记时把此 key 对应的 value 设置为0</li>
<li>sound：设置推送声音的key值，系统默认提示声音对应的 value 值为 default</li>
</ul>
</li>
<li>acme: 以 <code>acme</code> 作为前缀，表示自定义数据</li>
</ul>
<p>例如：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"aps"</span> : &#123;</div><div class="line">        <span class="attr">"alert"</span>: <span class="string">"This is a notification"</span>,</div><div class="line">        <span class="attr">"badge"</span>: <span class="number">1</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"acme-data"</span>: [ <span class="string">"foo"</span>,  <span class="string">"bar"</span> ]</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="attr">"aps"</span> : &#123;</div><div class="line">        <span class="attr">"alert"</span>: &#123;</div><div class="line">            <span class="attr">"title"</span>: <span class="string">"This is Title"</span>,</div><div class="line">            <span class="attr">"body"</span>: <span class="string">"This is Body"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"badge"</span>: <span class="number">1</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"acme-data"</span>: [ <span class="string">"foo"</span>,  <span class="string">"bar"</span> ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、当设备处于离线 offline 状态时，APNs 会为保留 Provider 所推送的最后一条通知，当设备转换为连网状态时，APNs则把其保留的最后一条通知推送给我们的设备；如果设备长时间离线，那么最后一条通知也有可能被丢弃。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="http://7vikhl.com1.z0.glb.clouddn.com/apns-app.png" alt=""></p>
<ul>
<li>① App 向系统发起请求</li>
<li>② 系统向 APNs 发送注册远程推送请求</li>
<li>③ APNs 生成 deviceToken 并返回</li>
<li>④ App 将 deviceToken 发送给服务器 Provider</li>
<li>⑤ 从推送管理平台向 Provider 发出推送消息指令</li>
<li>⑥ Provider 推送消息给 APNs</li>
<li>⑦ APNs 推送消息给 App</li>
</ul>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>Cordova 项目要集成远程推送功能，需要用到 <a href="https://github.com/phonegap/phonegap-plugin-push" target="_blank" rel="external">phonegap-plugin-push</a> 这个插件，该插件提供了对多个平台的推送支持，当然包括 iOS 和 Android，下面以 iOS 项目为例，详细介绍整个安装过程。</p>
<blockquote>
<p>iOS 安装过程：<a href="https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/INSTALLATION.md#ios-details" target="_blank" rel="external">参考文档</a></p>
</blockquote>
<p>❗️注意：</p>
<ul>
<li>以下安装过程需要<strong>翻墙</strong></li>
<li>该插件要求 cordova 版本至少 6.1.0，否则要么更新 cordova 或者下载时指定该插件版本号：<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cordova plugin <span class="keyword">add</span> phonegap-plugin-<span class="keyword">push</span><span class="subst">@1</span><span class="number">.8</span><span class="number">.1</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>执行安装命令：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">➜  wps-<span class="built_in">writer</span> git:(feature/<span class="keyword">edit</span>) cordova plugin add phonegap-plugin-<span class="keyword">push</span></div><div class="line">Fetching plugin <span class="string">"phonegap-plugin-push@1.10.4"</span> via npm</div><div class="line">Installing <span class="string">"phonegap-plugin-push"</span> <span class="keyword">for</span> browser</div><div class="line">Installing <span class="string">"phonegap-plugin-push"</span> <span class="keyword">for</span> ios</div><div class="line">Failed to install 'phonegap-plugin-<span class="keyword">push</span>':undefined</div><div class="line"><span class="built_in">Error</span>: CocoaPods was <span class="keyword">not</span> found. Please install version <span class="number">1.0</span><span class="number">.1</span> <span class="keyword">or</span> greater from https:<span class="comment">//cocoapods.org/</span></div></pre></td></tr></table></figure></p>
<p>提示我们要安装 CocoaPods，执行如下命令进行安装：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  wps-writer git:(feature/edit) ✗ sudo gem <span class="keyword">install</span> cocoapods</div><div class="line"><span class="keyword">ERROR</span>:  Could <span class="keyword">not</span> find a valid gem <span class="string">'cocoapods'</span> (&gt;= <span class="number">0</span>), here <span class="keyword">is</span> why:</div><div class="line">          Unable <span class="keyword">to</span> download <span class="keyword">data</span> <span class="keyword">from</span> https://ruby.taobao.org/ - Errno::ECONNRESET: <span class="keyword">Connection</span> <span class="keyword">reset</span> <span class="keyword">by</span> peer - SSL_connect (https://ruby.taobao.org/specs<span class="number">.4</span><span class="number">.8</span>.gz)</div></pre></td></tr></table></figure></p>
<p>根据错误提示我们知道，从淘宝 Ruby 的软件源中找不到 cocoapods，我们需要增加 gem 源<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 增加/删除 gem 源</span></div><div class="line">gem sources --<span class="keyword">add</span> https:<span class="comment">//rubygems.org/</span></div><div class="line">gem sources --<span class="keyword">remove</span> https:<span class="comment">//rubygems.org/</span></div><div class="line"><span class="meta"># 查看 gem 源</span></div><div class="line">gem sources -l</div></pre></td></tr></table></figure></p>
<p>安装完 CocoaPods 之后，重新安装插件：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">➜  wps-writer git:(feature/edit) cordova plugin add phonegap-plugin-push</div><div class="line">Fetching plugin <span class="string">"phonegap-plugin-push@1.10.4"</span> via npm</div><div class="line">Installing <span class="string">"phonegap-plugin-push"</span> <span class="keyword">for</span> browser</div><div class="line">Installing <span class="string">"phonegap-plugin-push"</span> <span class="keyword">for</span> ios</div><div class="line">Failed to install <span class="string">'phonegap-plugin-push'</span>:Error: pod: Command failed with exit <span class="selector-tag">code</span> <span class="number">1</span></div><div class="line">    at ChildProcess<span class="selector-class">.whenDone</span> (/Users/YingshanDeng/Documents/WebPS/wps-writer/platforms/ios/cordova/node_modules/cordova-common/src/superspawn<span class="selector-class">.js</span>:<span class="number">169</span>:<span class="number">23</span>)</div><div class="line">    at emitTwo (events<span class="selector-class">.js</span>:<span class="number">100</span>:<span class="number">13</span>)</div><div class="line">    at ChildProcess<span class="selector-class">.emit</span> (events<span class="selector-class">.js</span>:<span class="number">185</span>:<span class="number">7</span>)</div><div class="line">    at maybeClose (internal/child_process<span class="selector-class">.js</span>:<span class="number">827</span>:<span class="number">16</span>)</div><div class="line">    at Process<span class="selector-class">.ChildProcess</span>._handle<span class="selector-class">.onexit</span> (internal/child_process<span class="selector-class">.js</span>:<span class="number">211</span>:<span class="number">5</span>)</div><div class="line">Error: pod: Command failed with exit <span class="selector-tag">code</span> <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>安装文档中也可以找到 <a href="https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/INSTALLATION.md#common-cocoapod-installation-issues" target="_blank" rel="external">解决这个问题</a> 的介绍：</p>
<ul>
<li>进入 <code>platforms/ios</code> iOS 项目根目录，执行 <code>pod repo update</code></li>
<li>重新安装该插件</li>
</ul>
<p>但是执行 <code>pod repo update</code> 实在是太慢了💩，不能忍。我们可以通过如下方法进行解决：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo rm -fr ~/.cocoapods/repos/<span class="keyword">master</span></div><div class="line"><span class="title">pod</span> setup</div></pre></td></tr></table></figure></p>
<p>执行 <code>pod setup</code> 会 Specs 整个仓库 clone 到本地，这个仓库是是所有 Pods 的索引，就是一个容器，所有公开的 Pods 都在这里面。整个下载大小约 400M 所以需要点时间 🤣</p>
<p>下载完毕后，我们再进入 iOS 项目中执行 <code>pod repo update</code> 就很快了。以上操作都顺利完成后，重新安装该插件：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 先移除后添加</div><div class="line">cordova <span class="keyword">plugin</span> <span class="keyword">rm</span> phonegap-<span class="keyword">plugin</span>-push</div><div class="line">cordova <span class="keyword">plugin</span> add phonegap-<span class="keyword">plugin</span>-push</div></pre></td></tr></table></figure></p>
<p>不出意外就安装成功了 ✌️。</p>
<p>总结一下其实就是两点：</p>
<ul>
<li><code>sudo gem install cocoapods</code></li>
<li><code>pod setup</code></li>
</ul>
<h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><blockquote>
<p><a href="https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/API.md#pushnotificationinitoptions" target="_blank" rel="external">API 文档</a></p>
</blockquote>
<p>插件在全局添加了一个 PushNotification 类。</p>
<h3 id="PushNotification-init-options"><a href="#PushNotification-init-options" class="headerlink" title="PushNotification.init(options)"></a><code>PushNotification.init(options)</code></h3><p>推送初始化，通过传入配置信息，包含各个平台相应的设置，返回 <code>PushNotification</code> 实例<br>❗️注意：</p>
<ul>
<li>必须在 <code>deviceready</code> 事件回调中调用 <code>PushNotification.init()</code></li>
<li>每一次 App 启动，都需要调用 <code>PushNotification.init()</code>，因为 App 对应的推送服务 registration ID 可能发生变化（对于 iOS 即是 deviceToken）</li>
</ul>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> push = PushNotification.init(&#123;</div><div class="line">    <span class="comment">// android: &#123;</span></div><div class="line">    <span class="comment">// &#125;,</span></div><div class="line">    <span class="comment">// browser: &#123;</span></div><div class="line">    <span class="comment">// &#125;,</span></div><div class="line"><span class="symbol">    ios:</span> &#123;</div><div class="line"><span class="symbol">        alert:</span> <span class="string">"true"</span>, <span class="comment">// 弹出通知提示</span></div><div class="line"><span class="symbol">        badge:</span> <span class="string">"true"</span>, <span class="comment">// 应用图标右上角数字标记</span></div><div class="line"><span class="symbol">        sound:</span> <span class="string">"true"</span>, <span class="comment">// 通知提示音</span></div><div class="line"><span class="symbol">        clearBadge:</span> <span class="string">"true"</span> <span class="comment">// 应用打开后清除图标标记</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="事件监听-push-on-event-callback"><a href="#事件监听-push-on-event-callback" class="headerlink" title="事件监听 push.on(event, callback)"></a>事件监听 <code>push.on(event, callback)</code></h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ① 注册通知成功回调，返回的 registrationId</span></div><div class="line"><span class="comment">// 对于 iOS，向 APNs 注册远程推送，返回的 deviceToken 即 registrationId</span></div><div class="line">push.<span class="keyword">on</span>(<span class="string">'registration'</span>, (<span class="built_in">data</span>) =&gt; &#123;</div><div class="line">    console.<span class="keyword">log</span>(<span class="string">'---registration---'</span>, <span class="built_in">data</span>.registrationId)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// ② 接收到远程推送消息的回调</span></div><div class="line">push.<span class="keyword">on</span>(<span class="string">'notification'</span>, (<span class="built_in">data</span>) =&gt; &#123;</div><div class="line">    <span class="comment">// data.message,</span></div><div class="line">    <span class="comment">// data.title,</span></div><div class="line">    <span class="comment">// data.count,</span></div><div class="line">    <span class="comment">// data.sound,</span></div><div class="line">    <span class="comment">// data.image,</span></div><div class="line">    <span class="comment">// data.additionalData</span></div><div class="line">    console.<span class="keyword">log</span>(<span class="string">'---notification---'</span>, <span class="built_in">data</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// ③ 内部错误回调</span></div><div class="line">push.<span class="keyword">on</span>(<span class="string">'error'</span>, (e) =&gt; &#123;</div><div class="line">    <span class="comment">// e.message</span></div><div class="line">    console.<span class="keyword">log</span>(<span class="string">'---notification error---'</span>, e.message);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="PushNotification-hasPermission"><a href="#PushNotification-hasPermission" class="headerlink" title="PushNotification.hasPermission"></a><code>PushNotification.hasPermission</code></h3><p>检查 App 是否授权允许推送通知<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">checkPermission: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        PushNotification.hasPermission(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">            <span class="comment">// resolve(isEnabled)</span></div><div class="line">            resolve(data.isEnabled);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="get-setApplicationIconBadgeNumber"><a href="#get-setApplicationIconBadgeNumber" class="headerlink" title="get/setApplicationIconBadgeNumber"></a><code>get/setApplicationIconBadgeNumber</code></h3><p>获取/设置应用图标标记数字<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">setIconBadgeNumber(count) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        <span class="comment">// resolve()</span></div><div class="line">        push.setApplicationIconBadgeNumber(resolve, reject, count);</div><div class="line">    &#125;);</div><div class="line">&#125;,</div><div class="line">getIconBadgeNumber() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        <span class="comment">// resolve(count)</span></div><div class="line">        push.getApplicationIconBadgeNumber(resolve, reject);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="badge-自增问题-🤖"><a href="#badge-自增问题-🤖" class="headerlink" title="badge 自增问题 🤖"></a>badge 自增问题 🤖</h3><p>通常来说，应用在接收到一条推送消息通知的时候，图标标记 badge 就应该加一；当打开应用的时候，badge 清零。</p>
<p>我们知道通过设置 Payload 消息中的 <code>badge</code> 字段，可以设置应用接收到推送消息时，图标标记设置的数值（<code>badge</code> 字段为零即为清空图标标记数字）；而在 PushNotification 插件初始化时通过配置传入 <code>clearBadge</code> 可以设置打开应用时，图标标记清零。</p>
<p>但是能否做到接收到推送消息时，badge 显示数值自增一呢？就目前 PushNotification 插件来说，并不能做到。而对于微信或者 QQ 这类应用的图标 badge 数值提示的是未读消息数，其设置逻辑应该是通过服务端维护的。</p>
<p>对于图标标记的设置，参考了一些 App 的做法：</p>
<ul>
<li>设置 <code>badge</code> 字段为 1</li>
<li>不展示图标标记（设置 <code>badge</code> 字段为 0 或者 PushNotification 插件初始化是 <code>badge</code> 设置为 <code>false</code>）</li>
</ul>
<h2 id="推送证书"><a href="#推送证书" class="headerlink" title="推送证书"></a>推送证书</h2><p>具备接收远程推送的应用打包时需要使用推送证书，同样也区分开发证书和发布证书。</p>
<h3 id="导出推送证书"><a href="#导出推送证书" class="headerlink" title="导出推送证书"></a>导出推送证书</h3><p>登录 <a href="https://developer.apple.com" target="_blank" rel="external">苹果开发者中心</a> 在 <code>Certificates, Identifiers &amp; Profiles -&gt; Identifiers -&gt; App IDs</code>，找到应用对应的 App ID，点击 <code>Edit</code> 对 Push Notifications 进行配置导出 certificate 证书。<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/CreateCertificate.png" alt=""></p>
<p>双击安装证书如下：<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/aps.png" alt=""></p>
<p>同时我们也需要更新下载 Provisioning Profile 文件。</p>
<h3 id="Xcode-真机调试推送配置"><a href="#Xcode-真机调试推送配置" class="headerlink" title="Xcode 真机调试推送配置"></a>Xcode 真机调试推送配置</h3><p>1、target -&gt; Capabilities<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/capabilities.jpg" alt=""></p>
<p>2、target -&gt; Build Settings -&gt; Signings<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/build-settings.jpg" alt=""></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.jianshu.com/p/4b947569a548" target="_blank" rel="external">iOS推送之远程推送（iOS Notification Of Remote Notification）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/iOS-PUsh-Notifications.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Cordova" scheme="http://objcer.com/categories/Cordova/"/>
    
    
      <category term="Push Notification" scheme="http://objcer.com/tags/Push-Notification/"/>
    
  </entry>
  
  <entry>
    <title>Unicode 之神奇的空格</title>
    <link href="http://objcer.com/2017/05/22/Unicode-spaces/"/>
    <id>http://objcer.com/2017/05/22/Unicode-spaces/</id>
    <published>2017-05-22T13:37:42.000Z</published>
    <updated>2017-05-22T13:41:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/IMG_3319.PNG" alt=""></p>
<a id="more"></a>
<h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var a</span> = <span class="string">"&lt;p&gt;The app&amp;nbsp;&lt;/p&gt;"</span>;</div><div class="line"><span class="attribute">var b</span> = <span class="string">"&lt;p&gt;The app &lt;/p&gt;"</span></div></pre></td></tr></table></figure>
<p>有如上两个两个字符串（其中前者是从 WYSIWYG 编辑器中获取到的字符串数据）， 我们已知两个字符串表示的内容是一样的，我们如何通过代码来判断他们相等呢。</p>
<p>看到这个问题，很简单的嘛 🤣 <code>&amp;nbsp;</code> 是空格的转义字符，那我们可以先把 <code>&amp;nbsp;</code> 替换成空格<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceNbsps</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/&amp;nbsp;/g</span>, <span class="string">' '</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(replaceNbsps(a)) <span class="comment">// "&lt;p&gt;The app &lt;/p&gt;"</span></div><div class="line">replaceNbsps(a) == b <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<p>替换后，两个字符串看起来一模一样了，但是执行结果却是 <code>false</code> 🤔 这是为啥呢？</p>
<p>其实字符串 <code>b</code> 中暗含玄机：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> <span class="selector-tag">b</span> = <span class="string">"&lt;p&gt;The app &lt;/p&gt;"</span></div><div class="line"><span class="selector-tag">var</span> <span class="selector-tag">b</span> = <span class="string">"&lt;p&gt;The app\u00a0&lt;/p&gt;"</span></div></pre></td></tr></table></figure></p>
<p>这其中的包含的一个空格字符，其 Unicode 为 <code>U+00A0</code>，十进制值为：160。莫非这两个空格字符不一样？</p>
<p>没错❗通过正则替换的空格字符的 Unicode 为 <code>U+0020</code>，十进制值为：32</p>
<table>
<thead>
<tr>
<th>Unicode</th>
<th>十进制值</th>
<th>描述</th>
<th>拉丁字母</th>
</tr>
</thead>
<tbody>
<tr>
<td>U+0020</td>
<td>160</td>
<td><a href="https://zh.wikipedia.org/zh-cn/%E7%A9%BA%E6%A0%BC" target="_blank" rel="external">空格</a></td>
<td>基本拉丁字母</td>
</tr>
<tr>
<td>U+00A0</td>
<td>32</td>
<td><a href="https://zh.wikipedia.org/zh-cn/%E4%B8%8D%E6%8D%A2%E8%A1%8C%E7%A9%BA%E6%A0%BC" target="_blank" rel="external">不换行空格</a></td>
<td>拉丁字母-1 辅助</td>
</tr>
</tbody>
</table>
<h2 id="空格-U-0020"><a href="#空格-U-0020" class="headerlink" title="空格 U+0020"></a>空格 <code>U+0020</code></h2><p>我们通过键盘点击空格键输入的空格，就是此类空格，普通半角空格，显示为空白字符。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> space1 = <span class="string">'\u0020'</span>;</div><div class="line"><span class="keyword">var</span> space2 = <span class="string">' '</span>;</div><div class="line">space1 == space2 <span class="comment">// true</span></div><div class="line"></div><div class="line">space1.charCodeAt(<span class="number">0</span>) <span class="comment">// 32</span></div></pre></td></tr></table></figure></p>
<h2 id="空格-U-00A0"><a href="#空格-U-00A0" class="headerlink" title="空格 U+00A0"></a>空格 <code>U+00A0</code></h2><p>这类空格字符称之为<strong>不换行空格</strong>。用途是禁止换行。</p>
<p>在 HTML 网页显示中，会自动合并多个连续的空白字符；但是如果使用此类字符，就会禁止合并，因此这类字符也称之为<em>硬空格</em>。在网页显示中其转义字符为 <code>&amp;nbsp;</code><br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dom = <span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">'div'</span>); <span class="comment">// DOM 元素</span></div><div class="line"></div><div class="line"><span class="comment">// ① 自动合并空格</span></div><div class="line">dom.innerText = <span class="string">'a  b'</span>;</div><div class="line">dom.innerText = <span class="string">'a\u0020\u0020b'</span></div><div class="line">dom.innerText.length <span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="comment">// ② 禁止合并</span></div><div class="line">dom.innerText = <span class="string">'a\u00a0\u00a0b'</span></div><div class="line"><span class="comment">// 或者使用空格的转义字符 &amp;nbsp; ，此时需要用 innerHTML</span></div><div class="line">$<span class="number">0.</span>innerHTML = <span class="string">'a&amp;nbsp;&amp;nbsp;b'</span></div><div class="line">dom.innerText.length <span class="comment">// 4</span></div></pre></td></tr></table></figure></p>
<p>对于 ① 我们在页面中会观察到，DOM 元素只会展示一个空格（两个空格合并成一个）；而对于 ② 就会显示两个空格。</p>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>了解了原因，现在就可以解决第一节中的问题了。<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="title">replaceNbsps</span>(str) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">str.replace(/&amp;nbsp</span>;|\u00a0/g, <span class="string">' '</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">replaceNbsps(a) == replaceNbsps(b) // <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>我们只需要统一把空格都转换成 Unicode 为 <code>\u0020</code> 的空格，然后再进行比较就可以了。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://zh.wikipedia.org/zh-cn/%E7%A9%BA%E6%A0%BC" target="_blank" rel="external">空格</a><br><a href="https://zh.wikipedia.org/zh-cn/%E4%B8%8D%E6%8D%A2%E8%A1%8C%E7%A9%BA%E6%A0%BC" target="_blank" rel="external">不换行空格</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/IMG_3319.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Unicode" scheme="http://objcer.com/categories/Unicode/"/>
    
    
      <category term="space" scheme="http://objcer.com/tags/space/"/>
    
  </entry>
  
  <entry>
    <title>Cordova 打包应用 - iOS篇</title>
    <link href="http://objcer.com/2017/05/22/cordova-build-iOS-App/"/>
    <id>http://objcer.com/2017/05/22/cordova-build-iOS-App/</id>
    <published>2017-05-22T03:53:18.000Z</published>
    <updated>2017-05-22T03:55:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/ios.jpg" alt=""></p>
<a id="more"></a>
<h2 id="苹果开发知识储备"><a href="#苹果开发知识储备" class="headerlink" title="苹果开发知识储备"></a>苹果开发知识储备</h2><p><img src="http://7vikhl.com1.z0.glb.clouddn.com/iOS-dev-center.jpg" alt=""></p>
<h3 id="Certificates"><a href="#Certificates" class="headerlink" title="Certificates"></a>Certificates</h3><p>Certificates 证书，是用来给应用程序签名(code sign)，证明应用程序的合法性和完整性。对于想要安装到真机调试或者发布到应用商店的应用程序，只有经过签名，才能保证其来源可靠，并且代码完整，未经篡改的。<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/Code%20Signing%20Identity.jpg" alt=""><br>在Xcode Build Setting 的 Code Signing Identity 中，你可以设置用于为代码签名的证书。</p>
<ul>
<li>申请一个 Certificate 之前，需要先申请一个 Certificate Signing Request (CSR) 文件，而这个过程中实际上是生成了一对公钥和私钥，保存在你 Mac 的 Keychain 中。<strong>代码签名正是使用这种基于非对称秘钥的加密方式，用私钥进行签名，用公钥进行验证。</strong></li>
<li>如下图所示，在你 Mac 的 keychain 的 login 中存储着相关的公钥和私钥，而证书中包含了公钥。用私钥来进行签名，<strong>苹果就可以用证书中的公钥来进行验证</strong>，确保是你对代码进行了签名，而不是别人冒充你，同时也确保代码的完整性等。</li>
<li>当你想与其他人或其他设备共享证书时，导出证书（.p12类型），把私钥传给它就可以了。</li>
</ul>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/Certificates.png" alt=""><br>证书主要分为两类：Development 和 Production，Development 证书用来开发和调试应用程序，Production 主要用来分发应用程序。</p>
<h3 id="Identifiers"><a href="#Identifiers" class="headerlink" title="Identifiers"></a>Identifiers</h3><p>App ID 用于标识一个或者一组 App，App ID 应该是和 Xcode 中的 Bundle ID 是一致的或者匹配的。App ID主要有以下两种：</p>
<ul>
<li>An Explicit App ID Matches a Single App：唯一的App ID，这种App ID用于唯一标识一个应用程序，例如 <code>com.ABC.demo1</code>，标识 Bundle ID 为 <code>com.ABC.demo1</code> 的程序。</li>
<li>Wildcard App IDs Match Multiple Apps：通配符App ID，用于标识一组应用程序。例如 <code>*</code> 可以表示所有应用程序，而 <code>com.ABC.*</code> 可以表示以 <code>com.ABC</code> 开头的所有应用程序。</li>
</ul>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/Bundle%20ID.jpg" alt=""></p>
<h3 id="Devices"><a href="#Devices" class="headerlink" title="Devices"></a>Devices</h3><p>Device 是指运行 iOS 系统用于开发调试 App 的设备。每台 Apple 设备使用 UDID 来唯一标识。设备的 UDID 可通过 <code>iTunes-&gt;Summary</code> 或者 <code>Xcode-&gt;Window-&gt;Devices</code> 获取。</p>
<h3 id="Provisioning-Profiles"><a href="#Provisioning-Profiles" class="headerlink" title="Provisioning Profiles"></a>Provisioning Profiles</h3><p>一个 Provisioning Profile 文件包含了上述的所有内容：<strong>证书、App ID、设备</strong>。<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/Provisioning%20Profiles.png" alt=""></p>
<p>在打包应用程序或者在真机上运行调试一个应用程序的过程：</p>
<ul>
<li>使用 Certificates 证书来进行签名，用于标识该应用程序合法性和完整性</li>
<li>指明该应用程序的 App ID，并且验证与 Bundle ID 是否一致</li>
<li>到真机中运行调试该应用程序，确认该设备是否能够用来运行</li>
</ul>
<p>Provisioning Profile 把这些信息全部打包在一起，在打包时嵌入 <code>.ipa</code> 的包里。如上所述，在一台设备上运行应用程序的过程如下：<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/16185213-ea355ff0690b497a80ed5fd2dd5e62cf.png" alt=""></p>
<p>与 Certificates 证书一样，Provisioning Profile 也分为 Development 和 Distribution 两种：</p>
<ul>
<li>Development</li>
<li>Distribution: In House、Ad Hoc、App Store</li>
</ul>
<p>注：使用 Development Provisioning Profiles 打包的应用程序在设备中运行，要求该设备 UDID 必须绑定添加到该 Provisioning Profiles 中，否则无法在该设备中运行。解决方法是：绑定添加该设备 UDID，更新 Provisioning Profiles，重新打包。</p>
<h2 id="Xcode-调试"><a href="#Xcode-调试" class="headerlink" title="Xcode 调试"></a>Xcode 调试</h2><h3 id="Xcode-模拟器调试"><a href="#Xcode-模拟器调试" class="headerlink" title="Xcode 模拟器调试"></a>Xcode 模拟器调试</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加/移除 iOS 项目</span></div><div class="line">phonegap <span class="built_in">platform</span> <span class="built_in">add</span> ios</div><div class="line">phonegap <span class="built_in">platform</span> remove ios</div><div class="line"><span class="comment"># 更新 iOS 项目</span></div><div class="line">phonegap <span class="built_in">prepare</span> ios</div></pre></td></tr></table></figure>
<p>在 <code>/platforms/ios</code> 目录下双击打开 <code>.xcworkspace</code> 文件，Xcode 中选择对应的模拟器即可运行。</p>
<h3 id="Xcode-真机调试"><a href="#Xcode-真机调试" class="headerlink" title="Xcode 真机调试"></a>Xcode 真机调试</h3><p>Xcode 真机调试需要申请 Certificates 证书，然后添加调试设备 UDID，生成 Provisioning Profiles（Development 类型），下载到电脑中，双击安装。<br>苹果设备连接电脑，Xcode -&gt; Build Settings 设置 Code Signing Identity 和 Provisioning Profiles，设置完成后，选择该设备运行即可。<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/Xcode-debug.jpg" alt=""></p>
<p>当然 <a href="http://www.jianshu.com/p/351be39f959e" target="_blank" rel="external">Xcode7以后，无证书也能真机编译调试！</a></p>
<h2 id="应用打包"><a href="#应用打包" class="headerlink" title="应用打包"></a>应用打包</h2><blockquote>
<p>cordova iOS 应用打包 <a href="https://cordova.apache.org/docs/en/latest/guide/platforms/ios/#signing-an-app" target="_blank" rel="external">参考文档</a></p>
</blockquote>
<p>使用 Development 和 Distribution 的 Certificates 和 Provisioning Profiles 对应用程序进行打包的区别是：Development 打出来的包可以进行应用调试，譬如我们可以通过 Safari 对网页进行调试。</p>
<p>cordova 提供了一套打包解决方案，在项目<strong>根目录</strong>添加 <code>build.json</code> 文件，配置文件中需要指定的参数包括：</p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Flag</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Code Sign Identity</td>
<td>–codeSignIdentity</td>
<td>Code signing identity to use for signing.</td>
</tr>
<tr>
<td>Provisioning Profile</td>
<td>–provisioningProfile</td>
<td>GUID of the provisioning profile to be used for signing. It is copied here on your Mac: <code>~/Library/MobileDevice/Provisioning\ Profiles/</code>.</td>
</tr>
<tr>
<td>Code Sign Resource Rules</td>
<td>–codesignResourceRules    (Optional)</td>
<td>Used to control which files in a bundle should be sealed by a code signature. For more details, read The OS X Code Signing In Depth article.</td>
</tr>
<tr>
<td>Development Team</td>
<td>–developmentTeam</td>
<td>This is new for Xcode 8. The development team (Team ID) to use for code signing. You would use this setting and a simplified Code Sign Identity (i.e. just ‘iPhone Developer’) to sign your apps, you do not need to provide a Provisioning Profile.</td>
</tr>
<tr>
<td>Packaging Type</td>
<td>–packageType</td>
<td>This will determine what type of build is generated by Xcode. Valid options are development (the default), enterprise, ad-hoc, and app-store.</td>
</tr>
</tbody>
</table>
<p>解释一下需要用到的四个参数：</p>
<ul>
<li><strong>Code Sign Identity</strong>：应用程序签名时使用的证书标识。如下图<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/Code%20Sign%20Identity.jpg" alt=""></li>
<li><strong>Provisioning Profile</strong>：Provisioning Profile 的 GUID。进入 <code>~/Library/MobileDevice/Provisioning\ Profiles/</code> 目录，即可获取到对应 Provisioning Profile 的 GUID<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/GUID.jpg" alt=""></li>
<li><strong>Development Team</strong>：开发团队 ID<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/TeamID.jpg" alt=""></li>
<li><strong>Packaging Type</strong>：打包类型，包括：development、enterprise, ad-hoc, 和 app-store</li>
</ul>
<p><code>build.json</code> 配置如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"ios"</span>: &#123;</div><div class="line">        <span class="attr">"debug"</span>: &#123;</div><div class="line">            <span class="attr">"codeSignIdentity"</span>: <span class="string">"iPhone Developer: Deng Yingshan (Z7********)"</span>,</div><div class="line">            <span class="attr">"provisioningProfile"</span>: <span class="string">"91840e00-****-****-****-************"</span>,</div><div class="line">            <span class="attr">"developmentTeam"</span>: <span class="string">"32********"</span>,</div><div class="line">            <span class="attr">"packageType"</span>: <span class="string">"development"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"release"</span>: &#123;</div><div class="line">            <span class="attr">"codeSignIdentity"</span>: <span class="string">"iPhone Distribution: Zhuhai Kingsoft Office Software Co., Ltd."</span>,</div><div class="line">            <span class="attr">"provisioningProfile"</span>: <span class="string">"ce06cf9c-****-****-****-************"</span>,</div><div class="line">            <span class="attr">"packageType"</span>: <span class="string">"enterprise"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>❗️注意：</strong></p>
<ul>
<li>签名证书 Identity 一定要和 Provisioning Profiles GUID 对应上，否则打包不成功</li>
<li>打包类型 enterprise 即为使用 in house 类型的 Distribution Provisioning Profiles</li>
</ul>
<h3 id="Development"><a href="#Development" class="headerlink" title="Development"></a>Development</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">cordova</span> <span class="comment">build</span> <span class="comment">ios</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">device</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">debug</span></div></pre></td></tr></table></figure>
<ul>
<li>打 Development 必须使用 Development 类型的 Certificates 和 Provisioning Profiles。</li>
<li>配置文件中，在 <code>debug</code> 属性配置参数；打包命令指定 <code>--debug</code>。</li>
</ul>
<h3 id="Distribution"><a href="#Distribution" class="headerlink" title="Distribution"></a>Distribution</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">cordova</span> <span class="comment">build</span> <span class="comment">ios</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">device</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">release</span></div></pre></td></tr></table></figure>
<ul>
<li>打 Distribution 必须使用 Distribution 类型的 Certificates 和 Provisioning Profiles。</li>
<li>配置文件中，在 <code>release</code> 属性配置参数；打包命令指定 <code>--release</code>。</li>
<li>由于 Distribution 类型包括：In House、Ad Hoc、App Store 三种，对应在配置文件中的 <code>packageType</code> 分别为：<code>enterprise</code>, <code>ad-hoc</code>, 和 <code>app-store</code></li>
</ul>
<p>最终打包成功后，我们在 <code>platforms/ios/build/device</code> 目录下找到 <code>.ipa</code> 文件</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://cordova.apache.org/docs/en/latest/guide/platforms/ios/#signing-an-app" target="_blank" rel="external">Signing an App</a><br><a href="http://www.cnblogs.com/cywin888/p/3263027.html" target="_blank" rel="external">关于Certificate、Provisioning Profile、App ID的介绍及其之间的关系</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/ios.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Cordova" scheme="http://objcer.com/categories/Cordova/"/>
    
    
      <category term="cordova-build" scheme="http://objcer.com/tags/cordova-build/"/>
    
  </entry>
  
  <entry>
    <title>JS 数组排序 sort 方法</title>
    <link href="http://objcer.com/2017/05/21/JS-Array-sort/"/>
    <id>http://objcer.com/2017/05/21/JS-Array-sort/</id>
    <published>2017-05-21T08:42:51.000Z</published>
    <updated>2017-05-21T08:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>[问题引入]:</em>在推特上看到有人发了这样一段代码<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">1</span>];</div><div class="line">var b = a.sort();</div><div class="line">console.log(b);</div></pre></td></tr></table></figure></p>
<p>输出的结果竟然是：<code>[-1, -2, 0, 1]</code><br>显然该推友对 <code>Array.prototype.sort</code> 用法不熟悉导致的误解。🤓<br><a id="more"></a></p>
<h2 id="Array-prototype-sort"><a href="#Array-prototype-sort" class="headerlink" title="Array.prototype.sort"></a><code>Array.prototype.sort</code></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">arr</span><span class="selector-class">.sort</span>()</div><div class="line"></div><div class="line"><span class="selector-tag">arr</span><span class="selector-class">.sort</span>(<span class="selector-tag">compareFunction</span>)</div></pre></td></tr></table></figure>
<p><code>sort</code> 方法对数组中的元素进行排序，返回数组；可以指定排序顺序比较函数，如果省略，那么默认排序顺序是根据字符串 Unicode 码点<strong>升序排列</strong>。<br>通过一个例子理解一下：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var scores = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">8</span>];</div><div class="line">scores.sort(); <span class="comment">// [1, 10, 21, 8]</span></div></pre></td></tr></table></figure></p>
<p>我们对数组 <code>scores</code> 进行排序，没有指明 <code>compareFunction</code> ，那么元素会按照转换为的字符串的诸个字符的 Unicode 码点进行升序排列。相当于是<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> scores = [<span class="string">'1'</span>, <span class="string">'10'</span>, <span class="string">'21'</span>, <span class="string">'8'</span>];</div><div class="line">scores.sort();</div></pre></td></tr></table></figure></p>
<blockquote>
<p>关于码点，参考文章：<a href="http://objcer.com/2017/05/21/JavaScript-Unicode/">JavaScript Unicode 编码那些事</a></p>
</blockquote>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">'<span class="number">1</span>'.codePointAt(<span class="number">0</span>) <span class="comment">// 49</span></div><div class="line">'<span class="number">8</span>'.codePointAt(<span class="number">0</span>) <span class="comment">// 56</span></div></pre></td></tr></table></figure>
<p>字符 <code>1</code> 的码点比字符 <code>8</code> 的码点小，所以 <code>10</code> 排在 <code>8</code> 前面。同理也就可以解释文章开头的例子了。</p>
<h2 id="compareFunction"><a href="#compareFunction" class="headerlink" title="compareFunction"></a><code>compareFunction</code></h2><p>比较函数格式如下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function compare(a, b) &#123;</div><div class="line">    <span class="keyword">if</span> (a <span class="keyword">is</span> less than b <span class="keyword">by</span> some ordering criterion) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (a <span class="keyword">is</span> greater than b <span class="keyword">by</span> the ordering criterion) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// a must be equal to b</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有点需要注意的是，比较函数必须返回 -1 或者 0 或者 1；而不能返回 true 或者 false。</p>
<p>为了实现元素为数字的数组按照数值升序排列，我们就需要传入一个比较函数 <code>compareFunction</code>，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> scores = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">8</span>];</div><div class="line">scores.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b) <span class="comment">// 升序排列</span></div><div class="line">scores.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a) <span class="comment">// 降序排列</span></div></pre></td></tr></table></figure></p>
<p>通过比较函数，我们也可以对对象数组按照某个属性进行排序，很方便。</p>
<h2 id="sort-排序不一定是稳定的"><a href="#sort-排序不一定是稳定的" class="headerlink" title="sort 排序不一定是稳定的"></a>sort 排序不一定是稳定的</h2><blockquote>
<p>Quicksort is generally considered to be efficient and fast and so is used by V8 as the implementation for Array.prototype.sort() on arrays with more than 23 items. For less than 23 items, V8 uses insertion sort[2]. Merge sort is a competitor of quicksort as it is also efficient and fast but has the added benefit of being stable. This is why Mozilla and Safari use it for their implementation of Array.prototype.sort().</p>
</blockquote>
<p>关于排序是否稳定，参考: <a href="http://imweb.io/topic/565cf7253ad940357eb99881" target="_blank" rel="external">维基百科</a><br>这个图也能很好的理解<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/440px-Sorting_stability_playing_cards.svg.png" alt=""></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank" rel="external">MDN Array.prototype.sort</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;[问题引入]:&lt;/em&gt;在推特上看到有人发了这样一段代码&lt;br&gt;&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var a = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var b = a.sort();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(b);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输出的结果竟然是：&lt;code&gt;[-1, -2, 0, 1]&lt;/code&gt;&lt;br&gt;显然该推友对 &lt;code&gt;Array.prototype.sort&lt;/code&gt; 用法不熟悉导致的误解。🤓&lt;br&gt;
    
    </summary>
    
      <category term="JS" scheme="http://objcer.com/categories/JS/"/>
    
    
      <category term="Array.prototype.sort" scheme="http://objcer.com/tags/Array-prototype-sort/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Unicode 编码那些事</title>
    <link href="http://objcer.com/2017/05/21/JavaScript-Unicode/"/>
    <id>http://objcer.com/2017/05/21/JavaScript-Unicode/</id>
    <published>2017-05-21T08:36:57.000Z</published>
    <updated>2017-07-21T01:47:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/IMG_1915.PNG" alt=""><br><a id="more"></a></p>
<h2 id="BMP-Basic-Multilingual-Plane-字符"><a href="#BMP-Basic-Multilingual-Plane-字符" class="headerlink" title="BMP(Basic Multilingual Plane)字符"></a>BMP(Basic Multilingual Plane)字符</h2><p>Unicode 是目前绝大多数程序使用的字符编码。Unicode 标识符通过一个明确的名字和一个整数来作为它的码点/码位 (code point)。比如，“©️” 字符可以用“版权标志” 和码位 U+00A9 (0xA9，也可以写作十进制 169) 来表示。</p>
<p><strong>码点/码位</strong>是为每一个字符提供一个全局唯一的标识符，一个码位映射一个字符，码位值的范围是从U+0000到U+10FFFF，可以表示超过110万个符号。</p>
<p>Unicode 字符分为 17 组平面，每个平面拥有 2^16 (65,536) 个码位。每一个码位都可以用 16 进制 xy0000 到 xyFFFF 来表示，这里的 xy 是表示一个 16 进制的值，从 00 到 10。</p>
<p>而当 xy 是 00 (码点范围是从U+0000到U+FFFF) 的时候，也就是 Unicode 最前 2^16 (65,536) 个字符，被称为<strong>基本平面 BMP(Basic Multilingual Plane)</strong>，最常见的字符都在这个平面上，这也是 Unicode 最先定义和最先公布的一个平面。</p>
<p>其余 16 个平面（U+100000 到 U+10FFFF）称为<strong>补充平面(supplementary planes, or astral planes)</strong>，也称之为补充字符，相对于 BMP 字符而言，这些字符称之为非 BMP 字符。要区分是非 BMP 字符很简单：其码位需要超过 4 位 16 进制表示</p>
<h2 id="UTF-16-和-UCS-2"><a href="#UTF-16-和-UCS-2" class="headerlink" title="UTF-16 和 UCS-2"></a>UTF-16 和 UCS-2</h2><h3 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h3><p>UTF-16 对于 BMP 字符的码位，用 2 个字节进行编码；而非 BMP 字符的码位，用 4 个字节组成代理对（surrogate pair）来表示。</p>
<p>关于<strong>代理对</strong>：前两个字节称为高位代理或者顶部代理，<strong>范围在 0xD800 到 0xDBFF 之间</strong>；后两个字节称为低位代理或者尾部代理，<strong>范围在 0xDC00 到 0xDFFF 之间</strong>。</p>
<p><strong>码位（code points）和代理对（surrogate pairs）之间的转换：</strong><br>假设：一个码位 C 大于 0xFFFF 的编码使用代理对 <h, l=""> 来表示的公式为：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">H = Math.floor((C - <span class="number">0x10000</span>) / <span class="number">0x400</span>) + <span class="number">0xD800</span></div><div class="line">L = (C - <span class="number">0x10000</span>) % <span class="number">0x400</span> + <span class="number">0xDC00</span></div></pre></td></tr></table></figure></h,></p>
<p>转换公式变换后，比如从代理对 <h, l=""> 转换成一个 Unicode 码位 C，可以使用公式：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C = (H - <span class="number">0xD800</span>) * <span class="number">0x400</span> + L - <span class="number">0xDC00</span> + <span class="number">0x10000</span></div></pre></td></tr></table></figure></h,></p>
<p>代码实现如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// codePoint &gt; 0xFFFF</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSurrogates</span>(<span class="params">codePoint</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> high = <span class="built_in">Math</span>.floor((codePoint - <span class="number">0x10000</span>) / <span class="number">0x400</span>) + <span class="number">0xD800</span>;</div><div class="line">  <span class="keyword">var</span> low = (codePoint - <span class="number">0x10000</span>) % <span class="number">0x400</span> + <span class="number">0xDC00</span>;</div><div class="line">  <span class="keyword">return</span> [high, low];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCodePoint</span>(<span class="params">high, low</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> codePoint = (high - <span class="number">0xD800</span>) * <span class="number">0x400</span> + low - <span class="number">0xDC00</span> + <span class="number">0x10000</span>;</div><div class="line">  <span class="keyword">return</span> codePoint;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="UCS-2"><a href="#UCS-2" class="headerlink" title="UCS-2"></a>UCS-2</h3><p>UCS(Universal Character Set) 通用字符集，是一个 ISO 标准，UCS-2 用 2 个字节表示 BMP 字符的码点，UCS-2 是一个过时的编码方式，因为它只能编码基本平面 BMP 的码点，在 BMP 字符的编码上，与 UTF-16 是一致的，所以可以认为是UTF-16的一个子集。</p>
<h3 id="JavaScript-是用哪一种编码方式的呢？"><a href="#JavaScript-是用哪一种编码方式的呢？" class="headerlink" title="JavaScript 是用哪一种编码方式的呢？"></a>JavaScript 是用哪一种编码方式的呢？</h3><p>那么 JavaScript 是用哪一种编码方式的呢？UTF-16 还是 UCS-2 呢？答案是：UCS-2<br>基于如下年表：</p>
<ul>
<li>1990 UCS-2 诞生</li>
<li>1995.5 JavaScript 诞生</li>
<li>1996.7 UTF-16 诞生</li>
</ul>
<p>所以 JS 诞生之时 UTF-16 还没有问世，所以只能用 来处理字符，而这也为字符处理留下了隐患，而后来通过不断完善，譬如引入 UTF-16 将问题一步步解决。</p>
<h2 id="JavaScript-字符处理"><a href="#JavaScript-字符处理" class="headerlink" title="JavaScript 字符处理"></a>JavaScript 字符处理</h2><h3 id="length-属性"><a href="#length-属性" class="headerlink" title="length 属性"></a>length 属性</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">char</span> = <span class="string">'💩'</span></div><div class="line"><span class="keyword">char</span>.length === <span class="number">2</span> <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="keyword">char</span>.charCodeAt(<span class="number">0</span>).toString(<span class="number">16</span>) <span class="comment">// d83d</span></div><div class="line"><span class="keyword">char</span>.charCodeAt(<span class="number">1</span>).toString(<span class="number">16</span>) <span class="comment">// dca9</span></div><div class="line"><span class="keyword">char</span> === <span class="string">'\ud83d\udca9'</span> <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p><strong>分析：</strong><br>由于 💩 这个 emoji 在 JS中编码为 <code>\ud83d\udca9</code>，而 JS 认为每两个字节即表示一个字符，所以 💩 这个 emoji 字符的字符长度就为 2。所以在输入框长度限制时就会有问题，譬如：输入长度限制 20，但是输入 10 个 emoji 后，字符串长度就达到 20 了。</p>
<p><strong>解决方法：</strong><br>上一节中，了解到 UTF-16 使用代理对，通过四个字节来表示非 BMP 字符，前两个字节和后两个字节都有各自的范围，所以：<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> regexAstralSymbols = <span class="regexp">/[\uD800-\uDBFF][\uDC00-\uDFFF]/g</span>; <span class="comment">// 匹配UTF-16的代理对</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countSymbols</span>(<span class="params">string</span>) </span>&#123;</div><div class="line">    <span class="comment">// 把代理对改为一个BMP的字符，这时候取长度就正常</span></div><div class="line">    <span class="keyword">return</span> <span class="built_in">string</span>.replace(regexAstralSymbols, <span class="string">'_'</span>).length;</div><div class="line">&#125;</div><div class="line">countSymbols(<span class="string">'💩'</span>); <span class="comment">// 1</span></div></pre></td></tr></table></figure></p>
<hr>
<p>❗️<strong>注意：</strong>字符串中包含有 emoji 字符时，此解决方法只适用于一部分 emoji，例如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">countSymbols</span><span class="params">(<span class="string">'1️⃣'</span>)</span></span> <span class="comment">// 3</span></div><div class="line"><span class="function"><span class="title">countSymbols</span><span class="params">(<span class="string">'👨‍👩‍👦‍👦'</span>)</span></span> <span class="comment">// 7</span></div></pre></td></tr></table></figure></p>
<p><strong>关于正确计算 emoji 字符的问题请参考文章：<a href="http://objcer.com/2017/07/20/explore-emoji-length/">探究 emoji 字符长度</a> 文章给出探究分析过程，并提供了 <a href="https://github.com/YingshanDeng/EmojiCharString" target="_blank" rel="external">EmojiCharString</a> 类库，用于彻底解决此问题 🤓</strong></p>
<h3 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串</h3><p>对于反转字符串，我们可以很快的写出如下函数：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function <span class="built_in">reverse</span>(<span class="built_in">str</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">str</span>.<span class="built_in">split</span>(<span class="string">''</span>).<span class="built_in">reverse</span>().<span class="built_in">join</span>(<span class="string">''</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>进行一下测试：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">reverse</span><span class="params">(<span class="string">'123'</span>)</span></span> <span class="comment">// "321"</span></div><div class="line"><span class="function"><span class="title">reverse</span><span class="params">(<span class="string">'💩'</span>)</span></span> <span class="comment">// "��"</span></div></pre></td></tr></table></figure></p>
<p><strong>分析：</strong><br>� 的 Unicode 码位是 U+FFFD，通常用来表示 Unicode 转换时无法识别的字符（也就是乱码）。当💩（\ud83d\udca9）通过上述方法反转时，变成\udca9\ud83d，不是一个合法的代理对（高低字节范围不同），同时 Unicode 规定代理对范围内的码位不能单独出现，所以 js 只能用 � 表示了。</p>
<p><strong>解决方法：</strong><br>ES6 中数组新增了静态方法 <code>Array.from</code>，此方法支持对代理对的解析<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">function <span class="title">reverse</span>(<span class="params"><span class="keyword">string</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> Array.<span class="keyword">from</span>(<span class="keyword">string</span>).reverse().<span class="keyword">join</span>(<span class="string">''</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><code>Array.from</code> 方法的作用是将一个 <code>array-like</code> 或者 <code>iterable object</code> 转换成一个 Array 对象。最常见的是 <code>NodeList</code> 和函数参数 <code>arguments</code>，在实际开发过程中，需要将它们转换成数组：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 以往的解决方法：</span></div><div class="line"><span class="keyword">var</span> imgs = [].slice.call(<span class="built_in">document</span>.querySelectorAll(<span class="string">'img'</span>));</div><div class="line"><span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>);</div><div class="line"></div><div class="line"><span class="comment">// 现在有了 `Array.from` 我们就可以这样：</span></div><div class="line"><span class="keyword">var</span> imgs = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">'img'</span>));</div><div class="line"><span class="keyword">var</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="关于-charCodeAt-和-codePointAt"><a href="#关于-charCodeAt-和-codePointAt" class="headerlink" title="关于 charCodeAt 和 codePointAt"></a>关于 <code>charCodeAt</code> 和 <code>codePointAt</code></h3><blockquote>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt" target="_blank" rel="external">Mozilla</a>文档说明： The <strong>charCodeAt()</strong> method returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index (the UTF-16 code unit matches the Unicode code point for code points representable in a single UTF-16 code unit, but might also be the first code unit of a surrogate pair for code points not representable in a single UTF-16 code unit, e.g. Unicode code points &gt; 0x10000). If you want the entire code point value, use <strong>codePointAt()</strong>.</p>
</blockquote>
<p>理解一下：UTF-16 编码方式对于 BMP 字符，使用两个字节就可以表示，这两个字节表示一个 <code>code unit</code>；对于非 BMP 字符，则需要 4 个字节组成的代理对来表示，这四个字节则表示两个 <code>code unit</code>。所以一个码位 (code point) 由一个或者两个 <code>code unit</code> 组成</p>
<ul>
<li><p><code>charCodeAt</code> 方法接收一个 <code>index</code> 参数，返回指定位置上的 <code>code unit</code> 的整数值，范围是 0 到 65535。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">char</span> = 'a'; <span class="comment">// BMP 字符</span></div><div class="line"><span class="keyword">char</span>.charCodeAt(0).<span class="keyword">toString</span>(16); <span class="comment">// 61</span></div><div class="line"><span class="keyword">char</span>.charCodeAt(1).<span class="keyword">toString</span>(16); <span class="comment">// NaN</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> <span class="keyword">char</span> = '💩'; <span class="comment">// 非BMP 字符</span></div><div class="line"><span class="keyword">char</span>.charCodeAt(0).<span class="keyword">toString</span>(16); <span class="comment">// d83d</span></div><div class="line"><span class="keyword">char</span>.charCodeAt(1).<span class="keyword">toString</span>(16); <span class="comment">// dca9</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>codePointAt</code> 方法同样接收一个 <code>index</code> 参数，返回从指定位置开始，整个码位(code point)的值。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">char</span> = 'a'; <span class="comment">// BMP 字符</span></div><div class="line"><span class="keyword">char</span>.codePointAt(0).<span class="keyword">toString</span>(16); <span class="comment">// 61</span></div><div class="line"><span class="keyword">char</span>.codePointAt(1).<span class="keyword">toString</span>(16); <span class="comment">// NaN</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> <span class="keyword">char</span> = '💩'; <span class="comment">// 非BMP 字符</span></div><div class="line"><span class="keyword">char</span>.codePointAt(0).<span class="keyword">toString</span>(16); <span class="comment">// 1f4a9</span></div><div class="line"><span class="keyword">char</span>.codePointAt(1).<span class="keyword">toString</span>(16); <span class="comment">// dca9</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>通过上述的代码示例中，我们发现：<br>对于 BMP 字符，<code>charCodeAt</code> 和 <code>codePointAt</code> 的行为一致，都是返回整个字符的码位 (code point)；<br>对于非 BMP 字符，<code>charCodeAt</code> 通过指定参数，返回不同位置上的 <code>code unit</code> 值；而 <code>codePointAt</code> 当参数为 0 时，返回整个字符的码位 (code point)，当参数为 1 时，返回的是低位代理 <code>code unit</code> 的值。</p>
<p>通过 <code>codePointAt</code> 方法，我们可以判断一个字符是两个字节(16位)表示，还是四个字节(32位)表示：<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="keyword">is</span><span class="number">32</span>Bit(c) &#123;</div><div class="line">    <span class="keyword">return</span> c.codePointAt(<span class="number">0</span>) &gt; <span class="number">0</span>xFFFF;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">is</span><span class="number">32</span>Bit(<span class="string">'A'</span>) <span class="comment">// false</span></div><div class="line"><span class="keyword">is</span><span class="number">32</span>Bit(<span class="string">'💩'</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<h3 id="码位和字符转换"><a href="#码位和字符转换" class="headerlink" title="码位和字符转换"></a>码位和字符转换</h3><p><code>charCodeAt</code> 方法可以获取 BMP 字符的码位；<code>codePointAt</code> 方法可以获取 BMP 和非 BMP 字符的码位。反之，如何将一个码位转换成字符呢？</p>
<p><code>charCodeAt</code> 和 <code>codePointAt</code> 对应着的有 <code>fromCharCode</code> 和 <code>fromCodePoint</code> 这两个方法，同样的，<code>fromCharCode</code> 只能讲一个 BMP 字符的码位转换回字符，对于非 BMP 字符的码位就无能为力了，得使用 <code>fromCodePoint</code> 方法。</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> c = <span class="string">'a'</span>;</div><div class="line"><span class="keyword">var</span> d = <span class="string">'💩'</span>;</div><div class="line"><span class="built_in">String</span>.fromCharCode(c.charCodeAt(<span class="number">0</span>)) <span class="comment">// a</span></div><div class="line"><span class="built_in">String</span>.fromCharCode(d.charCodeAt(<span class="number">0</span>)) <span class="comment">// �</span></div><div class="line"><span class="built_in">String</span>.fromCodePoint(d.codePointAt(<span class="number">0</span>)) <span class="comment">// 💩</span></div></pre></td></tr></table></figure>
<p>在 ES5 中允许通过 <code>\u</code> 加上码位组成的编码序列来表示 16 位的 Unicode BMP 字符，即：<code>\uXXXX</code>。例如：<code>\u0061</code> 表示字符 <code>a</code><br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.<span class="built_in">log</span>('\u<span class="number">0061</span>') <span class="comment">// a</span></div></pre></td></tr></table></figure></p>
<p>当然这只是对于 BMP 字符有效，对于非 BMP 字符，码位范围大于 <code>OxFFFF</code> 时，这种表示方式就有问题了，例如<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.<span class="built_in">log</span>('\u1f4a9') <span class="comment">// Ὂ9</span></div></pre></td></tr></table></figure></p>
<p><code>1f4a9</code> 是 emoji 💩 的码位，因为 Unicode 的编码序列总是包含 16 位，所以 JS 会把 <code>\u1f4a9</code> 分成两个字符 <code>\u1f4a</code> 和 <code>9</code>，所以最终输出：<code>Ὂ9</code> 两个字符。</p>
<p>ES6 通过扩展 Unicode 的编码序列解决了这个问题，将码位置于花括号内，即：<code>\u{XXXXX}</code>，可表示任何字符的码位。<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">console.<span class="built_in">log</span>('\u&#123;<span class="number">0061</span>&#125;') <span class="comment">// a</span></div><div class="line">console.<span class="built_in">log</span>('\u&#123;1f4a9&#125;') <span class="comment">// 💩</span></div></pre></td></tr></table></figure></p>
<h3 id="正则匹配-u-修饰符"><a href="#正则匹配-u-修饰符" class="headerlink" title="正则匹配 u 修饰符"></a>正则匹配 <code>u</code> 修饰符</h3><p>正则表达式也是基于两个字节(16位)，一个 code unit 来表示单个字符的，那么对于非 BMP 字符，例如：emoji 💩 就会被认为是两个字符，在正则匹配中就会遇到问题。例如：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">char</span> = '💩';</div><div class="line">console.<span class="built_in">log</span>(<span class="keyword">char</span>.length) <span class="comment">// 2</span></div><div class="line">console.<span class="built_in">log</span>(/^.$/.<span class="keyword">test</span>(<span class="keyword">char</span>)); <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<p>在正则中，<code>.</code> 小数点，是用于匹配除换行符之外的任何单个字符，但是对于非 BMP 字符 💩 JS 把它认为是两个字符，所以匹配失败。<br>ES6 为正则表达式定义了一个新的修饰符，<code>u</code> 也即 Unicode。当一个正则表达式设置了 <code>u</code> 修饰符时，它将切换模式为工作在字符串，而不是 code unit。这意味着正则表达式在包含非 BMP 字符的字符串中不会迷惑。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.<span class="built_in">log</span>(/^.$/<span class="keyword">u</span>.<span class="keyword">test</span>(<span class="keyword">char</span>)); <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://cookfront.github.io/2015/06/04/es6-string/" target="_blank" rel="external">每天学点ES6－字符串</a><br><a href="http://www.alloyteam.com/2016/12/javascript-has-a-unicode-sinkhole/" target="_blank" rel="external">Javascript有个Unicode的天坑</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/IMG_1915.PNG&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Unicode" scheme="http://objcer.com/categories/Unicode/"/>
    
    
      <category term="BMP" scheme="http://objcer.com/tags/BMP/"/>
    
      <category term="charCodeAt" scheme="http://objcer.com/tags/charCodeAt/"/>
    
      <category term="codePointAt" scheme="http://objcer.com/tags/codePointAt/"/>
    
  </entry>
  
  <entry>
    <title>关于 ES6 Promise</title>
    <link href="http://objcer.com/2017/05/07/About-Promise/"/>
    <id>http://objcer.com/2017/05/07/About-Promise/</id>
    <published>2017-05-07T10:03:15.000Z</published>
    <updated>2017-06-27T07:25:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/do-you-promise.png" alt=""></p>
<a id="more"></a>
<h2 id="串行-Promise"><a href="#串行-Promise" class="headerlink" title="串行 Promise"></a>串行 Promise</h2><p>Promise 有一个 <code>Promise.all</code> 方法，接收一个 Promise 对象数组作参数，<strong>并行</strong>执行其中的 Promise 对象，当这个数组中的所有 Promise 对象都 <code>resolve</code> 或者某一个 Promise 对象 <code>reject</code> 时，调用 <code>then</code> 方法。</p>
<p>但是，如果需要进行在 A 处理完成之后，再开始 B 的处理，对于这种串行顺序处理，Promise 并没有提供支持。那我们只能自己解决。</p>
<h3 id="重复使用多个-then-实现"><a href="#重复使用多个-then-实现" class="headerlink" title="重复使用多个 then 实现"></a>重复使用多个 <code>then</code> 实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPromise</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'promise: '</span>, name);</div><div class="line">            resolve();</div><div class="line">        &#125;, <span class="number">2000</span>);</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">getPromise(<span class="string">'one'</span>).then(getPromise.bind(<span class="literal">undefined</span>, <span class="string">'two'</span>));</div></pre></td></tr></table></figure>
<p>注意：通过 <code>new</code> 实例化一个 Promise 的时候，promise 已经开始执行，所以我们都是通过使用一个函数，返回一个 Promise 对象</p>
<p>通过使用 <code>then</code> 将两个 Promise 串联起来，使其顺序执行，但是随着串行处理的 Promise 增多，需要不断增加 <code>then</code> 方法的调用，在实际使用过程中并不方便。我们可以通过 <code>for</code> 循环解决这个问题。</p>
<h3 id="通过-for-循环实现"><a href="#通过-for-循环实现" class="headerlink" title="通过 for 循环实现"></a>通过 <code>for</code> 循环实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ps = [</div><div class="line">    getPromise.bind(<span class="literal">undefined</span>, <span class="string">'one'</span>),</div><div class="line">    getPromise.bind(<span class="literal">undefined</span>, <span class="string">'two'</span>)</div><div class="line">]</div><div class="line"><span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve();</div><div class="line">ps.forEach(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</div><div class="line">    promise = promise.then(p);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>注意：数组中的元素都是返回 Promise 对象的函数</p>
<p>这种处理方式需要一个中间变量 <code>promise</code>，通过不断覆盖 <code>promise</code> 变量的值，达到 <code>promise1.then(promise2)</code> 的累积效果。但是由于多使用了一个中间变量，代码显得不够简洁。</p>
<h3 id="通过-Array-prototype-reduce-实现"><a href="#通过-Array-prototype-reduce-实现" class="headerlink" title="通过 Array.prototype.reduce 实现"></a>通过 <code>Array.prototype.reduce</code> 实现</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var ps = [</div><div class="line">    getPromise.bind(<span class="literal">undefined</span>, <span class="string">'one'</span>),</div><div class="line">    getPromise.bind(<span class="literal">undefined</span>, <span class="string">'two'</span>)</div><div class="line">]</div><div class="line">ps.reduce(<span class="function"><span class="params">(promise, p)</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> promise.<span class="keyword">then</span>(p);</div><div class="line">&#125;, Promise.resolve())</div></pre></td></tr></table></figure>
<p>这种实现串行 Promise 就显得很简洁了吧，在实际开发应用中大多也用此方式 👊</p>
<blockquote>
<p>关于 reduce 用法，参考 <a href="http://objcer.com/2017/03/11/implement-the-array-map-reduce-filter-find-method/#more">实现 map, reduce, filter, find 方法</a></p>
</blockquote>
<h3 id="定义串行-Promise-函数"><a href="#定义串行-Promise-函数" class="headerlink" title="定义串行 Promise 函数"></a>定义串行 Promise 函数</h3><p>在应用开发过程中，许多需要 Promise 串行执行，例如多个网络请求串行时，我们就可以通过如下方式进行，该方法接收一个接收一个函数数组，数组中的函数元素都返回一个 Promise 对象，并将每一个 Promise 对象 <code>resolve</code> 的执行结果存储在一个数组中，等所有的 Promise 对象 <code>resolve</code> 之后，将结果数组返回。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> sequencePromise(tasks) &#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_recordResults</span>(<span class="params">resultArray, result</span>) </span>&#123;</div><div class="line">        resultArray.push(result);</div><div class="line">        <span class="keyword">return</span> resultArray;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> pushResult = _recordResults.bind(<span class="literal">null</span>, []);</div><div class="line">    <span class="keyword">return</span> tasks.reduce(<span class="function">(<span class="params">promise, task</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> promise.then(task).then(pushResult);</div><div class="line">    &#125;, <span class="built_in">Promise</span>.resolve())</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="并行-Promise"><a href="#并行-Promise" class="headerlink" title="并行 Promise"></a>并行 Promise</h2><h3 id="关于-Promise-all-和-Promise-race"><a href="#关于-Promise-all-和-Promise-race" class="headerlink" title="关于 Promise.all 和 Promise.race"></a>关于 <code>Promise.all</code> 和 <code>Promise.race</code></h3><p>Promise 的这两个静态方法，都接收一个 iterable 可迭代对象（例如：Promise Array）作为参数，<strong>并行</strong>执行其中的 Promise 实例，结果返回一个 Promise；二者的区别是：</p>
<ul>
<li><code>Promise.all</code>: 可迭代对象中的所有 Promise 都 resolve 之后 resolve；或者在任一 Promise 被 reject 后 reject</li>
<li><code>Promise.race</code>: 可迭代对象中的第一个 Promise 被 resolve 或者 reject 后，进行 resolve 或者 reject</li>
</ul>
<p>看如下的例子：<br>有如下三个 Promise 实例<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var p1 = <span class="keyword">new</span> Promise(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="string">'p1'</span>), <span class="number">2000</span>)</div><div class="line">&#125;);</div><div class="line">var p2 = <span class="keyword">new</span> Promise(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> reject(<span class="string">'p2'</span>), <span class="number">1000</span>)</div><div class="line">&#125;);</div><div class="line">var p3 = <span class="keyword">new</span> Promise(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="string">'p3'</span>), <span class="number">500</span>)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>① <code>Promise.all</code>：所有 Promise 都 resolve 之后 resolve<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Promise.all([p1, p3]).<span class="keyword">then</span>(<span class="function"><span class="params">(value)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'--resolve--: '</span>, value)</div><div class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="params">(err)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'--reject--: '</span>, err)</div><div class="line">&#125;)</div><div class="line"><span class="regexp">//</span> 输出：--resolve--:  [<span class="string">"p1"</span>, <span class="string">"p3"</span>]</div></pre></td></tr></table></figure></p>
<p>② <code>Promise.all</code>：任一 Promise 被 reject 后 reject<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Promise.all([p1, p2, p3]).<span class="keyword">then</span>(<span class="function"><span class="params">(value)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'--resolve--: '</span>, value)</div><div class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="params">(err)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'--reject--: '</span>, err)</div><div class="line">&#125;)</div><div class="line"><span class="regexp">//</span> 输出：--reject--:  p2</div></pre></td></tr></table></figure></p>
<p>① <code>Promise.race</code>：第一个 Promise 被 resolve 或者 reject 后，进行 resolve 或者 reject<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Promise.race([p1, p2, p3]).<span class="keyword">then</span>(<span class="function"><span class="params">(value)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'--resolve--: '</span>, value)</div><div class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="params">(err)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'--reject--: '</span>, err)</div><div class="line">&#125;)</div><div class="line"><span class="regexp">//</span> 输出：输出：--reject--:  p3</div></pre></td></tr></table></figure></p>
<h3 id="并行-Promise-1"><a href="#并行-Promise-1" class="headerlink" title="并行 Promise"></a>并行 Promise</h3><p>对于：<em>并行执行 Promises 等待所有的 Promise 都完成执行（不管是 resolve 还是 reject）才结束。</em>这种情形使用 <code>Promise.all</code> 并不能满足，因为 <code>Promise.all</code> 在任一 Promise 被 reject 后 reject，这种情形需要对 Promise 进行一些处理后，再使用 <code>Promise.all</code></p>
<blockquote>
<p>参考：<a href="https://stackoverflow.com/questions/31424561/wait-until-all-es6-promises-complete-even-rejected-promises?answertab=votes#tab-top" target="_blank" rel="external">Wait until all ES6 promises complete, even rejected promises</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">parallelPromise</span>(<span class="params">tasks</span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reflect</span>(<span class="params">promise</span>) </span>&#123;</div><div class="line">         <span class="keyword">return</span> promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123; <span class="keyword">return</span> &#123;<span class="attr">v</span>:v, <span class="attr">status</span>: <span class="string">"resolved"</span> &#125;&#125;,</div><div class="line">                            <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123; <span class="keyword">return</span> &#123;<span class="attr">e</span>:e, <span class="attr">status</span>: <span class="string">"rejected"</span> &#125;&#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.all(tasks.map(reflect));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="string">'p1'</span>), <span class="number">2000</span>)</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> reject(<span class="string">'p2'</span>), <span class="number">1000</span>)</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="string">'p3'</span>), <span class="number">500</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">parallelPromise([p1, p2, p3]).then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">var</span> success = results.filter(<span class="function"><span class="params">x</span> =&gt;</span> x.status === <span class="string">"resolved"</span>);</div><div class="line">    <span class="keyword">var</span> fail = results.filter(<span class="function"><span class="params">x</span> =&gt;</span> x.status === <span class="string">"rejected"</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'--success--: '</span>, <span class="built_in">JSON</span>.stringify(success));</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'--fail--: '</span>, <span class="built_in">JSON</span>.stringify(fail));</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">-success--:  [&#123;<span class="string">"v"</span><span class="symbol">:<span class="string">"p1"</span></span>,<span class="string">"status"</span><span class="symbol">:<span class="string">"resolved"</span></span>&#125;,&#123;<span class="string">"v"</span><span class="symbol">:<span class="string">"p3"</span></span>,<span class="string">"status"</span><span class="symbol">:<span class="string">"resolved"</span></span>&#125;]</span></div><div class="line">-<span class="ruby">-fail--:  [&#123;<span class="string">"e"</span><span class="symbol">:<span class="string">"p2"</span></span>,<span class="string">"status"</span><span class="symbol">:<span class="string">"rejected"</span></span>&#125;]</span></div></pre></td></tr></table></figure></p>
<h2 id="可取消的-Promise"><a href="#可取消的-Promise" class="headerlink" title="可取消的 Promise"></a>可取消的 Promise</h2><p>Promise 并没有提供 <code>cancel</code> 的接口，但是我们可以对其进行封装实现 Promise 可取消(cancelable).</p>
<blockquote>
<p>参考自：<a href="https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html" target="_blank" rel="external">isMounted is an Antipattern</a></p>
</blockquote>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">const makeCancelable = <span class="function"><span class="params">(promise)</span> =&gt;</span> &#123;</div><div class="line">    let hasCanceled_ = <span class="literal">false</span>;</div><div class="line"></div><div class="line">    const wrappedPromise = <span class="keyword">new</span> Promise(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</div><div class="line">        promise.<span class="keyword">then</span>(<span class="function"><span class="params">(val)</span> =&gt;</span></div><div class="line">            hasCanceled_ ? reject(&#123;isCanceled: <span class="literal">true</span>&#125;) : resolve(val)</div><div class="line">        );</div><div class="line">        promise.<span class="keyword">catch</span>(<span class="function"><span class="params">(error)</span> =&gt;</span></div><div class="line">              hasCanceled_ ? reject(&#123;isCanceled: <span class="literal">true</span>&#125;) : reject(error)</div><div class="line">        );</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        promise: wrappedPromise,</div><div class="line">        cancel() &#123;</div><div class="line">          hasCanceled_ = <span class="literal">true</span>;</div><div class="line">        &#125;,</div><div class="line">    &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>测试例子🌰：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var cancelablePromise = makeCancelable(<span class="keyword">new</span> Promise(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        resolve(<span class="string">'ok'</span>);</div><div class="line">    &#125;, <span class="number">3000</span>)</div><div class="line">&#125;));</div><div class="line"></div><div class="line">cancelablePromise</div><div class="line">    .promise</div><div class="line">    .<span class="keyword">then</span>(<span class="function"><span class="params">(value)</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'---resolve---'</span>, value);</div><div class="line">    &#125;)</div><div class="line">    .<span class="keyword">catch</span>(<span class="function"><span class="params">(reason)</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'---cancel---'</span>, reason.isCanceled);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="regexp">//</span> cancelablePromise.cancel()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/do-you-promise.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://objcer.com/categories/JS/"/>
    
    
      <category term="Promise" scheme="http://objcer.com/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>关于 ES6 Module</title>
    <link href="http://objcer.com/2017/04/19/About-ES6-Module/"/>
    <id>http://objcer.com/2017/04/19/About-ES6-Module/</id>
    <published>2017-04-19T12:44:58.000Z</published>
    <updated>2017-05-02T13:20:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>问题引入：</em>最近在 Babel 编译时遇到一个问题，对 ES6 Module 编译的问题，本文将对解决该问题过程中关于 ES6 Module 有关内容进行记录和介绍。</p>
<a id="more"></a>
<h2 id="关于：CommonJS-AMD-CMD-UMD"><a href="#关于：CommonJS-AMD-CMD-UMD" class="headerlink" title="关于：CommonJS, AMD, CMD, UMD"></a>关于：CommonJS, AMD, CMD, UMD</h2><ul>
<li>CommonJS: 用于服务端，模块同步加载，node.js 的模块系统就是基于 CommonJS 规范的实现</li>
<li>AMD (Asynchronous Module Definition): 用于浏览器端，模块异步加载，目前，流行的 require.js 库就实现了 AMD 规范</li>
<li>CMD (Common Module Definition): 是 SeaJS 在推广过程中对模块定义的规范化，和 AMD 有些类似，参考：<a href="https://github.com/seajs/seajs/issues/277" target="_blank" rel="external">与 RequireJS 的异同</a></li>
<li>UMD (Universal Module Definition): 兼容了 AMD 和 CommonJS，同时还支持老式的“全局”变量规范，使得模块化代码可以在前端浏览器和后台服务端中运行</li>
</ul>
<h2 id="问题阐述及解决"><a href="#问题阐述及解决" class="headerlink" title="问题阐述及解决"></a>问题阐述及解决</h2><p>在 <code>test.js</code> 文件中，有如下一行代码：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="builtin-name">export</span><span class="built_in"> default </span>23;</div></pre></td></tr></table></figure></p>
<p>在 <code>gulpfile.js</code> 文件中，有如下任务对其进行编译：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"><span class="keyword">const</span> $ = <span class="built_in">require</span>(<span class="string">'gulp-load-plugins'</span>)();</div><div class="line"></div><div class="line">gulp.task(<span class="string">'babel'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'src/test.js'</span>])</div><div class="line">        .pipe($.babel(&#123;</div><div class="line">            <span class="attr">presets</span>: [<span class="string">'es2015'</span>]</div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'bin/'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>执行 <code>gulp babel</code> 编译后，结果为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123;</div><div class="line">  <span class="attr">value</span>: <span class="literal">true</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">exports.default = <span class="number">23</span>;</div></pre></td></tr></table></figure></p>
<p>那么使用过程中会遇到什么问题呢？<br>例如，我们在 <code>node.js</code> 文件中有如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./test.js'</span>); <span class="comment">// &#123; default: 23 &#125;</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'---'</span>, a);</div></pre></td></tr></table></figure></p>
<p>执行 <code>node node.js</code> 后，输出的结果为：<code>--- { default: 23 }</code><br>如果想要 <code>a</code> 即为 23，那么需要：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./test.js'</span>).<span class="keyword">default</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'---'</span>, a);</div></pre></td></tr></table></figure></p>
<p>显然每次 <code>require</code> 使用的时候需要手动添加 <code>default</code> 比较麻烦，而且代码也不好看🙃。那么有什么方法解决这个问题么？</p>
<p><strong>👇下面我们需要对 <code>exports</code> 和 <code>module.exports</code> 进行了解</strong></p>
<p>在 Node.js modules 中，我们对 <code>exports</code> 都不陌生，我们可以通过 <code>exports</code> 暴露任何合法的 JavaScript 对象，包括：boolean, number, date, JSON, string, function, array 等等。<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">exports</span>.<span class="keyword">name</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="comment">&#123;</span></span></div><div class="line">    console.log('My name is XiaoDeng');</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>然后在其他文件中使用：<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myName = require(<span class="string">'./test.js'</span>);</div><div class="line">myName.<span class="keyword">name</span>(); <span class="comment">// 'My name is XiaoDeng'</span></div></pre></td></tr></table></figure></p>
<p>那么 <code>module.exports</code> 又是什么呢❓</p>
<blockquote>
<p>The <code>module.exports</code> object is created by the Module system.</p>
</blockquote>
<p>所以真实存在，且最终返回给调用者的是 <code>module.exports</code>；而 <code>exports</code> 只是 <code>module.exports</code> 的 <strong>shortcut/alias</strong> 辅助别名。我们可以这么理解：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">module</span> = <span class="keyword">new</span> <span class="keyword">Module</span>(...);</div><div class="line"><span class="keyword">var</span> exports = <span class="keyword">module</span>.exports;</div></pre></td></tr></table></figure></p>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/exports&amp;module.exports.png" alt=""><br><code>module.exports</code> 初始值为一个空对象 <code>{}</code>; <code>exports</code> 是指向的对象和 <code>module.exports</code> 执向的对象相同。</p>
<p><code>exports</code> 的作用在于收集属性和方法，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">exports.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"a"</span>);</div><div class="line">&#125;</div><div class="line">exports.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"b"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时，<code>exports</code> 和 <code>module.exports</code> 都是指向同一对象：{ a: [Function], b: [Function] }；<br>但是如果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">exports = <span class="function"><span class="keyword">function</span> <span class="title">Something</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'bla bla'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时，<code>exports</code> 执向的对象和  指向的对象已经不同，此时 <code>exports</code> 执行的是一个函数，而 <code>module.exports</code> 却依然执向一个空对象 <code>{}</code>，二者的引用不同。可以通过 <code>exports = module.exports</code> 让 <code>exports</code> 重新指向 <code>module.exports</code> 即可保持二者引用相同。</p>
<blockquote>
<p>对上述问题的理解就涉及到 <a href="http://objcer.com/2017/02/26/js-pass-by-value-or-by-reference/">JS中是 pass by value 还是 pass by reference</a></p>
</blockquote>
<p>通过以上的分析，我们推荐是使用 <code>module.exports</code> 而非 <code>exports</code>。（Node.js文档中也是这么推荐的）</p>
<p>由此，我们可以通过添加 <code>module.exports</code> 来解决 <code>require</code> 时需要指定 <code>default</code> 的问题<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123;</div><div class="line">  <span class="attr">value</span>: <span class="literal">true</span></div><div class="line">&#125;);</div><div class="line">exports.default = <span class="string">'foo'</span>;</div><div class="line"><span class="built_in">module</span>.exports = exports[<span class="string">'default'</span>];</div></pre></td></tr></table></figure></p>
<p>如上这个过程可以通过 <strong>🚀<a href="https://github.com/59naga/babel-plugin-add-module-exports" target="_blank" rel="external">babel-plugin-add-module-exports</a></strong> 插件，在 babel 过程中自动处理。</p>
<p>由于浏览器中缺少 <code>module</code> <code>exports</code> <code>require</code> <code>global</code> 这四个 NodeJS 环境变量，所以不兼容 CommonJS，也就是说，浏览器中并不能使用上述的模块，那么为了解决如上问题，我们需要另一个插件 <strong>🚀<a href="http://babeljs.io/docs/plugins/transform-es2015-modules-umd/" target="_blank" rel="external">ES2015 modules to UMD transform</a></strong>，将模块代码编译成 UMD 模式。</p>
<p>综上：下载插件，在 babel 过程中传入两个插件名即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 下载插件</span></div><div class="line">npm install --save-dev babel-plugin-add-<span class="built_in">module</span>-exports</div><div class="line">npm install --save-dev babel-plugin-transform-es2015-modules-umd</div><div class="line"></div><div class="line"><span class="comment">// gulpfile babel 任务中指定插件</span></div><div class="line">gulp.task(<span class="string">'babel'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'src/test.js'</span>])</div><div class="line">        .pipe($.babel(&#123;</div><div class="line">            <span class="attr">presets</span>: [<span class="string">'es2015'</span>],</div><div class="line">            <span class="attr">plugins</span>: [</div><div class="line">                <span class="string">"add-module-exports"</span>, <span class="string">"transform-es2015-modules-umd"</span></div><div class="line">            ]</div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'bin/'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>经过编译后，最终生成的代码如下：<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">(<span class="name">function</span> (<span class="name">global</span>, factory) &#123;</div><div class="line">  if (<span class="name">typeof</span> define === <span class="string">"function"</span> &amp;&amp; define.amd) &#123;</div><div class="line">    define([<span class="string">"module"</span>, <span class="string">"exports"</span>], factory)<span class="comment">;</span></div><div class="line">  &#125; else if (<span class="name">typeof</span> exports !== <span class="string">"undefined"</span>) &#123;</div><div class="line">    factory(<span class="name">module</span>, exports)<span class="comment">;</span></div><div class="line">  &#125; else &#123;</div><div class="line">    var mod = &#123;</div><div class="line">      exports: &#123;&#125;</div><div class="line">    &#125;<span class="comment">;</span></div><div class="line">    factory(<span class="name"><span class="builtin-name">mod</span></span>, mod.exports)<span class="comment">;</span></div><div class="line">    global.test = mod.exports;</div><div class="line">  &#125;</div><div class="line">&#125;)(<span class="name">this</span>, function (<span class="name">module</span>, exports) &#123;</div><div class="line">  <span class="string">"use strict"</span><span class="comment">;</span></div><div class="line"></div><div class="line">  Object.defineProperty(<span class="name">exports</span>, <span class="string">"__esModule"</span>, &#123;</div><div class="line">    value: <span class="literal">true</span></div><div class="line">  &#125;)<span class="comment">;</span></div><div class="line">  exports.default = <span class="number">23</span><span class="comment">;</span></div><div class="line">  module.exports = exports[<span class="string">"default"</span>]<span class="comment">;</span></div><div class="line">&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://medium.com/@kentcdodds/misunderstanding-es6-modules-upgrading-babel-tears-and-a-solution-ad2d5ab93ce0" target="_blank" rel="external">Misunderstanding ES6 Modules, Upgrading Babel, Tears, and a Solution</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;问题引入：&lt;/em&gt;最近在 Babel 编译时遇到一个问题，对 ES6 Module 编译的问题，本文将对解决该问题过程中关于 ES6 Module 有关内容进行记录和介绍。&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://objcer.com/categories/JS/"/>
    
    
      <category term="Module" scheme="http://objcer.com/tags/Module/"/>
    
      <category term="Babel" scheme="http://objcer.com/tags/Babel/"/>
    
      <category term="exports" scheme="http://objcer.com/tags/exports/"/>
    
      <category term="module.exports" scheme="http://objcer.com/tags/module-exports/"/>
    
  </entry>
  
  <entry>
    <title>详解 javascript this 关键字</title>
    <link href="http://objcer.com/2017/03/26/javascript-this-keyword/"/>
    <id>http://objcer.com/2017/03/26/javascript-this-keyword/</id>
    <published>2017-03-26T09:02:09.000Z</published>
    <updated>2017-03-26T10:49:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>this</code> 是 Javascript 语言的一个关键字。 它代表函数运行时，自动生成的一个内部对象，只能在函数内部使用。而这个内部对象 this 指向谁有时却让我们很困惑。在绝大多数情况下，函数的调用方式决定了 this 的值。this 不能在执行期间被赋值，在每次函数被调用时 this 的值也可能会不同。</p>
<a id="more"></a>
<h2 id="this-指向谁"><a href="#this-指向谁" class="headerlink" title="this 指向谁"></a>this 指向谁</h2><h3 id="Function-Invocation-Pattern"><a href="#Function-Invocation-Pattern" class="headerlink" title="Function Invocation Pattern"></a>Function Invocation Pattern</h3><p>诸如 <code>foo()</code> 的调用形式被称为 Function Invocation Pattern，是函数最直接的使用形式，注意这里的 foo 是作为单独的变量出现，而不是属性。在这种模式下，foo 函数体中的 this 永远为 Global 对象，在浏览器中就是 window 对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 例子1：</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a, <span class="keyword">this</span> === <span class="built_in">window</span>)</div><div class="line">&#125;</div><div class="line">foo() <span class="comment">// 1 true</span></div><div class="line"></div><div class="line"><span class="comment">// 例子2：</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'foo: '</span>, <span class="keyword">this</span>.a, <span class="keyword">this</span> === <span class="built_in">window</span>)</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'bar: '</span>, <span class="keyword">this</span>.a, <span class="keyword">this</span> === <span class="built_in">window</span>)</div><div class="line">    &#125;</div><div class="line">    bar() <span class="comment">// bar:  1 true</span></div><div class="line">&#125;</div><div class="line">foo() <span class="comment">// foo:  1 true</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>需要注意的是：在严格模式(‘use strict’)中的默认的 this 不再是 window，而是 undefined.</p>
</blockquote>
<h3 id="Method-Invocation-Pattern"><a href="#Method-Invocation-Pattern" class="headerlink" title="Method Invocation Pattern"></a>Method Invocation Pattern</h3><p>诸如 <code>foo.bar()</code> 的调用形式被称为 Method Invocation Pattern，注意其特点是被调用的函数作为一个对象的属性出现，必然会有“.”或者“[]”这样的关键符号。在这种模式下，bar 函数体中的this永远为“.”或“[”前的那个对象，如下面例中就 <code>foo</code> 函数中 <code>this</code> 就是指向 <code>obj</code> 对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">a</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a, <span class="keyword">this</span> === obj) <span class="comment">// 1 true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">obj.foo();</div></pre></td></tr></table></figure></p>
<h3 id="Constructor-Pattern"><a href="#Constructor-Pattern" class="headerlink" title="Constructor Pattern"></a>Constructor Pattern</h3><p><code>new foo()</code> 这种形式的调用被称为 Constructor Pattern，其关键字 <code>new</code> 就很能说明问题，当一个函数被作为一个构造函数来使用（使用new关键字），它的 <code>this</code> 与即将被创建的新对象绑定。如下面例子中，<code>foo</code> 函数内部的 <code>this</code> 永远是 <code>new foo()</code> 返回的对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.a = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> foo();</div><div class="line"><span class="built_in">console</span>.log(f.a) <span class="comment">// 1</span></div></pre></td></tr></table></figure></p>
<h3 id="Apply-Pattern"><a href="#Apply-Pattern" class="headerlink" title="Apply Pattern"></a>Apply Pattern</h3><p><code>foo.call(thisObject)</code> 和 <code>foo.apply(thisObject)</code> 的形式被称为 Apply Pattern，使用了内置的 <code>call</code> 和 <code>apply</code> 函数。在这种模式下，<code>call</code> 和 <code>apply</code> 的第一个参数就是 <code>foo</code> 函数体内的 <code>this</code>，如果 <code>thisObject</code> 是 <code>null</code> 或 <code>undefined</code>，那么会变成 Global 对象。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(c, d)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b + c + d;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    a: <span class="number">1</span>,</div><div class="line">    b: <span class="number">2</span></div><div class="line">&#125;</div><div class="line">add.call(obj, <span class="number">3</span>) <span class="comment">// 6</span></div><div class="line">add.apply(obj, [<span class="number">3</span>, <span class="number">4</span>]) <span class="comment">// 10</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>this 对象只会在一个函数中需要确定，如果是在全局域下，this 永远为 Global 对象，在浏览器中通常就是 window 对象。<br>应用以上4种方式，确定一个函数是使用什么样的 Pattern 进行调用的，就能很容易确定 this 是什么。另外，this 是永远不会延作用域链或原型链出现一个“查找”的过程的，只会在函数调用时就可以完全确认。</p>
</blockquote>
<h3 id="常见例子"><a href="#常见例子" class="headerlink" title="常见例子"></a>常见例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">x</span>: <span class="number">20</span>,</div><div class="line">    <span class="attr">f</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</div><div class="line">        <span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</div><div class="line">        &#125;</div><div class="line">        foo(); <span class="comment">// (2)</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">obj.f(); <span class="comment">// (1)</span></div></pre></td></tr></table></figure>
<p>其中两处调用(1)、(2) 分别输出： 20、10；</p>
<ul>
<li>(1): <code>obj.f()</code> 调用，被调用的函数 <code>f</code> 作为 <code>obj</code> 对象的属性出现，属于 Method Invocation Pattern，<code>f</code> 函数内的 <code>this</code> 指向 <code>obj</code>, 所以 <code>f</code> 函数中输出 <code>this.x</code> 为20</li>
<li>(2): <code>f</code> 函数中调用 <code>foo</code> 函数时是作为单独的变量出现，而非某个对象的属性，属于 Function Invocation Pattern，所以其中 <code>this</code> 指向全局变量 window, 输出 <code>this.x</code> 时找到全局变量中 <code>x</code> 的值 10，所以输出为 10</li>
</ul>
<p>那么如果也希望(2)处调用输出 20，要如何修改呢？👇<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">x</span>: <span class="number">20</span>,</div><div class="line">    <span class="attr">f</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</div><div class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(that.x);</div><div class="line">        &#125;</div><div class="line">        foo(); <span class="comment">// (2)</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">obj.f(); <span class="comment">// (1)</span></div></pre></td></tr></table></figure></p>
<h2 id="bind-函数和箭头函数"><a href="#bind-函数和箭头函数" class="headerlink" title="bind 函数和箭头函数"></a>bind 函数和箭头函数</h2><h3 id="bind-函数"><a href="#bind-函数" class="headerlink" title="bind 函数"></a>bind 函数</h3><p>ES5 引入了 <code>bind</code> 方法来设置函数的 <code>this</code> 值，而不用考虑函数如何被调用的。调用 <code>f.bind(someObject)</code> 会创建一个与 f 具有相同函数体和作用域的函数，但是在这个新函数中，this 将永久地被绑定到了 bind 的第一个参数，无论这个函数是如何被调用的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> bar = foo.bind(&#123;</div><div class="line">    <span class="attr">a</span>: <span class="string">'hello'</span></div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(bar()) <span class="comment">// hello</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">    <span class="attr">a</span>: <span class="string">'world'</span>,</div><div class="line">    <span class="attr">foo</span>: foo,</div><div class="line">    <span class="attr">bar</span>: bar</div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(o.foo(), o.bar()) <span class="comment">// world hello</span></div></pre></td></tr></table></figure></p>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数在设计中使用的是 Lexical this，即<strong>这个函数被创建时的所在环境的 this 就是函数内部的 this</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printThis</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> print = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    print();</div><div class="line">&#125;</div><div class="line">printThis.call([<span class="number">1</span>]); <span class="comment">// [1]</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printThis</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)</div><div class="line">    &#125;</div><div class="line">    print();</div><div class="line">&#125;</div><div class="line">printThis.call([<span class="number">1</span>]); <span class="comment">// window</span></div></pre></td></tr></table></figure>
<h2 id="DOM事件处理函数中的-this"><a href="#DOM事件处理函数中的-this" class="headerlink" title="DOM事件处理函数中的 this"></a>DOM事件处理函数中的 this</h2><p>为 DOM 元素添加事件处理函数大致有以下两种方式：</p>
<h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p><code>element.onclick = doSomething;</code>，函数被用作事件处理函数时，它的this指向触发事件的元素<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'btn1'</span>&gt;</span>click me! btn1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'btn2'</span>&gt;</span>click me! btn2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.id)</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> btn1Element = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>),</div><div class="line">	btn2Element = <span class="built_in">document</span>.getElementById(<span class="string">'btn2'</span>);</div><div class="line">btn1Element.onclick = clickHandler;</div><div class="line">btn2Element.onclick = clickHandler;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在这个例子中，点击 button 之后，会执行其 <code>onclick</code> 事件回调函数 <code>clickHandler</code>，执行时，函数中的 <code>this</code> 都会指向触发事件的 button 元素（<code>onclick</code> 是 button 元素的一个属性）</p>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p><code>&lt;element onclick=&quot;doSomething()&quot;&gt;</code>，在内联事件处理函数中的 <code>this</code>，并不指向触发事件的元素<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'btn1'</span> <span class="attr">onclick</span>=<span class="string">"clickHandler()"</span>&gt;</span>click me! btn1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'btn2'</span> <span class="attr">onclick</span>=<span class="string">"clickHandler()"</span>&gt;</span>click me! btn2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>, <span class="keyword">this</span>.id)</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在这个例子中，点击 button 之后，会执行 <code>clickHandler()</code> 函数，这属于 Function Invocation Pattern，所以此时函数中的 <code>this</code> 指向为 windows（严格模式下为 undefined）</p>
<p>如果希望在内联事件处理函数中的 <code>this</code> 也指向该元素，那么我们可以用 <code>bind</code> 函数指定其 <code>this</code> 值。</p>
<blockquote>
<p>当然也可以使用 <code>call</code> 或者 <code>apply</code> 方法。<a href="http://objcer.com/2017/02/19/apply-call-bind/">JavaScript 中的 apply、call、bind</a></p>
</blockquote>
<figure class="highlight hsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">button</span> id=<span class="string">'btn1'</span> <span class="keyword">onclick</span>=<span class="string">"clickHandler.bind(this)()"</span>&gt;click me! btn1&lt;/<span class="keyword">button</span>&gt;</div><div class="line">&lt;<span class="keyword">button</span> id=<span class="string">'btn1'</span> <span class="keyword">onclick</span>=<span class="string">"clickHandler.call(this)"</span>&gt;click me! btn1&lt;/<span class="keyword">button</span>&gt;</div><div class="line">&lt;<span class="keyword">button</span> id=<span class="string">'btn1'</span> <span class="keyword">onclick</span>=<span class="string">"clickHandler.apply(this)"</span>&gt;click me! btn1&lt;/<span class="keyword">button</span>&gt;</div></pre></td></tr></table></figure>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>通过以上两种方式为 DOM 元素添加事件处理函数后，我们可以输出看看：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btn1Element = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line"><span class="built_in">console</span>.log(btn1Element.onclick)</div></pre></td></tr></table></figure></p>
<ul>
<li><p>方式一输出：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.id)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>方式二输出：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onclick</span><span class="params">(event)</span> </span>&#123;</div><div class="line">  clickHandler()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>通过以上也很好说明了，前者中的 <code>this</code> 指向触发事件的 DOM 元素；而后者中的 <code>this</code> 指向全局对象 window</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过以上的了解，不同方式为 DOM 元素添加事件处理函数，函数中的 <code>this</code> 指向可能不同，需要特别留意。</p>
<p>通过以下方式添加的事件处理函数，<code>this</code> 都正常指向 DOM 元素：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">element</span>.onclick = doSomething</div><div class="line"><span class="keyword">element</span>.addEventListener(<span class="string">'click'</span>,doSomething, <span class="literal">false</span>)</div><div class="line"><span class="keyword">element</span>.onclick = <span class="function"><span class="keyword">function</span> () &#123; <span class="title">this</span>.<span class="title">style</span>.<span class="title">color</span> = <span class="string">'#cc0000'</span>; &#125;</span></div><div class="line">&lt;<span class="keyword">element</span> onclick=<span class="string">"this.style.color = '#cc0000';"</span>&gt;</div><div class="line">&lt;<span class="keyword">element</span> onclick=<span class="string">"doSomething.bind(this)()"</span>&gt;</div><div class="line">&lt;<span class="keyword">element</span> onclick=<span class="string">"doSomething.call(this)"</span>&gt;</div><div class="line">&lt;<span class="keyword">element</span> onclick=<span class="string">"doSomething.apply(this)"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>而通过以下方式添加的事件处理函数，<code>this</code> 并不指向 DOM 元素：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">element</span>.onclick = <span class="function"><span class="keyword">function</span> () &#123; <span class="title">doSomething</span>() &#125;</span></div><div class="line"><span class="keyword">element</span>.attachEvent(<span class="string">'onclick'</span>, doSomething)</div><div class="line">&lt;<span class="keyword">element</span> onclick=<span class="string">"doSomething()"</span>&gt;</div></pre></td></tr></table></figure></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="external">MDN this</a><br><a href="http://www.quirksmode.org/js/this.html" target="_blank" rel="external">The this keyword</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;this&lt;/code&gt; 是 Javascript 语言的一个关键字。 它代表函数运行时，自动生成的一个内部对象，只能在函数内部使用。而这个内部对象 this 指向谁有时却让我们很困惑。在绝大多数情况下，函数的调用方式决定了 this 的值。this 不能在执行期间被赋值，在每次函数被调用时 this 的值也可能会不同。&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://objcer.com/categories/JS/"/>
    
    
      <category term="this" scheme="http://objcer.com/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>PhoneGap 入门踩坑</title>
    <link href="http://objcer.com/2017/03/25/getting-start-phonegap/"/>
    <id>http://objcer.com/2017/03/25/getting-start-phonegap/</id>
    <published>2017-03-25T08:27:07.000Z</published>
    <updated>2017-03-25T08:28:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司产品在线文章编辑器 <a href="https://d.wps.cn/home.html" target="_blank" rel="external">写得</a> 今年需要进行移动 APP 的开发，经过考察决定使用 PhoneGap，尽量重用原有的 web 代码，打包成移动 APP。在接下来一段时间将对这个框架进行一些学习。</p>
<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="http://phonegap.com/" target="_blank" rel="external">PhoneGap</a> 是一个跨平台的移动 app 开发框架，可以把 html css js 写的页面打包成跨平台的可以安装的移动 app，并且可以调用原生的几乎所有的功能，比如摄像头，联系人，加速度等。</p>
<p>📌 PhoneGap 和 Cordova 的关系？<br>Cordova 是 PhoneGap 贡献给 Apache 后的开源项目，是从 PhoneGap 中抽离出的核心代码，是驱动 PhoneGap 的核心引擎。有点类似 Webkit 和 Google Chrome 的关系。</p>
<blockquote>
<p><a href="http://phonegap.com/blog/2012/03/19/phonegap-cordova-and-whate28099s-in-a-name/" target="_blank" rel="external">PhoneGap, Cordova, and what’s in a name?</a><br>PhoneGap is a distribution of Apache Cordova. You can think of Apache Cordova as the engine that powers PhoneGap, similar to how WebKit is the engine that powers Chrome or Safari.</p>
</blockquote>
<h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><ol>
<li><p>全局安装 <code>phonegap</code></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="selector-tag">i</span> -g phonegap</div></pre></td></tr></table></figure>
</li>
<li><p>常用命令</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 创建一个app</div><div class="line">phonegap <span class="built_in">create</span> path/<span class="built_in">to</span>/my-app<span class="comment"></span></div><div class="line">// 添加 iOS 平台项目</div><div class="line">phonegap <span class="built_in">platform</span> <span class="built_in">add</span> ios <span class="comment">--save</span><span class="comment"></span></div><div class="line">// 更新 iOS 项目代码文件</div><div class="line">phonegap <span class="built_in">prepare</span> ios<span class="comment"></span></div><div class="line">// 启动浏览器调试服务</div><div class="line">phonegap serve<span class="comment"></span></div><div class="line">// iOS 模拟器中运行</div><div class="line">phonegap run ios <span class="comment">--emulator</span></div><div class="line">phonegap run ios <span class="comment">--emulator --target='iPhone-SE, 10.2'</span></div></pre></td></tr></table></figure>
</li>
<li><p>在 iOS 模拟器中调试</p>
</li>
</ol>
<p>虽然 PhoneGap 也提供了在浏览器中调试页面的命令 <code>phonegap serve</code> 但是在移动开发过程中，有些例如沙盒，ImagePicker 等的调试，就需要用模拟器来进行。除了通过如上 <code>phonegap run ios --emulator</code> 命令启模拟器之外，我们还可以用 Xcode 打开 <code>platforms/ios/</code> 目录中的 <code>xcworkspace</code> 然后运行跑出模拟器。</p>
<p>然后我们可以通过 Safari 调试工具对模拟器中的网页进行调试。</p>
<p>❗️有一个需要注意的技巧：点击 Xcode 中 run 跑出模拟器，如果我们的前端代码有问题，出错的话，就会在出错出中断执行，但是在 Xcode 中的调试输出和 Safari 的调试输出中都没有错误信息，所以我们有时候可能并不会发觉出错了，或者不知道哪里出了问题。解决这个问题比较简单，我们只需要在 Safari 调试页面中 reload 一下页面即可。</p>
<ul>
<li>方法一：<br>通常我们都是使用 Sublime Text 或者 Actom 这类编辑器来编写代码。编辑后，我们需要 <code>phonegap prepare ios</code> 来更新 iOS 项目，然后在 Xcode 中重新运行。重复如此的步骤，显然不是太方便。</li>
<li>方法二：<br>我们知道在 PhoneGap 打包移动应用，是把网页代码放在应用中，通过 file 协议进行加载，这样我们每次修改了页面，就需要通过 <code>phonegap prepare ios</code> 来更新 iOS 项目，然后需要 Xcode 重新运行。那如果我们把网页文件的引用修改成请求我们本地的 server 这样我们每次修改了文件，就只需要 reload 模拟器中的页面就可以了。</li>
</ul>
<p>①启动本地 server<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"><span class="keyword">const</span> browserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'debug'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">	browserSync(&#123;</div><div class="line">        port: <span class="number">8082</span>,</div><div class="line">        logPrefix: <span class="string">'WPS Writer'</span>,</div><div class="line">        open: <span class="literal">false</span>,</div><div class="line">        server: &#123;</div><div class="line">            baseDir: [<span class="string">'www'</span>],</div><div class="line">            directory: <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>②网页文件引用路径修改<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"scripts/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">变成--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://localhost:8082/scripts/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司产品在线文章编辑器 &lt;a href=&quot;https://d.wps.cn/home.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;写得&lt;/a&gt; 今年需要进行移动 APP 的开发，经过考察决定使用 PhoneGap，尽量重用原有的 web 代码，打包成移动 APP。在接下来一段时间将对这个框架进行一些学习。&lt;/p&gt;
    
    </summary>
    
      <category term="PhoneGap" scheme="http://objcer.com/categories/PhoneGap/"/>
    
    
  </entry>
  
  <entry>
    <title>闭包（closures）</title>
    <link href="http://objcer.com/2017/03/19/closures/"/>
    <id>http://objcer.com/2017/03/19/closures/</id>
    <published>2017-03-19T13:58:11.000Z</published>
    <updated>2017-07-20T11:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>JS 中闭包是一种特殊的对象。 <strong>它由两部分构成：函数，以及创建该函数的环境。环境由闭包创建时在作用域中的任何局部变量组成。</strong>简单的理解：在一个函数中创建了另一个函数，也就创建了一个闭包。</p>
<a id="more"></a>
<p>👇下面将通过一些闭包使用例子来理解闭包这个概念。</p>
<h2 id="闭包概念"><a href="#闭包概念" class="headerlink" title="闭包概念"></a>闭包概念</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> name = <span class="string">'Cony'</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(name)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> displayName = init();</div><div class="line">displayName();</div></pre></td></tr></table></figure>
<p>在这个例子中，<code>init</code> 函数执行后返回的匿名函数 <code>displayName</code> 就是一个闭包，由 <code>displayName</code> 函数和闭包创建时存在的 <code>Cony</code> 字符串形成。</p>
<p>其中有两点需要注意：</p>
<ul>
<li>闭包可以获取引用到创建时所在环境的局部变量</li>
<li><code>init</code> 函数执行后，其中的局部变量并不会马上被释放，所以在稍后闭包函数执行过程中可以被引用到（这一点可能和其他编程语言有点区别，例如C语言中，函数执行完毕，其中的局部变量就被释放了）</li>
</ul>
<h2 id="闭包引用创建环境中的局部变量"><a href="#闭包引用创建环境中的局部变量" class="headerlink" title="闭包引用创建环境中的局部变量"></a>闭包引用创建环境中的局部变量</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = <span class="number">12</span>;</div><div class="line">    <span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(num)</div><div class="line">    &#125;</div><div class="line">    num ++;</div><div class="line">    <span class="keyword">return</span> log;</div><div class="line">&#125;</div><div class="line"></div><div class="line">init()(); <span class="comment">// 13</span></div></pre></td></tr></table></figure>
<p>这个例子说明闭包函数中使用的 <code>num</code> 变量时引用外部的，而在执行时，外部的 <code>num</code> 变量已经变成了 13，所以会输出 13。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(num)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> num = <span class="number">12</span>;</div><div class="line">    <span class="keyword">return</span> log;</div><div class="line">&#125;</div><div class="line"></div><div class="line">init()(); <span class="comment">// 12</span></div></pre></td></tr></table></figure>
<p>这个例子说明，闭包函数可以使用创建时所在环境的所有局部变量，即便是在其后声明定义的。</p>
<blockquote>
<p>这个例子中涉及 variable hoisting（变量提升），可以参考 <a href="https://bitsofco.de/variable-and-function-hoisting-in-es2015/" target="_blank" rel="external">Variable and Function Hoisting in ES2015</a></p>
</blockquote>
<h2 id="在循环中创建闭包"><a href="#在循环中创建闭包" class="headerlink" title="在循环中创建闭包"></a>在循环中创建闭包</h2><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildList</span>(<span class="params">list</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> result = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.length; i++) &#123;</div><div class="line">        <span class="keyword">var</span> item = <span class="string">'item'</span> + i;</div><div class="line">        result.push( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(item + <span class="string">' '</span> + <span class="built_in">list</span>[i])&#125; );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testList</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> fnlist = buildList([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</div><div class="line">    <span class="comment">// Using j only to help prevent confusion -- could use i.</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; fnlist.length; j++) &#123;</div><div class="line">        fnlist[j]();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">testList()</div></pre></td></tr></table></figure>
<p>这个例子中， <code>buildList</code> 函数接收一个数组，然后为每一个数组元素创建一个闭包函数，返回闭包函数数组。期望中，<code>testList</code> 函数执行后，输出：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">item0 </span><span class="number">1</span></div><div class="line"><span class="keyword">item1 </span><span class="number">2</span></div><div class="line"><span class="keyword">item2 </span><span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>但是上面这段代码却重复输出3次：<code>item2 undefined</code>，这是为什么呢？🤔<br><em>分析一下：</em><br>在 <code>buildList</code> 函数中的 <code>for</code> 循环为 <code>result</code> 数组添加三个匿名函数，也就是闭包函数，这三个闭包函数创建时所在的环境相同，共享其中的局部变量（<code>item</code>，<code>i</code> 和 <code>list</code>）。值得注意的是，在函数 <code>buildList</code> 执行结束后， 局部变量 <code>item</code> 的值变成了 <code>item2</code>，<code>i</code> 的值已经变成 3，所以 <code>list[i]</code> 的值就是 <code>undefined</code>。所以在 <code>testList</code> 函数执行闭包函数 <code>fnlist[j]()</code> 时，每一次的输出结果都是相同的 <code>item2 undefined</code>。</p>
<p>那么要如何修改，才能得到我们期望中的结果呢？方式有好多种，简单罗列两种。<br>1、使用 ES6 <code>let</code> 代替 <code>var</code><br><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在 buildList 函数中，将其中的两处 var 替换成 let</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> item = <span class="string">'item'</span> + i;</div><div class="line">    result.push( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(item + <span class="string">' '</span> + <span class="built_in">list</span>[i])&#125; );</div><div class="line">&#125;</div><div class="line">--&gt;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.length; i++) &#123;</div><div class="line">    <span class="keyword">let</span> item = <span class="string">'item'</span> + i;</div><div class="line">    result.push( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(item + <span class="string">' '</span> + <span class="built_in">list</span>[i])&#125; );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、通过闭包解决<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildList</span>(<span class="params">list</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> result = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.length; i++) &#123;</div><div class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> index = i;</div><div class="line">            <span class="keyword">var</span> item = <span class="string">'item'</span> + index;</div><div class="line">            result.push( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(item + <span class="string">' '</span> + <span class="built_in">list</span>[index])&#125; );</div><div class="line">        &#125;)();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们知道，闭包函数可以引用创建时所在环境的局部变量，这里通过闭包，<code>for</code> 循环中每一个闭包引用的 <code>index</code> 都不同，都是单独的，这样，代码就如我们预期的结果运行。</p>
<h2 id="用闭包模拟私有属性和私有方法"><a href="#用闭包模拟私有属性和私有方法" class="headerlink" title="用闭包模拟私有属性和私有方法"></a>用闭包模拟私有属性和私有方法</h2><p>在 JS 中并不支持私有属性和方法，但是通过闭包可以模拟实现。通过闭包来定义公共接口，并隐藏私有方法和变量，这也称之为模块模式（module pattern）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Counter = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> privateCounter = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_changeBy</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">        privateCounter += val;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">increment</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            _changeBy(<span class="number">1</span>);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">decrement</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            _changeBy(<span class="number">-1</span>);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">value</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> privateCounter;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>其中 <code>privateCounter</code> 和 <code>_changeBy</code> 分别为私有变量和私有方法，无法通过 <code>Counter</code> 直接访问；而 <code>increment</code> <code>decrement</code> <code>value</code> 均为公共接口。</p>
<h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>在 <a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html" target="_blank" rel="external">学习Javascript闭包（Closure）</a> 这篇文章最后提到两个例子，引用到此处，以下两段代码分别输出什么，其中也涉及到 <code>this</code> 关键字的问题。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">"My Object"</span>,</div><div class="line">    <span class="attr">getNameFunc</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(object.getNameFunc()());</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">"My Object"</span>,</div><div class="line">    <span class="attr">getNameFunc</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> that.name;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(object.getNameFunc()());</div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://stackoverflow.com/questions/111102/how-do-javascript-closures-work?answertab=votes#tab-top" target="_blank" rel="external">JavaScript Closures for Beginners</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS 中闭包是一种特殊的对象。 &lt;strong&gt;它由两部分构成：函数，以及创建该函数的环境。环境由闭包创建时在作用域中的任何局部变量组成。&lt;/strong&gt;简单的理解：在一个函数中创建了另一个函数，也就创建了一个闭包。&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://objcer.com/categories/JS/"/>
    
    
      <category term="闭包" scheme="http://objcer.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>关于 CSS transition-timing-function</title>
    <link href="http://objcer.com/2017/03/18/css-transition-timing-function/"/>
    <id>http://objcer.com/2017/03/18/css-transition-timing-function/</id>
    <published>2017-03-18T08:48:37.000Z</published>
    <updated>2017-03-18T08:50:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 CSS Animation 属性中可以设置和动画有关的参数，其中 transition-timing-function 是规定动画执行的速度曲线，常见的取值有两个：①步进函数 ②三次贝塞尔曲线</p>
<blockquote>
<p>Timing functions are either defined as a stepping function or a cubic Bézier curve.</p>
</blockquote>
<p><a href="https://www.w3.org/TR/2012/WD-css3-transitions-20120403/#transition-timing-function-property" target="_blank" rel="external">(W3C)The ‘transition-timing-function’ Property</a><br><a id="more"></a></p>
<p>平时使用过程中，大多都是用 linear ease ease-in ease-out ease-in-out cubic-bezier(n,n,n,n) 这几个参数，这些方式过渡动画，会在每个关键帧之间插入补间动画，所以看起来动画的效果是平滑连贯的。</p>
<p>例如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"box"</span>&gt;&lt;/div&gt;</div><div class="line"><span class="comment">// css</span></div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">left</span>: <span class="number">0px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">150px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">150px</span>;</div><div class="line">	<span class="attribute">background</span>: gray;</div><div class="line">	<span class="attribute">animation</span>: move <span class="number">2s</span> linear forwards;</div><div class="line">&#125;</div><div class="line">@keyframes move &#123;</div><div class="line">	<span class="number">0%</span> &#123;</div><div class="line">		<span class="attribute">left</span>: <span class="number">0px</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="number">100%</span> &#123;</div><div class="line">		<span class="attribute">left</span>: <span class="number">600px</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该例子中，div 节点就会匀速从左向右移动。</p>
<p>然而对于有些动画效果是不需要连贯的，只需要在关键帧之间跳跃，称之为逐帧动画；这个时候就应该使用 steps 方式过渡，可以指定的参数包括：<code>step-start | step-end | steps(&lt;integer&gt;[, [ start | end ] ]?)</code></p>
<ul>
<li><code>steps(&lt;integer&gt;[, [ start | end ] ]?)</code> 可以传入两个参数，第一个是大于0的整数，它是将间隔动画，也即是<strong>两个关键帧</strong>，等分成指定数目的小间隔动画；第二个参数，可以接受 start 和 end 两个值，指定在每个间隔的终点或是起点发生阶跃变化，默认为 end</li>
<li><code>step-start</code> 等同于 <code>steps(1,start)</code>：动画分成1步，动画执行时以 <strong>间隔终点</strong> 为起点开始变化；</li>
<li><code>step-end</code> 等同于 <code>steps(1,end)</code>：动画分成一步，动画执行时以 <strong>间隔起点</strong> 为起点开始变化。</li>
</ul>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/step.png" alt=""></p>
<p>例如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"box"</span>&gt;&lt;/div&gt;</div><div class="line"><span class="comment">// css</span></div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">left</span>: <span class="number">0px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">150px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">150px</span>;</div><div class="line">	<span class="attribute">background</span>: gray;</div><div class="line">	<span class="attribute">animation</span>: move <span class="number">2s</span> steps(<span class="number">2</span>, start) forwards;</div><div class="line">&#125;</div><div class="line">@keyframes move &#123;</div><div class="line">	<span class="number">0%</span> &#123;</div><div class="line">		<span class="attribute">left</span>: <span class="number">0px</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="number">100%</span> &#123;</div><div class="line">		<span class="attribute">left</span>: <span class="number">600px</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该例子中，div 节点移动变化：<code>300px --&gt; 600px</code>。如果修改成 <code>animation: move 2s steps(2, end) forwards;</code>，那么 div 节点移动变化：<code>0px --&gt; 300px --&gt; 600px</code></p>
<p>逐帧动画例子可以参考: <a href="http://www.jianshu.com/p/05c5a9b302d2" target="_blank" rel="external">css逐帧动画</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 CSS Animation 属性中可以设置和动画有关的参数，其中 transition-timing-function 是规定动画执行的速度曲线，常见的取值有两个：①步进函数 ②三次贝塞尔曲线&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Timing functions are either defined as a stepping function or a cubic Bézier curve.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/2012/WD-css3-transitions-20120403/#transition-timing-function-property&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;(W3C)The ‘transition-timing-function’ Property&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://objcer.com/categories/CSS/"/>
    
    
      <category term="transition-timing-function" scheme="http://objcer.com/tags/transition-timing-function/"/>
    
  </entry>
  
  <entry>
    <title>关于 CSS border-radius</title>
    <link href="http://objcer.com/2017/03/17/css-border-radius/"/>
    <id>http://objcer.com/2017/03/17/css-border-radius/</id>
    <published>2017-03-17T13:46:43.000Z</published>
    <updated>2017-03-17T15:07:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>border-radius</code> 用来设置边框圆角。当使用一个半径时确定一个圆形；当使用两个半径时确定一个椭圆，这个(椭)圆与边框的交集形成圆角效果。<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/FC08A931-6DE4-4CE0-A6F8-4F1B523E2007.png" alt=""></p>
<p>对于 <code>border-radius</code> 属性，我们最常见就是设置一个参数：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">border-radius</span>: <span class="number">50px</span>;</div><div class="line"><span class="comment">// 或者</span></div><div class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</div></pre></td></tr></table></figure></p>
<p>而这种用法其实就是为四个角都指定了相同的圆角半径，然而对于 <code>border-radius</code> 其实有更加灵活的用法，可以分别设置四个角不同的圆角效果。</p>
<a id="more"></a>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>border-radius</code> 是一个简写属性，分别设置了：</p>
<ul>
<li>border-top-left-radius</li>
<li>border-top-right-radius</li>
<li>border-bottom-right-radius</li>
<li>border-bottom-left-radius</li>
</ul>
<p>1、<code>border-radius</code> 可以分别指定1，2，3，4个值，值的类型可以是 length 或者 percentage。</p>
<ul>
<li>指定一个值：四个角都设定相同的圆角值</li>
<li>指定两个值：参数一指定 top-left 和 bottom-right；参数二指定 top-right 和 bottom-left</li>
<li>指定三个值：参数一指定 top-left；参数二指定 top-right 和 bottom-left；参数三指定 bottom-right</li>
<li>指定四个值：四个参数分别指定 top-left，top-right，bottom-right，bottom-left（顺时针方向）</li>
</ul>
<p><img src="http://7vikhl.com1.z0.glb.clouddn.com/33F068D3-6BC7-4EE1-94BD-1B83632382FA.png" alt=""></p>
<p>2、<code>border-radius</code> 可以为圆角指定两个半径，上述我们谈到的都是指定了一个圆角半径，那么就是一个正圆形；而指定两个半径，那么就是一个椭圆形。用法是通过一个斜线分割开，斜线左方是 x 轴方向的半径，右方是 y 轴方向的半径。当然，斜线左右两侧可以分别指定 1，2，3，4 个参数，所以有较多的组合。<br>例如：<br><img src="http://7vikhl.com1.z0.glb.clouddn.com/D6EBFB3B-41B5-4249-84C6-5F1773F8C480.png" alt=""></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius" target="_blank" rel="external">MDN border-radius</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;border-radius&lt;/code&gt; 用来设置边框圆角。当使用一个半径时确定一个圆形；当使用两个半径时确定一个椭圆，这个(椭)圆与边框的交集形成圆角效果。&lt;br&gt;&lt;img src=&quot;http://7vikhl.com1.z0.glb.clouddn.com/FC08A931-6DE4-4CE0-A6F8-4F1B523E2007.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;对于 &lt;code&gt;border-radius&lt;/code&gt; 属性，我们最常见就是设置一个参数：&lt;br&gt;&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border-radius&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 或者&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border-radius&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而这种用法其实就是为四个角都指定了相同的圆角半径，然而对于 &lt;code&gt;border-radius&lt;/code&gt; 其实有更加灵活的用法，可以分别设置四个角不同的圆角效果。&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://objcer.com/categories/CSS/"/>
    
    
      <category term="border-radius" scheme="http://objcer.com/tags/border-radius/"/>
    
  </entry>
  
  <entry>
    <title>关于 &#39;void 0&#39; 和 &#39;javascript:void(0)&#39;❓</title>
    <link href="http://objcer.com/2017/03/12/What-does-void-0-mean/"/>
    <id>http://objcer.com/2017/03/12/What-does-void-0-mean/</id>
    <published>2017-03-11T16:55:34.000Z</published>
    <updated>2017-03-11T16:57:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>或许我们都在代码中见到过 <code>void 0</code> 和 <code>javascript:void(0)</code>，这两个到底是什么含义呢？<br><a id="more"></a></p>
<h2 id="void-0"><a href="#void-0" class="headerlink" title="void 0"></a><code>void 0</code></h2><p><code>void</code> 运算符会对给定的表达式进行求值，然后直接返回 undefined。<br><em>语法：</em><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> expression</div></pre></td></tr></table></figure></p>
<p><em>例如：</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> <span class="number">0</span></div><div class="line"><span class="keyword">void</span> (<span class="number">0</span>)</div><div class="line"><span class="keyword">void</span> <span class="string">"hello"</span></div><div class="line"><span class="keyword">void</span> (<span class="keyword">new</span> <span class="built_in">Date</span>())</div><div class="line"><span class="comment">//all will return undefined</span></div></pre></td></tr></table></figure></p>
<p>这似乎看起来没有什么用处，因为如果我们需要返回 <code>undefined</code>，那我们直接使用 <code>undefined</code> 就好了嘛。</p>
<blockquote>
<p>The global undefined property represents the primitive value undefined. It is one of JavaScript’s primitive types.</p>
</blockquote>
<p>没错，对于正常情况下，直接使用 <code>undefined</code> 比 <code>void 0</code> 更加简单而且浅显易懂；但是在 JavaScript 中有一点比较特殊：<code>undefined</code> 并不是保留关键字，它只是一个全局属性，也就是说 <code>undefined</code> 只是一个变量名而已，我们也可以对它进行赋值：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">alert(<span class="built_in">window</span>.hasOwnProperty(<span class="string">'undefined'</span>)); <span class="comment">// alerts "true"</span></div><div class="line"></div><div class="line">alert(<span class="literal">undefined</span>); <span class="comment">//alerts "undefined"</span></div><div class="line"><span class="keyword">var</span> <span class="literal">undefined</span> = <span class="string">"new value"</span>;</div><div class="line">alert(<span class="literal">undefined</span>) <span class="comment">// alerts "new value"</span></div></pre></td></tr></table></figure></p>
<p>注意：这种情况已经得到改善了，现代浏览器中，<code>undefined</code> 作为全局属性只是可读（read-only），但是在局部作用域中，还是可以对其进行再赋值：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> <span class="literal">undefined</span> = <span class="string">'hello'</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'---'</span>, <span class="literal">undefined</span>) <span class="comment">// --- hello</span></div><div class="line">&#125;</div><div class="line">test();</div></pre></td></tr></table></figure></p>
<p>由于 <code>undefined</code> 值可能并不是 <code>undefined</code> 的问题，所以 <code>void 0</code> 就凸显作用了，<code>void 0</code> 使用返回 <code>undefined</code></p>
<p>那么为什么会是 <code>void 0</code> 呢？能不能是 <code>void 100</code>，<code>void 200</code>，<code>void &quot;hello&quot;</code> 这些呢？当然也是可以的，如果你喜欢的话，使用 <code>void 0</code> 的好处是 0 简短且符合编程语言习惯。</p>
<h2 id="javascript-void-0"><a href="#javascript-void-0" class="headerlink" title="javascript:void(0)"></a><code>javascript:void(0)</code></h2><p>在 <code>a</code> 标签（超链接）中，我们可能经常会遇到这种情况：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> &gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>当用户点击一个以 javascript: URI 时，浏览器会对冒号后面的代码进行求值，例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(document.body.style.backgroundColor='green');"</span>&gt;</span></div><div class="line">  点击这个链接会让页面背景变成绿色。</div><div class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>而 <code>void(0)</code> 始终返回  <code>undefined</code>，所以 <code>&lt;a href=&quot;javascript:void(0);&quot; &gt;test&lt;/a&gt;</code> 就创建了一个死超链接，点击后，不会发生任何事情。</p>
<p><strong>注意</strong>，虽然这么做是可行的，但利用 javascript: 伪协议来执行 JavaScript 代码是不推荐的。</p>
<p>如果想要一个链接点击后不做任何事情，或者响应点击而完成其他事情，可以设置其属性 href = “#”，然后绑定 <code>onclick</code> 事件，这样会有一个问题，就是当页面有滚动条时，点击后会返回到页面顶端，用户体验不好；当然有解决方法，我们可以在 <code>onclick</code> 事件中返回 <code>false</code> 即可。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">a</span> href=<span class="string">"#"</span> onclick=<span class="string">"return false;"</span>&gt;test&lt;/<span class="keyword">a</span>&gt;<span class="comment"></span></div><div class="line">// 等价于</div><div class="line">&lt;<span class="keyword">a</span> href=<span class="string">"javascript:void(0);"</span> &gt;test&lt;/<span class="keyword">a</span>&gt;</div></pre></td></tr></table></figure></p>
<p><code>href=&quot;javascript:void(0)&quot;</code> 与 <code>href=&quot;#&quot;</code> 的区别：</p>
<ul>
<li><code>javascript:void(0)</code> 仅仅表示一个死链接。</li>
<li><code>#</code> 包含了一个位置信息，默认的锚是 <code>#top</code>，也就是网页的上端。在页面很长的时候会使用 <code>#</code> 来定位页面的具体位置，格式为：<code># + id</code>。</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://stackoverflow.com/questions/7452341/what-does-void-0-mean" target="_blank" rel="external">What does ‘void 0’ mean?</a><br><a href="http://stackoverflow.com/questions/1291942/what-does-javascriptvoid0-mean" target="_blank" rel="external">What does ‘javascript:void(0)’ mean?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;或许我们都在代码中见到过 &lt;code&gt;void 0&lt;/code&gt; 和 &lt;code&gt;javascript:void(0)&lt;/code&gt;，这两个到底是什么含义呢？&lt;br&gt;
    
    </summary>
    
      <category term="JS" scheme="http://objcer.com/categories/JS/"/>
    
    
      <category term="void 0" scheme="http://objcer.com/tags/void-0/"/>
    
      <category term="javascript:void(0)" scheme="http://objcer.com/tags/javascript-void-0/"/>
    
  </entry>
  
  <entry>
    <title>实现 map, reduce, filter, find 方法</title>
    <link href="http://objcer.com/2017/03/11/implement-the-array-map-reduce-filter-find-method/"/>
    <id>http://objcer.com/2017/03/11/implement-the-array-map-reduce-filter-find-method/</id>
    <published>2017-03-11T08:22:26.000Z</published>
    <updated>2017-03-17T15:07:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>在对数组进行操作中，最常遇到的操作就是遍历数组，进行相关的数据处理，最简单的做法是使用循环，<code>for</code> 或者 <code>while</code>，然而这样的写法并不算是最佳的（<a href="http://jrsinclair.com/articles/2017/javascript-without-loops/" target="_blank" rel="external">JAVASCRIPT WITHOUT LOOPS</a>）；在 JavaScript 中，提供了 <code>map</code>，<code>reduce</code>，<code>reduceRight</code>，<code>filter</code>，<code>find</code> 等方法更加灵活的实现对数组数据的操作。</p>
<p>本文将对 <code>map</code>，<code>reduce</code>，<code>reduceRight</code>，<code>filter</code>，<code>find</code> 方法的用法进行简单介绍，并各自手动对其实现。其中大部分内容都是阅读参考 MDN 文档而来。</p>
<a id="more"></a>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a><code>map</code></h2><p><code>map</code> 方法创建一个新数组，其结果是该数组中的每个元素调用一个提供的回调函数。<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">new</span><span class="type">_array</span> = arr.map(callback[, thisArg])</div></pre></td></tr></table></figure></p>
<ul>
<li><code>callback</code>: 使用三个参数 <code>currentValue</code>, <code>index</code>, <code>array</code></li>
<li><code>thisArg</code>: 可选参数，指定执行 <code>callback</code> 时的 <code>this</code> 值</li>
</ul>
<p>手动实现该方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype._map = <span class="function"><span class="keyword">function</span>(<span class="params">callback <span class="regexp">/*, thisArg*/</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">null</span>) &#123;</div><div class="line">        <span class="comment">// undefined == null</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'null or undefined'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback !== <span class="string">'function'</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'callback is not a function'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> oldArr = <span class="built_in">Object</span>(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">var</span> len = oldArr.length &gt;&gt;&gt; <span class="number">0</span>;</div><div class="line">    <span class="comment">// or: var len = +oldArr.length || 0;</span></div><div class="line">    <span class="keyword">var</span> thisArg;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</div><div class="line">        thisArg = <span class="built_in">arguments</span>[<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> newArr = <span class="keyword">new</span> <span class="built_in">Array</span>(len);</div><div class="line">    <span class="keyword">var</span> k = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (k &lt; len) &#123;</div><div class="line">        <span class="keyword">if</span> (k <span class="keyword">in</span> oldArr) &#123;</div><div class="line">            newArr[k] = callback.call(thisArg, oldArr[k], k, oldArr);</div><div class="line">        &#125;</div><div class="line">        k ++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> newArr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line">array._map(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'-'</span>, value, <span class="string">'-'</span>, index, <span class="string">'-'</span>, arr);</div><div class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><strong>📌注意</strong><br>1、在上述的代码中我们注意到如下的代码：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> t = <span class="built_in">Object</span>(<span class="keyword">this</span>);</div><div class="line"><span class="keyword">var</span> len = t.length &gt;&gt;&gt; <span class="number">0</span>;</div></pre></td></tr></table></figure></p>
<p>其中 <code>t.length &gt;&gt;&gt; 0</code> 是什么用法呢？</p>
<p><code>&gt;&gt;&gt;</code>: 无符号右移位赋值(Unsigned right shift assignment)<br><code>t.length &gt;&gt;&gt; 0</code> 此处的作用是，可以将一个 non-Number 转换成 non-negative Number.</p>
<p>对于 <code>var t = Object(this);</code> 如果 <code>this</code> 为 <code>null</code> 或者 <code>undefined</code>，那么返回的就是一个空的对象，那么这时 <code>t.length</code> 获取对象的 <code>length</code> 属性就会返回 <code>undefined</code>；而 <code>t.length &gt;&gt;&gt; 0</code> 就是为了纠正这个潜在的问题。</p>
<p>其实了解了为啥需要 <code>t.length &gt;&gt;&gt; 0</code> 的原因后，我们其他可以换一种更浅显易懂的解决方式：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// Cast this.length to a number, or <span class="keyword">use</span> <span class="number">0</span> <span class="keyword">if</span> this.length <span class="keyword">is</span></div><div class="line">// <span class="keyword">NaN</span>/undefined (evaluates <span class="keyword">to</span> <span class="literal">false</span>)</div><div class="line"><span class="keyword">var</span> <span class="keyword">len</span> = +this.length || <span class="number">0</span>;</div></pre></td></tr></table></figure></p>
<p><em>参考链接：</em><br><a href="http://stackoverflow.com/questions/5969124/why-are-the-mdc-prototype-functions-written-this-way" target="_blank" rel="external">why-are-the-mdc-prototype-functions-written-this-way</a><br><a href="http://stackoverflow.com/questions/1822350/what-is-the-javascript-operator-and-how-do-you-use-it" target="_blank" rel="external">what-is-the-javascript-operator-and-how-do-you-use-it</a></p>
<p>2、为对象添加方法有两种方式，此处是直接在数组的原型(<code>Array.prototype</code>)中添加方法；还有另一种方式：通过 <code>Object.defineProperty</code> 为对象定义一个方法。建议使用后者，因为直接在原型中添加方法，会有一个缺陷就是，添加的方法是可枚举的，而通过 <code>Object.defineProperty</code> 可以配置方法的可枚举属性。</p>
<h2 id="reduce-和-reduceRight"><a href="#reduce-和-reduceRight" class="headerlink" title="reduce 和 reduceRight"></a><code>reduce</code> 和 <code>reduceRight</code></h2><p>1、<code>reduce</code> 方法对累加器和数组的每个值 (从左到右)应用一个函数，以将其减少为单个值。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">arr</span><span class="selector-class">.reduce</span>(<span class="selector-tag">callback</span><span class="selector-attr">[, initialValue]</span>)</div></pre></td></tr></table></figure></p>
<ul>
<li><code>callback</code>: 使用四个参数 <code>accumulator</code>, <code>currentValue</code>, <code>currentIndex</code>, <code>array</code></li>
<li><code>initialValue</code>: 可选参数</li>
</ul>
<p>例子：数组求和<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var sum = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].reduce((acc, cur) =&gt; acc + cur, <span class="number">0</span>) <span class="comment">// 10</span></div></pre></td></tr></table></figure></p>
<p>手动实现该方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype._reduce = <span class="function"><span class="keyword">function</span>(<span class="params">callback <span class="regexp">/*, initialValue*/</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">null</span>) &#123;</div><div class="line">        <span class="comment">// undefined == null</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'null or undefined'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback !== <span class="string">'function'</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'callback is not a function'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> oldArr = <span class="built_in">Object</span>(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">var</span> len = oldArr.length &gt;&gt;&gt; <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> initialValue, k=<span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length &gt;= <span class="number">2</span>) &#123;</div><div class="line">        initialValue = <span class="built_in">arguments</span>[<span class="number">1</span>];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">while</span>(k &lt; len &amp;&amp; !(k <span class="keyword">in</span> oldArr)) k++;</div><div class="line">        <span class="keyword">if</span>(k &gt;= len) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>( <span class="string">'Reduce of empty array '</span> +</div><div class="line">            <span class="string">'with no initial value'</span> );</div><div class="line">        &#125;</div><div class="line">        initialValue = oldArr[k++];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(k &lt; len) &#123;</div><div class="line">        <span class="keyword">if</span>(k <span class="keyword">in</span> oldArr) &#123;</div><div class="line">            initialValue = callback(initialValue, oldArr[k], k, oldArr);</div><div class="line">        &#125;</div><div class="line">        k++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> initialValue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="comment">// var array = []</span></div><div class="line">array._reduce(<span class="function"><span class="keyword">function</span>(<span class="params">acc, cur, index, arr</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'-'</span>, acc, <span class="string">'-'</span>, cur, <span class="string">'-'</span>, index);</div><div class="line">    <span class="keyword">return</span> acc + cur;</div><div class="line">&#125;, <span class="number">100</span>)</div></pre></td></tr></table></figure></p>
<p>2、<code>reduceRight</code> 方法和 <code>reduce</code> 类似，只不过遍历值的顺序和 <code>reduce</code> 方法相反，从右向左。</p>
<p>手动实现该方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype._reduceRight = <span class="function"><span class="keyword">function</span>(<span class="params">callback <span class="regexp">/*, initialValue*/</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">null</span>) &#123;</div><div class="line">        <span class="comment">// undefined == null</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'null or undefined'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback !== <span class="string">'function'</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'callback is not a function'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> oldArr = <span class="built_in">Object</span>(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">var</span> len = oldArr.length &gt;&gt;&gt; <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> initialValue, k = len - <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length &gt;= <span class="number">2</span>) &#123;</div><div class="line">        initialValue = <span class="built_in">arguments</span>[<span class="number">1</span>];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">while</span>(k &gt;= <span class="number">0</span> &amp;&amp; !(k <span class="keyword">in</span> oldArr)) k--;</div><div class="line">        <span class="keyword">if</span>(k &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>( <span class="string">'Reduce of empty array '</span> +</div><div class="line">            <span class="string">'with no initial value'</span> );</div><div class="line">        &#125;</div><div class="line">        initialValue = oldArr[k--];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(k &gt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(k <span class="keyword">in</span> oldArr) &#123;</div><div class="line">            initialValue = callback(initialValue, oldArr[k], k, oldArr);</div><div class="line">        &#125;</div><div class="line">        k--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> initialValue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="comment">// var array = []</span></div><div class="line">array._reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">acc, cur, index, arr</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'-'</span>, acc, <span class="string">'-'</span>, cur, <span class="string">'-'</span>, index);</div><div class="line">    <span class="keyword">return</span> acc + cur;</div><div class="line">&#125;, <span class="number">100</span>)</div></pre></td></tr></table></figure></p>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a><code>filter</code></h2><p><code>filter</code> 方法使用指定的函数测试所有元素，并创建一个包含所有通过测试的元素的新数组。<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">new</span><span class="type">_arrary</span> = arr.filter(callback[, thisArg])</div></pre></td></tr></table></figure></p>
<ul>
<li><code>callback</code>: 使用三个参数 <code>currentValue</code>, <code>index</code>, <code>array</code>，返回 <code>true</code> 表示保留该值，<code>false</code> 表示排除该值</li>
<li><code>thisArg</code>: 可选参数，指定执行 <code>callback</code> 时的 <code>this</code> 值</li>
</ul>
<p>手动实现该方法：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Array</span>.prototype._filter = <span class="function"><span class="keyword">function</span></span>(callback <span class="comment">/*, thisArg*/</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == <span class="literal">null</span>) &#123;</div><div class="line">        <span class="comment">// undefined == null</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">TypeError</span>(<span class="string">'null or undefined'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (typeof callback !== <span class="string">'function'</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">TypeError</span>(<span class="string">'callback is not a function'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> oldArr = Object(<span class="built_in">this</span>);</div><div class="line">    <span class="keyword">var</span> len = oldArr.length &gt;&gt;&gt; <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> <span class="keyword">new</span><span class="type">Arr</span> = [];</div><div class="line">    <span class="keyword">var</span> thisArg = arguments.length &gt;= <span class="number">2</span> ? arguments[<span class="number">1</span>] : <span class="type">void 0</span>;</div><div class="line">    <span class="keyword">var</span> k = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(k &lt; len) &#123;</div><div class="line">        <span class="keyword">if</span>(k <span class="keyword">in</span> oldArr) &#123;</div><div class="line">            <span class="keyword">var</span> val = oldArr[k];</div><div class="line">            <span class="keyword">if</span>(callback.call(thisArg, val, k, oldArr)) &#123;</div><div class="line">                <span class="keyword">new</span><span class="type">Arr</span>.push(val);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        k++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Arr</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="find"><a href="#find" class="headerlink" title="find"></a><code>find</code></h2><p><code>find</code> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">arr</span><span class="selector-class">.find</span>(<span class="selector-tag">callback</span><span class="selector-attr">[, thisArg]</span>)</div></pre></td></tr></table></figure></p>
<ul>
<li><code>callback</code>: 使用三个参数 <code>currentValue</code>, <code>index</code>, <code>array</code></li>
<li><code>thisArg</code>: 可选参数，指定执行 <code>callback</code> 时的 <code>this</code> 值</li>
</ul>
<p>手动实现该方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype._find = <span class="function"><span class="keyword">function</span>(<span class="params">callback <span class="regexp">/*, thisArg*/</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">null</span>) &#123;</div><div class="line">        <span class="comment">// undefined == null</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'null or undefined'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback !== <span class="string">'function'</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'callback is not a function'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> oldArr = <span class="built_in">Object</span>(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">var</span> len = oldArr.length &gt;&gt;&gt; <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> thisArg = <span class="built_in">arguments</span>.length &gt;= <span class="number">2</span> ? <span class="built_in">arguments</span>[<span class="number">1</span>] : <span class="keyword">void</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> k = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(k &lt; len) &#123;</div><div class="line">        <span class="keyword">if</span>(k <span class="keyword">in</span> oldArr) &#123;</div><div class="line">            <span class="keyword">var</span> val = oldArr[k];</div><div class="line">            <span class="keyword">if</span>(callback.call(thisArg, val, k, oldArr)) &#123;</div><div class="line">                <span class="keyword">return</span> val;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        k++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>其中 <code>void 0</code> 可参考: <a href="http://objcer.com/2017/03/12/What-does-void-0-mean/">关于 ‘void 0’ 和 ‘javascript:void(0)’❓</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在对数组进行操作中，最常遇到的操作就是遍历数组，进行相关的数据处理，最简单的做法是使用循环，&lt;code&gt;for&lt;/code&gt; 或者 &lt;code&gt;while&lt;/code&gt;，然而这样的写法并不算是最佳的（&lt;a href=&quot;http://jrsinclair.com/articles/2017/javascript-without-loops/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JAVASCRIPT WITHOUT LOOPS&lt;/a&gt;）；在 JavaScript 中，提供了 &lt;code&gt;map&lt;/code&gt;，&lt;code&gt;reduce&lt;/code&gt;，&lt;code&gt;reduceRight&lt;/code&gt;，&lt;code&gt;filter&lt;/code&gt;，&lt;code&gt;find&lt;/code&gt; 等方法更加灵活的实现对数组数据的操作。&lt;/p&gt;
&lt;p&gt;本文将对 &lt;code&gt;map&lt;/code&gt;，&lt;code&gt;reduce&lt;/code&gt;，&lt;code&gt;reduceRight&lt;/code&gt;，&lt;code&gt;filter&lt;/code&gt;，&lt;code&gt;find&lt;/code&gt; 方法的用法进行简单介绍，并各自手动对其实现。其中大部分内容都是阅读参考 MDN 文档而来。&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://objcer.com/categories/JS/"/>
    
    
      <category term="map" scheme="http://objcer.com/tags/map/"/>
    
      <category term="reduce" scheme="http://objcer.com/tags/reduce/"/>
    
      <category term="filter" scheme="http://objcer.com/tags/filter/"/>
    
      <category term="find" scheme="http://objcer.com/tags/find/"/>
    
  </entry>
  
</feed>
